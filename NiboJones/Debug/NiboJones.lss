
NiboJones.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000039e  00800100  00003838  000038cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003838  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000011a  0080049e  0080049e  00003c6a  2**0
                  ALLOC
  3 .stab         00002ebc  00000000  00000000  00003c6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001dd8  00000000  00000000  00006b28  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00008900  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000140  00000000  00000000  00008918  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000776  00000000  00000000  00008a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000000c8  00000000  00000000  000091ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000003ea  00000000  00000000  00009296  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__ctors_end>
       4:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
       8:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
       c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      10:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      14:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      18:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      1c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      20:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      24:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      28:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      2c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      30:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      34:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      38:	0c 94 96 15 	jmp	0x2b2c	; 0x2b2c <__vector_14>
      3c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      40:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      44:	0c 94 91 09 	jmp	0x1322	; 0x1322 <__vector_17>
      48:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__vector_18>
      4c:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__vector_19>
      50:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      54:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      58:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      5c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      60:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      64:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      68:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      6c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      70:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      74:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      78:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      7c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      80:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      84:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      88:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__bad_interrupt>
      8c:	5a 02       	muls	r21, r26
      8e:	5d 02       	muls	r21, r29
      90:	60 02       	muls	r22, r16
      92:	63 02       	muls	r22, r19
      94:	66 02       	muls	r22, r22
      96:	69 02       	muls	r22, r25
      98:	6c 02       	muls	r22, r28
      9a:	6f 02       	muls	r22, r31
      9c:	27 03       	mulsu	r18, r23
      9e:	2d 03       	fmul	r18, r21
      a0:	30 03       	mulsu	r19, r16
      a2:	3b 03       	fmul	r19, r19
      a4:	2a 03       	fmul	r18, r18
      a6:	5a 03       	fmul	r21, r18
      a8:	96 03       	fmuls	r17, r22
      aa:	87 03       	fmuls	r16, r23

000000ac <__trampolines_end>:
      ac:	31 36       	cpi	r19, 0x61	; 97
      ae:	33 00       	.word	0x0033	; ????

000000b0 <bot_lib_version>:
      b0:	32 2e 31 31 00                                      2.11.

000000b5 <__c.2130>:
      b5:	6e 61 6e 00                                         nan.

000000b9 <__c.2128>:
      b9:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      c9:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      d9:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      e9:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      f9:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     109:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     119:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     129:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     139:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     149:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     159:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     169:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     179:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     189:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     199:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1a9:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27 00        .r^"....$...='.

000001b8 <__ctors_end>:
     1b8:	11 24       	eor	r1, r1
     1ba:	1f be       	out	0x3f, r1	; 63
     1bc:	cf ef       	ldi	r28, 0xFF	; 255
     1be:	d0 e1       	ldi	r29, 0x10	; 16
     1c0:	de bf       	out	0x3e, r29	; 62
     1c2:	cd bf       	out	0x3d, r28	; 61

000001c4 <__do_copy_data>:
     1c4:	14 e0       	ldi	r17, 0x04	; 4
     1c6:	a0 e0       	ldi	r26, 0x00	; 0
     1c8:	b1 e0       	ldi	r27, 0x01	; 1
     1ca:	e8 e3       	ldi	r30, 0x38	; 56
     1cc:	f8 e3       	ldi	r31, 0x38	; 56
     1ce:	00 e0       	ldi	r16, 0x00	; 0
     1d0:	0b bf       	out	0x3b, r16	; 59
     1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <__do_copy_data+0x14>
     1d4:	07 90       	elpm	r0, Z+
     1d6:	0d 92       	st	X+, r0
     1d8:	ae 39       	cpi	r26, 0x9E	; 158
     1da:	b1 07       	cpc	r27, r17
     1dc:	d9 f7       	brne	.-10     	; 0x1d4 <__do_copy_data+0x10>

000001de <__do_clear_bss>:
     1de:	25 e0       	ldi	r18, 0x05	; 5
     1e0:	ae e9       	ldi	r26, 0x9E	; 158
     1e2:	b4 e0       	ldi	r27, 0x04	; 4
     1e4:	01 c0       	rjmp	.+2      	; 0x1e8 <.do_clear_bss_start>

000001e6 <.do_clear_bss_loop>:
     1e6:	1d 92       	st	X+, r1

000001e8 <.do_clear_bss_start>:
     1e8:	a8 3b       	cpi	r26, 0xB8	; 184
     1ea:	b2 07       	cpc	r27, r18
     1ec:	e1 f7       	brne	.-8      	; 0x1e6 <.do_clear_bss_loop>
     1ee:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <main>
     1f2:	0c 94 1a 1c 	jmp	0x3834	; 0x3834 <_exit>

000001f6 <__bad_interrupt>:
     1f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001fa <initDisplay>:

/**
 * before Display can be used for output is has to initialized.
 */
void initDisplay(){
	display_init();
     1fa:	0e 94 04 09 	call	0x1208	; 0x1208 <display_init>
	gfx_init();
     1fe:	0c 94 23 0b 	jmp	0x1646	; 0x1646 <gfx_init>

00000202 <setStartPointForOutline>:
/**
 * This will set the start point of outline painting so all looks convenient.
 * @param startX x coordinate outline painting shall start
 * @param startY y coordinate outline painting shall start
 */
void setStartPointForOutline(int startX, int startY){
     202:	0f 93       	push	r16
     204:	1f 93       	push	r17
     206:	cf 93       	push	r28
     208:	df 93       	push	r29
     20a:	00 d0       	rcall	.+0      	; 0x20c <setStartPointForOutline+0xa>
     20c:	cd b7       	in	r28, 0x3d	; 61
     20e:	de b7       	in	r29, 0x3e	; 62
     210:	8c 01       	movw	r16, r24
	gfx_fill(0);
     212:	80 e0       	ldi	r24, 0x00	; 0
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	69 83       	std	Y+1, r22	; 0x01
     218:	7a 83       	std	Y+2, r23	; 0x02
     21a:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <gfx_fill>
	gfx_move(startX, startY);
     21e:	69 81       	ldd	r22, Y+1	; 0x01
     220:	7a 81       	ldd	r23, Y+2	; 0x02
     222:	c8 01       	movw	r24, r16
}
     224:	0f 90       	pop	r0
     226:	0f 90       	pop	r0
     228:	df 91       	pop	r29
     22a:	cf 91       	pop	r28
     22c:	1f 91       	pop	r17
     22e:	0f 91       	pop	r16
 * @param startX x coordinate outline painting shall start
 * @param startY y coordinate outline painting shall start
 */
void setStartPointForOutline(int startX, int startY){
	gfx_fill(0);
	gfx_move(startX, startY);
     230:	0c 94 62 0b 	jmp	0x16c4	; 0x16c4 <gfx_move>

00000234 <showOutline>:
 * @param segmentHeight is the length of a height segment. A segment is a specific number of pixels.
 * This depends on the total height of the structure.
 * @param segmentWidth is the length of a width segment. A segment is a specific number of pixels.
 * This depends on the total width of the structure.
 */
void showOutline(int byte, int segmentHeight, int segmentWidth) {
     234:	cf 92       	push	r12
     236:	df 92       	push	r13
     238:	ef 92       	push	r14
     23a:	ff 92       	push	r15
     23c:	0f 93       	push	r16
     23e:	1f 93       	push	r17
     240:	cf 93       	push	r28
     242:	df 93       	push	r29
     244:	ec 01       	movw	r28, r24
     246:	7b 01       	movw	r14, r22
     248:	6a 01       	movw	r12, r20
	int posx = gfx_get_x();
     24a:	0e 94 28 0a 	call	0x1450	; 0x1450 <gfx_get_x>
     24e:	8c 01       	movw	r16, r24
	int posy = gfx_get_y();
     250:	0e 94 2b 0a 	call	0x1456	; 0x1456 <gfx_get_y>
     254:	bc 01       	movw	r22, r24
	int direction= byte & 96;
	int length = byte & 31;
     256:	fe 01       	movw	r30, r28
     258:	ef 71       	andi	r30, 0x1F	; 31
     25a:	ff 27       	eor	r31, r31
 * This depends on the total width of the structure.
 */
void showOutline(int byte, int segmentHeight, int segmentWidth) {
	int posx = gfx_get_x();
	int posy = gfx_get_y();
	int direction= byte & 96;
     25c:	9e 01       	movw	r18, r28
     25e:	20 76       	andi	r18, 0x60	; 96
     260:	33 27       	eor	r19, r19
	int length = byte & 31;

	switch (direction) {
     262:	20 32       	cpi	r18, 0x20	; 32
     264:	31 05       	cpc	r19, r1
     266:	09 f1       	breq	.+66     	; 0x2aa <showOutline+0x76>
     268:	74 f4       	brge	.+28     	; 0x286 <showOutline+0x52>
     26a:	23 2b       	or	r18, r19
     26c:	09 f0       	breq	.+2      	; 0x270 <showOutline+0x3c>
     26e:	49 c0       	rjmp	.+146    	; 0x302 <showOutline+0xce>

	case 0: //oben
		gfx_lineTo(posx, posy - (length * segmentHeight));
     270:	ee 9d       	mul	r30, r14
     272:	c0 01       	movw	r24, r0
     274:	ef 9d       	mul	r30, r15
     276:	90 0d       	add	r25, r0
     278:	fe 9d       	mul	r31, r14
     27a:	90 0d       	add	r25, r0
     27c:	11 24       	eor	r1, r1
     27e:	68 1b       	sub	r22, r24
     280:	79 0b       	sbc	r23, r25
     282:	c8 01       	movw	r24, r16
     284:	34 c0       	rjmp	.+104    	; 0x2ee <showOutline+0xba>
	int posx = gfx_get_x();
	int posy = gfx_get_y();
	int direction= byte & 96;
	int length = byte & 31;

	switch (direction) {
     286:	20 34       	cpi	r18, 0x40	; 64
     288:	31 05       	cpc	r19, r1
     28a:	01 f1       	breq	.+64     	; 0x2cc <showOutline+0x98>
     28c:	20 36       	cpi	r18, 0x60	; 96
     28e:	31 05       	cpc	r19, r1
     290:	c1 f5       	brne	.+112    	; 0x302 <showOutline+0xce>
		break;
	case 64: //unten
		gfx_vline(segmentHeight * length);
		break;
	case 96: //links
		gfx_lineTo(posx - (length * segmentWidth), posy);
     292:	ec 9d       	mul	r30, r12
     294:	c0 01       	movw	r24, r0
     296:	ed 9d       	mul	r30, r13
     298:	90 0d       	add	r25, r0
     29a:	fc 9d       	mul	r31, r12
     29c:	90 0d       	add	r25, r0
     29e:	11 24       	eor	r1, r1
     2a0:	98 01       	movw	r18, r16
     2a2:	28 1b       	sub	r18, r24
     2a4:	39 0b       	sbc	r19, r25
     2a6:	c9 01       	movw	r24, r18
     2a8:	22 c0       	rjmp	.+68     	; 0x2ee <showOutline+0xba>

	case 0: //oben
		gfx_lineTo(posx, posy - (length * segmentHeight));
		break;
	case 32: //rechts
		gfx_hline(segmentWidth * length);
     2aa:	ce 9e       	mul	r12, r30
     2ac:	c0 01       	movw	r24, r0
     2ae:	cf 9e       	mul	r12, r31
     2b0:	90 0d       	add	r25, r0
     2b2:	de 9e       	mul	r13, r30
     2b4:	90 0d       	add	r25, r0
     2b6:	11 24       	eor	r1, r1
		gfx_lineTo(posx - (length * segmentWidth), posy);
		break;

	}

}
     2b8:	df 91       	pop	r29
     2ba:	cf 91       	pop	r28
     2bc:	1f 91       	pop	r17
     2be:	0f 91       	pop	r16
     2c0:	ff 90       	pop	r15
     2c2:	ef 90       	pop	r14
     2c4:	df 90       	pop	r13
     2c6:	cf 90       	pop	r12

	case 0: //oben
		gfx_lineTo(posx, posy - (length * segmentHeight));
		break;
	case 32: //rechts
		gfx_hline(segmentWidth * length);
     2c8:	0c 94 5a 0e 	jmp	0x1cb4	; 0x1cb4 <gfx_hline>
		break;
	case 64: //unten
		gfx_vline(segmentHeight * length);
     2cc:	ee 9e       	mul	r14, r30
     2ce:	c0 01       	movw	r24, r0
     2d0:	ef 9e       	mul	r14, r31
     2d2:	90 0d       	add	r25, r0
     2d4:	fe 9e       	mul	r15, r30
     2d6:	90 0d       	add	r25, r0
     2d8:	11 24       	eor	r1, r1
		gfx_lineTo(posx - (length * segmentWidth), posy);
		break;

	}

}
     2da:	df 91       	pop	r29
     2dc:	cf 91       	pop	r28
     2de:	1f 91       	pop	r17
     2e0:	0f 91       	pop	r16
     2e2:	ff 90       	pop	r15
     2e4:	ef 90       	pop	r14
     2e6:	df 90       	pop	r13
     2e8:	cf 90       	pop	r12
		break;
	case 32: //rechts
		gfx_hline(segmentWidth * length);
		break;
	case 64: //unten
		gfx_vline(segmentHeight * length);
     2ea:	0c 94 55 0e 	jmp	0x1caa	; 0x1caa <gfx_vline>
		gfx_lineTo(posx - (length * segmentWidth), posy);
		break;

	}

}
     2ee:	df 91       	pop	r29
     2f0:	cf 91       	pop	r28
     2f2:	1f 91       	pop	r17
     2f4:	0f 91       	pop	r16
     2f6:	ff 90       	pop	r15
     2f8:	ef 90       	pop	r14
     2fa:	df 90       	pop	r13
     2fc:	cf 90       	pop	r12
		break;
	case 64: //unten
		gfx_vline(segmentHeight * length);
		break;
	case 96: //links
		gfx_lineTo(posx - (length * segmentWidth), posy);
     2fe:	0c 94 72 0e 	jmp	0x1ce4	; 0x1ce4 <gfx_lineTo>
		break;

	}

}
     302:	df 91       	pop	r29
     304:	cf 91       	pop	r28
     306:	1f 91       	pop	r17
     308:	0f 91       	pop	r16
     30a:	ff 90       	pop	r15
     30c:	ef 90       	pop	r14
     30e:	df 90       	pop	r13
     310:	cf 90       	pop	r12
     312:	08 95       	ret

00000314 <cleanDebug>:

/**
 * Cleans display on the bottom part which is reserved as debug output line.
 * @param length number of characters which shall be removed from debug output line.
 */
void cleanDebug(int length){
     314:	ef 92       	push	r14
     316:	ff 92       	push	r15
     318:	0f 93       	push	r16
     31a:	1f 93       	push	r17
     31c:	cf 93       	push	r28
     31e:	df 93       	push	r29
     320:	cd b7       	in	r28, 0x3d	; 61
     322:	de b7       	in	r29, 0x3e	; 62
     324:	7c 01       	movw	r14, r24
	for(int i = 0; i < length; i++){
		whiper[i] = ' ';
	}

	gfx_print_text(whiper);
}
     326:	0d b7       	in	r16, 0x3d	; 61
     328:	1e b7       	in	r17, 0x3e	; 62
/**
 * Cleans display on the bottom part which is reserved as debug output line.
 * @param length number of characters which shall be removed from debug output line.
 */
void cleanDebug(int length){
	if(showDebug != 1){
     32a:	80 91 44 03 	lds	r24, 0x0344
     32e:	90 91 45 03 	lds	r25, 0x0345
     332:	01 97       	sbiw	r24, 0x01	; 1
     334:	09 f5       	brne	.+66     	; 0x378 <cleanDebug+0x64>
		return;
	}
	gfx_move(0, 55);
     336:	67 e3       	ldi	r22, 0x37	; 55
     338:	70 e0       	ldi	r23, 0x00	; 0
     33a:	80 e0       	ldi	r24, 0x00	; 0
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <gfx_move>
	char whiper[length];
     342:	8d b7       	in	r24, 0x3d	; 61
     344:	9e b7       	in	r25, 0x3e	; 62
     346:	8e 19       	sub	r24, r14
     348:	9f 09       	sbc	r25, r15
     34a:	0f b6       	in	r0, 0x3f	; 63
     34c:	f8 94       	cli
     34e:	9e bf       	out	0x3e, r25	; 62
     350:	0f be       	out	0x3f, r0	; 63
     352:	8d bf       	out	0x3d, r24	; 61
     354:	01 96       	adiw	r24, 0x01	; 1

	for(int i = 0; i < length; i++){
     356:	fc 01       	movw	r30, r24
		whiper[i] = ' ';
     358:	40 e2       	ldi	r20, 0x20	; 32
     35a:	9f 01       	movw	r18, r30
     35c:	28 1b       	sub	r18, r24
     35e:	39 0b       	sbc	r19, r25
		return;
	}
	gfx_move(0, 55);
	char whiper[length];

	for(int i = 0; i < length; i++){
     360:	2e 15       	cp	r18, r14
     362:	3f 05       	cpc	r19, r15
     364:	14 f4       	brge	.+4      	; 0x36a <cleanDebug+0x56>
		whiper[i] = ' ';
     366:	41 93       	st	Z+, r20
     368:	f8 cf       	rjmp	.-16     	; 0x35a <cleanDebug+0x46>
	}

	gfx_print_text(whiper);
     36a:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <gfx_print_text>
     36e:	0f b6       	in	r0, 0x3f	; 63
     370:	f8 94       	cli
     372:	1e bf       	out	0x3e, r17	; 62
     374:	0f be       	out	0x3f, r0	; 63
     376:	0d bf       	out	0x3d, r16	; 61
}
     378:	0f b6       	in	r0, 0x3f	; 63
     37a:	f8 94       	cli
     37c:	1e bf       	out	0x3e, r17	; 62
     37e:	0f be       	out	0x3f, r0	; 63
     380:	0d bf       	out	0x3d, r16	; 61
     382:	df 91       	pop	r29
     384:	cf 91       	pop	r28
     386:	1f 91       	pop	r17
     388:	0f 91       	pop	r16
     38a:	ff 90       	pop	r15
     38c:	ef 90       	pop	r14
     38e:	08 95       	ret

00000390 <printDebug>:

/**
 * Prints a debug output on the bottom part of the display which is reserved as debug output line.
 * @param array array of chars which shall be printed out on line.
 */
void printDebug(char array[20]){
     390:	cf 93       	push	r28
     392:	df 93       	push	r29
     394:	ec 01       	movw	r28, r24
	if(showDebug != 1){
     396:	80 91 44 03 	lds	r24, 0x0344
     39a:	90 91 45 03 	lds	r25, 0x0345
     39e:	01 97       	sbiw	r24, 0x01	; 1
     3a0:	59 f4       	brne	.+22     	; 0x3b8 <printDebug+0x28>
		return;
	}
	gfx_move(0, 55);
     3a2:	67 e3       	ldi	r22, 0x37	; 55
     3a4:	70 e0       	ldi	r23, 0x00	; 0
     3a6:	80 e0       	ldi	r24, 0x00	; 0
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <gfx_move>
	gfx_print_text(array);
     3ae:	ce 01       	movw	r24, r28
}
     3b0:	df 91       	pop	r29
     3b2:	cf 91       	pop	r28
void printDebug(char array[20]){
	if(showDebug != 1){
		return;
	}
	gfx_move(0, 55);
	gfx_print_text(array);
     3b4:	0c 94 e4 0f 	jmp	0x1fc8	; 0x1fc8 <gfx_print_text>
}
     3b8:	df 91       	pop	r29
     3ba:	cf 91       	pop	r28
     3bc:	08 95       	ret

000003be <printInfo>:
/**
 * Prints a info output on the display in debug running mode of project.
 * @param array array of chars which shall placed on display
 * @param height height on the display where info output shall appear.
 */
void printInfo(char array[40], int height){
     3be:	cf 93       	push	r28
     3c0:	df 93       	push	r29
     3c2:	ec 01       	movw	r28, r24
	if(showInfo != 1){
     3c4:	80 91 a6 04 	lds	r24, 0x04A6
     3c8:	90 91 a7 04 	lds	r25, 0x04A7
     3cc:	01 97       	sbiw	r24, 0x01	; 1
     3ce:	49 f4       	brne	.+18     	; 0x3e2 <printInfo+0x24>
		return;
	}
	gfx_move(0, height);
     3d0:	80 e0       	ldi	r24, 0x00	; 0
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <gfx_move>
	gfx_print_text(array);
     3d8:	ce 01       	movw	r24, r28
}
     3da:	df 91       	pop	r29
     3dc:	cf 91       	pop	r28
void printInfo(char array[40], int height){
	if(showInfo != 1){
		return;
	}
	gfx_move(0, height);
	gfx_print_text(array);
     3de:	0c 94 e4 0f 	jmp	0x1fc8	; 0x1fc8 <gfx_print_text>
}
     3e2:	df 91       	pop	r29
     3e4:	cf 91       	pop	r28
     3e6:	08 95       	ret

000003e8 <printMovingDirection>:
/**
 * Prints a char on right part of the debug output line which indicates whether the NIBO is in left or right running
 * mode around the structure.
 * @param direction running direction around the structure
 */
void printMovingDirection(int direction){
     3e8:	cf 93       	push	r28
     3ea:	df 93       	push	r29
     3ec:	ec 01       	movw	r28, r24
	if(showMovingDirection != 1){
     3ee:	80 91 40 03 	lds	r24, 0x0340
     3f2:	90 91 41 03 	lds	r25, 0x0341
     3f6:	01 97       	sbiw	r24, 0x01	; 1
     3f8:	21 f5       	brne	.+72     	; 0x442 <printMovingDirection+0x5a>
		return;
	}
	gfx_move(120, 55);
     3fa:	67 e3       	ldi	r22, 0x37	; 55
     3fc:	70 e0       	ldi	r23, 0x00	; 0
     3fe:	88 e7       	ldi	r24, 0x78	; 120
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <gfx_move>
	gfx_print_text("  ");
     406:	83 e7       	ldi	r24, 0x73	; 115
     408:	93 e0       	ldi	r25, 0x03	; 3
     40a:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <gfx_print_text>
	gfx_move(120, 55);
     40e:	67 e3       	ldi	r22, 0x37	; 55
     410:	70 e0       	ldi	r23, 0x00	; 0
     412:	88 e7       	ldi	r24, 0x78	; 120
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <gfx_move>

	switch (direction) {
     41a:	c3 30       	cpi	r28, 0x03	; 3
     41c:	d1 05       	cpc	r29, r1
     41e:	41 f0       	breq	.+16     	; 0x430 <printMovingDirection+0x48>
     420:	c6 30       	cpi	r28, 0x06	; 6
     422:	d1 05       	cpc	r29, r1
     424:	41 f0       	breq	.+16     	; 0x436 <printMovingDirection+0x4e>
     426:	cd 2b       	or	r28, r29
     428:	61 f4       	brne	.+24     	; 0x442 <printMovingDirection+0x5a>
	case 0:
		gfx_print_text("L");
     42a:	88 e4       	ldi	r24, 0x48	; 72
     42c:	93 e0       	ldi	r25, 0x03	; 3
     42e:	05 c0       	rjmp	.+10     	; 0x43a <printMovingDirection+0x52>
		break;
	case 3:
		gfx_print_text("U");
     430:	8a e4       	ldi	r24, 0x4A	; 74
     432:	93 e0       	ldi	r25, 0x03	; 3
     434:	02 c0       	rjmp	.+4      	; 0x43a <printMovingDirection+0x52>
		break;
	case 6:
		gfx_print_text("R");
     436:	8c e4       	ldi	r24, 0x4C	; 76
     438:	93 e0       	ldi	r25, 0x03	; 3
		break;
	}
}
     43a:	df 91       	pop	r29
     43c:	cf 91       	pop	r28
		break;
	case 3:
		gfx_print_text("U");
		break;
	case 6:
		gfx_print_text("R");
     43e:	0c 94 e4 0f 	jmp	0x1fc8	; 0x1fc8 <gfx_print_text>
		break;
	}
}
     442:	df 91       	pop	r29
     444:	cf 91       	pop	r28
     446:	08 95       	ret

00000448 <printMachineState>:
/**
 * The middle or main part of the display of NIBO is reserved for machine state out prints.
 * This method will print a convenient phrase for the current machine state.
 * @param state current machine state
 */
void printMachineState(int state) {
     448:	0f 93       	push	r16
     44a:	1f 93       	push	r17
     44c:	cf 93       	push	r28
     44e:	df 93       	push	r29
     450:	cd b7       	in	r28, 0x3d	; 61
     452:	de b7       	in	r29, 0x3e	; 62
     454:	64 97       	sbiw	r28, 0x14	; 20
     456:	0f b6       	in	r0, 0x3f	; 63
     458:	f8 94       	cli
     45a:	de bf       	out	0x3e, r29	; 62
     45c:	0f be       	out	0x3f, r0	; 63
     45e:	cd bf       	out	0x3d, r28	; 61
     460:	8c 01       	movw	r16, r24
	if(showMachineStages != 1){
     462:	80 91 42 03 	lds	r24, 0x0342
     466:	90 91 43 03 	lds	r25, 0x0343
     46a:	01 97       	sbiw	r24, 0x01	; 1
     46c:	09 f0       	breq	.+2      	; 0x470 <printMachineState+0x28>
     46e:	53 c0       	rjmp	.+166    	; 0x516 <printMachineState+0xce>
		return;
	}
	char output[20];
	gfx_move(0, 5);
     470:	65 e0       	ldi	r22, 0x05	; 5
     472:	70 e0       	ldi	r23, 0x00	; 0
     474:	80 e0       	ldi	r24, 0x00	; 0
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <gfx_move>
	gfx_print_text("Machine state:");
     47c:	8e e4       	ldi	r24, 0x4E	; 78
     47e:	93 e0       	ldi	r25, 0x03	; 3
     480:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <gfx_print_text>
	gfx_move(0, 15);
     484:	6f e0       	ldi	r22, 0x0F	; 15
     486:	70 e0       	ldi	r23, 0x00	; 0
     488:	80 e0       	ldi	r24, 0x00	; 0
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <gfx_move>

	gfx_print_text("                        ");
     490:	8d e5       	ldi	r24, 0x5D	; 93
     492:	93 e0       	ldi	r25, 0x03	; 3
     494:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <gfx_print_text>
	gfx_move(0, 15);
     498:	6f e0       	ldi	r22, 0x0F	; 15
     49a:	70 e0       	ldi	r23, 0x00	; 0
     49c:	80 e0       	ldi	r24, 0x00	; 0
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <gfx_move>

	switch (state) {
     4a4:	08 30       	cpi	r16, 0x08	; 8
     4a6:	11 05       	cpc	r17, r1
     4a8:	00 f5       	brcc	.+64     	; 0x4ea <printMachineState+0xa2>
     4aa:	f8 01       	movw	r30, r16
     4ac:	ea 5b       	subi	r30, 0xBA	; 186
     4ae:	ff 4f       	sbci	r31, 0xFF	; 255
     4b0:	0c 94 3a 1a 	jmp	0x3474	; 0x3474 <__tablejump2__>
	case 0:
		sprintf(output, "INITIALIZATION");
     4b4:	66 e7       	ldi	r22, 0x76	; 118
     4b6:	73 e0       	ldi	r23, 0x03	; 3
     4b8:	14 c0       	rjmp	.+40     	; 0x4e2 <printMachineState+0x9a>
		break;
	case 1:
		sprintf(output, "TRACK_CORRECTION");
     4ba:	65 e8       	ldi	r22, 0x85	; 133
     4bc:	73 e0       	ldi	r23, 0x03	; 3
     4be:	11 c0       	rjmp	.+34     	; 0x4e2 <printMachineState+0x9a>
		break;
	case 2:
		sprintf(output, "TURNING_INSIDE");
     4c0:	66 e9       	ldi	r22, 0x96	; 150
     4c2:	73 e0       	ldi	r23, 0x03	; 3
     4c4:	0e c0       	rjmp	.+28     	; 0x4e2 <printMachineState+0x9a>
		break;
	case 3:
		sprintf(output, "TURNING_OUTSIDE");
     4c6:	65 ea       	ldi	r22, 0xA5	; 165
     4c8:	73 e0       	ldi	r23, 0x03	; 3
     4ca:	0b c0       	rjmp	.+22     	; 0x4e2 <printMachineState+0x9a>
		break;
	case 4:
		sprintf(output, "RUNNING_FORWARD");
     4cc:	65 eb       	ldi	r22, 0xB5	; 181
     4ce:	73 e0       	ldi	r23, 0x03	; 3
     4d0:	08 c0       	rjmp	.+16     	; 0x4e2 <printMachineState+0x9a>
		break;
	case 5:
		sprintf(output, "SENDING_DATA");
     4d2:	65 ec       	ldi	r22, 0xC5	; 197
     4d4:	73 e0       	ldi	r23, 0x03	; 3
     4d6:	05 c0       	rjmp	.+10     	; 0x4e2 <printMachineState+0x9a>
		break;
	case 6:
		sprintf(output, "WAITING");
     4d8:	62 ed       	ldi	r22, 0xD2	; 210
     4da:	73 e0       	ldi	r23, 0x03	; 3
     4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <printMachineState+0x9a>
		break;
	case 7:
		sprintf(output, "FINISHING_RUN");
     4de:	6a ed       	ldi	r22, 0xDA	; 218
     4e0:	73 e0       	ldi	r23, 0x03	; 3
     4e2:	ce 01       	movw	r24, r28
     4e4:	01 96       	adiw	r24, 0x01	; 1
     4e6:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <strcpy>
		break;
	}

	gfx_print_text(output);
     4ea:	ce 01       	movw	r24, r28
     4ec:	01 96       	adiw	r24, 0x01	; 1
     4ee:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <gfx_print_text>

	if (state == 6) {
		gfx_move(0, 30);
     4f2:	6e e1       	ldi	r22, 0x1E	; 30
     4f4:	70 e0       	ldi	r23, 0x00	; 0
     4f6:	80 e0       	ldi	r24, 0x00	; 0
     4f8:	90 e0       	ldi	r25, 0x00	; 0
		break;
	}

	gfx_print_text(output);

	if (state == 6) {
     4fa:	06 30       	cpi	r16, 0x06	; 6
     4fc:	11 05       	cpc	r17, r1
     4fe:	29 f4       	brne	.+10     	; 0x50a <printMachineState+0xc2>
		gfx_move(0, 30);
     500:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <gfx_move>
		gfx_print_text("press s3 for start");
     504:	88 ee       	ldi	r24, 0xE8	; 232
     506:	93 e0       	ldi	r25, 0x03	; 3
     508:	04 c0       	rjmp	.+8      	; 0x512 <printMachineState+0xca>
		//cleanDebug(20);
	}else{
		gfx_move(0, 30);
     50a:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <gfx_move>
		gfx_print_text("                        ");
     50e:	8d e5       	ldi	r24, 0x5D	; 93
     510:	93 e0       	ldi	r25, 0x03	; 3
     512:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <gfx_print_text>
	}
}
     516:	64 96       	adiw	r28, 0x14	; 20
     518:	0f b6       	in	r0, 0x3f	; 63
     51a:	f8 94       	cli
     51c:	de bf       	out	0x3e, r29	; 62
     51e:	0f be       	out	0x3f, r0	; 63
     520:	cd bf       	out	0x3d, r28	; 61
     522:	df 91       	pop	r29
     524:	cf 91       	pop	r28
     526:	1f 91       	pop	r17
     528:	0f 91       	pop	r16
     52a:	08 95       	ret

0000052c <initUART0>:

/**
 * The XBee communication has to be initialized before use.
 */
void initUART0(){
	uart0_set_baudrate(9600);
     52c:	80 e8       	ldi	r24, 0x80	; 128
     52e:	95 e2       	ldi	r25, 0x25	; 37
     530:	0e 94 b4 07 	call	0xf68	; 0xf68 <uart0_set_baudrate>
	uart0_enable();
     534:	0c 94 fe 07 	jmp	0xffc	; 0xffc <uart0_enable>

00000538 <gatherCoproData>:
/**
 * This will safe data of the co-processor for sending to NIBOBrody.
 * Those data are ticks of both wheels moved since last reset
 */
void gatherCoproData(){
	coproTicksLeft = copro_ticks_l;
     538:	80 91 44 05 	lds	r24, 0x0544
     53c:	90 91 45 05 	lds	r25, 0x0545
     540:	90 93 b9 04 	sts	0x04B9, r25
     544:	80 93 b8 04 	sts	0x04B8, r24
	coproTicksRight = copro_ticks_r;
     548:	80 91 5c 05 	lds	r24, 0x055C
     54c:	90 91 5d 05 	lds	r25, 0x055D
     550:	90 93 bd 04 	sts	0x04BD, r25
     554:	80 93 bc 04 	sts	0x04BC, r24
     558:	08 95       	ret

0000055a <sendSegment>:
	int averageOdometry = ((leftOdometry + rightOdometry) / 27) / 2;
	// 128 is address of NIBOBrody, function to minimize measured length to a more appropriate length for sending.
	int byte = 128 + (64 * recognizedLine) + (32 * direction) + averageOdometry;
	unsigned char message = byte & 255;
	int finishedSuccessfull = 0;
	if(!uart0_txfull()){
     55a:	70 91 db 04 	lds	r23, 0x04DB
     55e:	78 30       	cpi	r23, 0x08	; 8
     560:	d9 f0       	breq	.+54     	; 0x598 <sendSegment+0x3e>
 * @return
 */
int sendSegment(int recognizedLine, int direction, int leftOdometry, int rightOdometry){
	int averageOdometry = ((leftOdometry + rightOdometry) / 27) / 2;
	// 128 is address of NIBOBrody, function to minimize measured length to a more appropriate length for sending.
	int byte = 128 + (64 * recognizedLine) + (32 * direction) + averageOdometry;
     562:	02 96       	adiw	r24, 0x02	; 2
     564:	e6 2f       	mov	r30, r22
     566:	72 e0       	ldi	r23, 0x02	; 2
     568:	87 9f       	mul	r24, r23
     56a:	e0 0d       	add	r30, r0
     56c:	11 24       	eor	r1, r1
 * @param leftOdometry ticks of the left wheel gathered since last reset
 * @param rightOdometry ticks of the left wheel gathered since last reset
 * @return
 */
int sendSegment(int recognizedLine, int direction, int leftOdometry, int rightOdometry){
	int averageOdometry = ((leftOdometry + rightOdometry) / 27) / 2;
     56e:	ca 01       	movw	r24, r20
     570:	82 0f       	add	r24, r18
     572:	93 1f       	adc	r25, r19
     574:	66 e3       	ldi	r22, 0x36	; 54
     576:	70 e0       	ldi	r23, 0x00	; 0
     578:	0e 94 04 1a 	call	0x3408	; 0x3408 <__divmodhi4>
	// 128 is address of NIBOBrody, function to minimize measured length to a more appropriate length for sending.
	int byte = 128 + (64 * recognizedLine) + (32 * direction) + averageOdometry;
	unsigned char message = byte & 255;
	int finishedSuccessfull = 0;
	if(!uart0_txfull()){
		uart0_putchar(message);
     57c:	86 2f       	mov	r24, r22
     57e:	90 e2       	ldi	r25, 0x20	; 32
     580:	e9 9f       	mul	r30, r25
     582:	80 0d       	add	r24, r0
     584:	11 24       	eor	r1, r1
     586:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <uart0_putchar>
		delay(200);
     58a:	88 ec       	ldi	r24, 0xC8	; 200
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	0e 94 62 09 	call	0x12c4	; 0x12c4 <delay>
		finishedSuccessfull = 1;
     592:	81 e0       	ldi	r24, 0x01	; 1
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	08 95       	ret
int sendSegment(int recognizedLine, int direction, int leftOdometry, int rightOdometry){
	int averageOdometry = ((leftOdometry + rightOdometry) / 27) / 2;
	// 128 is address of NIBOBrody, function to minimize measured length to a more appropriate length for sending.
	int byte = 128 + (64 * recognizedLine) + (32 * direction) + averageOdometry;
	unsigned char message = byte & 255;
	int finishedSuccessfull = 0;
     598:	80 e0       	ldi	r24, 0x00	; 0
     59a:	90 e0       	ldi	r25, 0x00	; 0
		uart0_putchar(message);
		delay(200);
		finishedSuccessfull = 1;
	}
	return finishedSuccessfull;
}
     59c:	08 95       	ret

0000059e <sendData>:

/**
 * This method capsulates gathering co-processor data and sending to NIBOBrody by using XBee communication.
 * @return if sending was successful this returns 1.
 */
int sendData(){
     59e:	ef 92       	push	r14
     5a0:	ff 92       	push	r15
     5a2:	0f 93       	push	r16
     5a4:	1f 93       	push	r17
     5a6:	cf 93       	push	r28
     5a8:	df 93       	push	r29
	int successful = 0;
	gatherCoproData();
     5aa:	0e 94 9c 02 	call	0x538	; 0x538 <gatherCoproData>
	successful = sendSegment(getRecognizedBlackLine(), getTurnDirection(), coproTicksLeft, coproTicksRight);
     5ae:	e0 90 bc 04 	lds	r14, 0x04BC
     5b2:	f0 90 bd 04 	lds	r15, 0x04BD
     5b6:	00 91 b8 04 	lds	r16, 0x04B8
     5ba:	10 91 b9 04 	lds	r17, 0x04B9
     5be:	0e 94 df 03 	call	0x7be	; 0x7be <getTurnDirection>
     5c2:	ec 01       	movw	r28, r24
     5c4:	0e 94 da 03 	call	0x7b4	; 0x7b4 <getRecognizedBlackLine>
     5c8:	97 01       	movw	r18, r14
     5ca:	a8 01       	movw	r20, r16
     5cc:	be 01       	movw	r22, r28
     5ce:	0e 94 ad 02 	call	0x55a	; 0x55a <sendSegment>
     5d2:	ec 01       	movw	r28, r24
	copro_resetOdometry(0, 0);
     5d4:	60 e0       	ldi	r22, 0x00	; 0
     5d6:	70 e0       	ldi	r23, 0x00	; 0
     5d8:	80 e0       	ldi	r24, 0x00	; 0
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	0e 94 18 11 	call	0x2230	; 0x2230 <copro_resetOdometry>

	return successful;
}
     5e0:	ce 01       	movw	r24, r28
     5e2:	df 91       	pop	r29
     5e4:	cf 91       	pop	r28
     5e6:	1f 91       	pop	r17
     5e8:	0f 91       	pop	r16
     5ea:	ff 90       	pop	r15
     5ec:	ef 90       	pop	r14
     5ee:	08 95       	ret

000005f0 <main>:
 * This is the main part of the program NIBOJones. It contains the state machine and controll simple mechanics of the NIBO
 * like switching on LEDs.
 * @return
 */
int main() {
	machine_State = WAITING;
     5f0:	86 e0       	ldi	r24, 0x06	; 6
     5f2:	80 93 ba 04 	sts	0x04BA, r24
	measure_State = FINISHED;
     5f6:	10 92 bb 04 	sts	0x04BB, r1
	run_direction = UNKNOWN;
     5fa:	82 e0       	ldi	r24, 0x02	; 2
     5fc:	80 93 be 04 	sts	0x04BE, r24
	int isInitialized = 0;
	int last_machineState = FINISHING_RUN;

	sei();
     600:	78 94       	sei
	bot_init();
     602:	0e 94 ff 14 	call	0x29fe	; 0x29fe <bot_init>
	spi_init();
     606:	0e 94 89 09 	call	0x1312	; 0x1312 <spi_init>
	leds_init();
     60a:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <leds_init>

	initUART0();
     60e:	0e 94 96 02 	call	0x52c	; 0x52c <initUART0>

	display_init();
     612:	0e 94 04 09 	call	0x1208	; 0x1208 <display_init>
	gfx_init();
     616:	0e 94 23 0b 	call	0x1646	; 0x1646 <gfx_init>

	copro_ir_startMeasure();
     61a:	0e 94 52 11 	call	0x22a4	; 0x22a4 <copro_ir_startMeasure>
	floor_init();
     61e:	0e 94 de 14 	call	0x29bc	; 0x29bc <floor_init>
int main() {
	machine_State = WAITING;
	measure_State = FINISHED;
	run_direction = UNKNOWN;
	int isInitialized = 0;
	int last_machineState = FINISHING_RUN;
     622:	c7 e0       	ldi	r28, 0x07	; 7
     624:	d0 e0       	ldi	r29, 0x00	; 0
 */
int main() {
	machine_State = WAITING;
	measure_State = FINISHED;
	run_direction = UNKNOWN;
	int isInitialized = 0;
     626:	00 e0       	ldi	r16, 0x00	; 0
     628:	10 e0       	ldi	r17, 0x00	; 0
			break;
		case WAITING:
			copro_stop();
			if (s3_was_pressed()) {
				if(isInitialized == 1){
					machine_State = RUNNING_FORWARD;
     62a:	84 e0       	ldi	r24, 0x04	; 4
     62c:	f8 2e       	mov	r15, r24
			while(1){
				if (s3_was_pressed()){
					break;
				}
			}
			machine_State = WAITING;
     62e:	96 e0       	ldi	r25, 0x06	; 6
     630:	e9 2e       	mov	r14, r25
			break;
		case SENDING_DATA:
			sendingResult = sendData();
			if(sendingResult == 1){
				if(measure_State == FINISHED){
					machine_State = FINISHING_RUN;
     632:	27 e0       	ldi	r18, 0x07	; 7
     634:	d2 2e       	mov	r13, r18
	copro_ir_startMeasure();
	floor_init();
	int sendingResult;
	// machine state holder
	while (1 == 1) {
		switch (machine_State) {
     636:	80 91 ba 04 	lds	r24, 0x04BA
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	88 30       	cpi	r24, 0x08	; 8
     63e:	91 05       	cpc	r25, r1
     640:	08 f0       	brcs	.+2      	; 0x644 <main+0x54>
     642:	84 c0       	rjmp	.+264    	; 0x74c <main+0x15c>
     644:	fc 01       	movw	r30, r24
     646:	e2 5b       	subi	r30, 0xB2	; 178
     648:	ff 4f       	sbci	r31, 0xFF	; 255
     64a:	0c 94 3a 1a 	jmp	0x3474	; 0x3474 <__tablejump2__>
		case INITIALIZATION:
			init_protocol();
     64e:	0e 94 b9 04 	call	0x972	; 0x972 <init_protocol>
     652:	75 c0       	rjmp	.+234    	; 0x73e <main+0x14e>
			machine_State = RUNNING_FORWARD;
			break;
		case RUNNING_FORWARD:
			runForward_protocol();
     654:	0e 94 76 07 	call	0xeec	; 0xeec <runForward_protocol>
			break;
     658:	79 c0       	rjmp	.+242    	; 0x74c <main+0x15c>
		case TRACK_CORRECTION:
			trackCorrection_protocol();
     65a:	0e 94 58 06 	call	0xcb0	; 0xcb0 <trackCorrection_protocol>
			break;
     65e:	76 c0       	rjmp	.+236    	; 0x74c <main+0x15c>
		case TURNING_INSIDE:
			leds_set_status(LEDS_OFF, 4);
     660:	64 e0       	ldi	r22, 0x04	; 4
     662:	80 e0       	ldi	r24, 0x00	; 0
     664:	0e 94 13 15 	call	0x2a26	; 0x2a26 <leds_set_status>
			leds_set_status(LEDS_OFF, 5);
     668:	65 e0       	ldi	r22, 0x05	; 5
     66a:	80 e0       	ldi	r24, 0x00	; 0
     66c:	0e 94 13 15 	call	0x2a26	; 0x2a26 <leds_set_status>
			turnInside_protocol();
     670:	0e 94 43 06 	call	0xc86	; 0xc86 <turnInside_protocol>
     674:	16 c0       	rjmp	.+44     	; 0x6a2 <main+0xb2>
			}else{
				machine_State = RUNNING_FORWARD;
			}
			break;
		case TURNING_OUTSIDE:
			leds_set_status(LEDS_OFF, 4);
     676:	64 e0       	ldi	r22, 0x04	; 4
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	0e 94 13 15 	call	0x2a26	; 0x2a26 <leds_set_status>
			leds_set_status(LEDS_OFF, 5);
     67e:	65 e0       	ldi	r22, 0x05	; 5
     680:	80 e0       	ldi	r24, 0x00	; 0
     682:	0e 94 13 15 	call	0x2a26	; 0x2a26 <leds_set_status>
			turnOutside_protocol();
     686:	0e 94 4b 06 	call	0xc96	; 0xc96 <turnOutside_protocol>
			machine_State = RUNNING_FORWARD;
     68a:	f0 92 ba 04 	sts	0x04BA, r15
			copro_setSpeed(10, 10);
     68e:	6a e0       	ldi	r22, 0x0A	; 10
     690:	70 e0       	ldi	r23, 0x00	; 0
     692:	8a e0       	ldi	r24, 0x0A	; 10
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	0e 94 bc 10 	call	0x2178	; 0x2178 <copro_setSpeed>
			delay(2000);
     69a:	80 ed       	ldi	r24, 0xD0	; 208
     69c:	97 e0       	ldi	r25, 0x07	; 7
     69e:	0e 94 62 09 	call	0x12c4	; 0x12c4 <delay>
			if(measure_State == STARTED){
     6a2:	80 91 bb 04 	lds	r24, 0x04BB
     6a6:	81 30       	cpi	r24, 0x01	; 1
     6a8:	09 f0       	breq	.+2      	; 0x6ac <main+0xbc>
     6aa:	49 c0       	rjmp	.+146    	; 0x73e <main+0x14e>
				machine_State = SENDING_DATA;
     6ac:	85 e0       	ldi	r24, 0x05	; 5
     6ae:	80 93 ba 04 	sts	0x04BA, r24
     6b2:	4c c0       	rjmp	.+152    	; 0x74c <main+0x15c>
			}else{
				machine_State = RUNNING_FORWARD;
			}
			break;
		case SENDING_DATA:
			sendingResult = sendData();
     6b4:	0e 94 cf 02 	call	0x59e	; 0x59e <sendData>
			if(sendingResult == 1){
     6b8:	01 97       	sbiw	r24, 0x01	; 1
     6ba:	61 f4       	brne	.+24     	; 0x6d4 <main+0xe4>
				if(measure_State == FINISHED){
     6bc:	80 91 bb 04 	lds	r24, 0x04BB
     6c0:	81 11       	cpse	r24, r1
     6c2:	03 c0       	rjmp	.+6      	; 0x6ca <main+0xda>
					machine_State = FINISHING_RUN;
     6c4:	d0 92 ba 04 	sts	0x04BA, r13
     6c8:	1d c0       	rjmp	.+58     	; 0x704 <main+0x114>
				}else if(sendingResult == 1 && measure_State == STARTED){
     6ca:	81 30       	cpi	r24, 0x01	; 1
     6cc:	d9 f4       	brne	.+54     	; 0x704 <main+0x114>
					machine_State = RUNNING_FORWARD;
     6ce:	f0 92 ba 04 	sts	0x04BA, r15
     6d2:	18 c0       	rjmp	.+48     	; 0x704 <main+0x114>
				}
			} else {
				machine_State = WAITING;
     6d4:	e0 92 ba 04 	sts	0x04BA, r14
				measure_State = FINISHED;
     6d8:	10 92 bb 04 	sts	0x04BB, r1
				printDebug("Connection failed.");
     6dc:	8b ef       	ldi	r24, 0xFB	; 251
     6de:	93 e0       	ldi	r25, 0x03	; 3
     6e0:	0e 94 c8 01 	call	0x390	; 0x390 <printDebug>
				delay(1000);
     6e4:	88 ee       	ldi	r24, 0xE8	; 232
     6e6:	93 e0       	ldi	r25, 0x03	; 3
     6e8:	0e 94 62 09 	call	0x12c4	; 0x12c4 <delay>
				cleanDebug(20);
     6ec:	84 e1       	ldi	r24, 0x14	; 20
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	0e 94 8a 01 	call	0x314	; 0x314 <cleanDebug>
				printDebug("Aborting..");
     6f4:	8e e0       	ldi	r24, 0x0E	; 14
     6f6:	94 e0       	ldi	r25, 0x04	; 4
     6f8:	0e 94 c8 01 	call	0x390	; 0x390 <printDebug>
				delay(100);
     6fc:	84 e6       	ldi	r24, 0x64	; 100
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	0e 94 62 09 	call	0x12c4	; 0x12c4 <delay>
			}
			setRecognizedBlackLine(0);
     704:	80 e0       	ldi	r24, 0x00	; 0
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	0e 94 d5 03 	call	0x7aa	; 0x7aa <setRecognizedBlackLine>
			break;
     70c:	1f c0       	rjmp	.+62     	; 0x74c <main+0x15c>
		case FINISHING_RUN:
			copro_stop();
     70e:	0e 94 a0 10 	call	0x2140	; 0x2140 <copro_stop>
			finishRun_protocol(); //Umriss anzeigen
     712:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <finishRun_protocol>
			printDebug("Press s3 for continue.");
     716:	89 e1       	ldi	r24, 0x19	; 25
     718:	94 e0       	ldi	r25, 0x04	; 4
     71a:	0e 94 c8 01 	call	0x390	; 0x390 <printDebug>
			while(1){
				if (s3_was_pressed()){
     71e:	0e 94 b2 03 	call	0x764	; 0x764 <s3_was_pressed>
     722:	89 2b       	or	r24, r25
     724:	e1 f3       	breq	.-8      	; 0x71e <main+0x12e>
					break;
				}
			}
			machine_State = WAITING;
     726:	e0 92 ba 04 	sts	0x04BA, r14
			break;
     72a:	10 c0       	rjmp	.+32     	; 0x74c <main+0x15c>
		case WAITING:
			copro_stop();
     72c:	0e 94 a0 10 	call	0x2140	; 0x2140 <copro_stop>
			if (s3_was_pressed()) {
     730:	0e 94 b2 03 	call	0x764	; 0x764 <s3_was_pressed>
     734:	89 2b       	or	r24, r25
     736:	51 f0       	breq	.+20     	; 0x74c <main+0x15c>
				if(isInitialized == 1){
     738:	01 30       	cpi	r16, 0x01	; 1
     73a:	11 05       	cpc	r17, r1
     73c:	19 f4       	brne	.+6      	; 0x744 <main+0x154>
					machine_State = RUNNING_FORWARD;
     73e:	f0 92 ba 04 	sts	0x04BA, r15
     742:	04 c0       	rjmp	.+8      	; 0x74c <main+0x15c>
				}else{
					machine_State = INITIALIZATION;
     744:	10 92 ba 04 	sts	0x04BA, r1
					isInitialized = 1;
     748:	01 e0       	ldi	r16, 0x01	; 1
     74a:	10 e0       	ldi	r17, 0x00	; 0
				}
			}
			break;
		}

		if (last_machineState != machine_State) {
     74c:	80 91 ba 04 	lds	r24, 0x04BA
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	c8 17       	cp	r28, r24
     754:	d9 07       	cpc	r29, r25
     756:	11 f0       	breq	.+4      	; 0x75c <main+0x16c>
			printMachineState(machine_State);
     758:	0e 94 24 02 	call	0x448	; 0x448 <printMachineState>
		}

		last_machineState = machine_State;
     75c:	c0 91 ba 04 	lds	r28, 0x04BA
     760:	d0 e0       	ldi	r29, 0x00	; 0
	}
     762:	69 cf       	rjmp	.-302    	; 0x636 <main+0x46>

00000764 <s3_was_pressed>:
	 * ist durch die Header-Datei iodefs.h als IO_INPUT_1 definiert.
	 *
	 * Wenn der Schalter gedrueckt ist, wird 0 zurueckgeliefert
	 */
	// Schalter ist gedrueckt
	if (!get_input_bit(IO_INPUT_1)) {
     764:	84 99       	sbic	0x10, 4	; 16
     766:	0e c0       	rjmp	.+28     	; 0x784 <s3_was_pressed+0x20>
		 * schwankt. Das nennt man Prellen oder englisch bounce.
		 * Daher wird der Eingang entprellt (debounce), indem kurz
		 * gewartet wird und erneut ueberprueft wird, ob der Pegel noch
		 * der Erwartung entspricht
		 */
		delay(15);
     768:	8f e0       	ldi	r24, 0x0F	; 15
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	0e 94 62 09 	call	0x12c4	; 0x12c4 <delay>

		// Wenn der Schalter noch gedrueckt ist...
		while (!get_input_bit(IO_INPUT_1)) {
     770:	84 9b       	sbis	0x10, 4	; 16
     772:	fe cf       	rjmp	.-4      	; 0x770 <s3_was_pressed+0xc>
			 * Die Schleife wird verlassen, wenn der Schalter sich wieder laesst
			 */
		}
		// Schalter losgelassen
		// zwecks Entprellen warten
		delay(15);
     774:	8f e0       	ldi	r24, 0x0F	; 15
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	0e 94 62 09 	call	0x12c4	; 0x12c4 <delay>

		// Wert bestaetigen
		if (get_input_bit(IO_INPUT_1))
     77c:	80 b3       	in	r24, 0x10	; 16
			// Der Schalter wurde jetzt ordnungsgemae\3 gedrueckt, daher positive Rueckgabe
			result = 1;
     77e:	82 95       	swap	r24
     780:	81 70       	andi	r24, 0x01	; 1
     782:	01 c0       	rjmp	.+2      	; 0x786 <s3_was_pressed+0x22>
	} else {
		// Der Schalter wurde nicht gedrueckt
		result = 0;
     784:	80 e0       	ldi	r24, 0x00	; 0
     786:	90 e0       	ldi	r25, 0x00	; 0
	}

	// Rueckgabe
	return result;
}
     788:	08 95       	ret

0000078a <s3_is_pressed>:
int s3_is_pressed() {

	int result = 0;

	// s3 pressed down
	if (!get_input_bit(IO_INPUT_1)) {
     78a:	84 99       	sbic	0x10, 4	; 16
     78c:	0b c0       	rjmp	.+22     	; 0x7a4 <s3_is_pressed+0x1a>
		// debounce 20ms
		delay(20);
     78e:	84 e1       	ldi	r24, 0x14	; 20
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	0e 94 62 09 	call	0x12c4	; 0x12c4 <delay>
		if (!get_input_bit(IO_INPUT_1)) {
     796:	80 b3       	in	r24, 0x10	; 16
     798:	82 95       	swap	r24
     79a:	8f 70       	andi	r24, 0x0F	; 15
     79c:	91 e0       	ldi	r25, 0x01	; 1
     79e:	89 27       	eor	r24, r25
			result = 1;
     7a0:	81 70       	andi	r24, 0x01	; 1
     7a2:	01 c0       	rjmp	.+2      	; 0x7a6 <s3_is_pressed+0x1c>
		}
	} else {
		result = 0;
     7a4:	80 e0       	ldi	r24, 0x00	; 0
     7a6:	90 e0       	ldi	r25, 0x00	; 0
	}

	return result;
}
     7a8:	08 95       	ret

000007aa <setRecognizedBlackLine>:
 * Setter for acccess from main file. Sets whether a
 * black line on the ground was recognized.
 * @param reconized
 **/
void setRecognizedBlackLine(int reconized) {
	reconizedBlackLine_send = reconized;
     7aa:	90 93 ad 04 	sts	0x04AD, r25
     7ae:	80 93 ac 04 	sts	0x04AC, r24
     7b2:	08 95       	ret

000007b4 <getRecognizedBlackLine>:
 * Getter for access from main file. Returns whether a black line on the floor was recognized.
 * @return value whether a black line was recognized
 **/
int getRecognizedBlackLine() {
	return reconizedBlackLine_send;
}
     7b4:	80 91 ac 04 	lds	r24, 0x04AC
     7b8:	90 91 ad 04 	lds	r25, 0x04AD
     7bc:	08 95       	ret

000007be <getTurnDirection>:
 * Getter for access from main file. Returns the last turn direction.
 * @return last turn direction (0 = left, 1 = right)
 **/
int getTurnDirection() {
	return turnDirection_send;
}
     7be:	80 91 aa 04 	lds	r24, 0x04AA
     7c2:	90 91 ab 04 	lds	r25, 0x04AB
     7c6:	08 95       	ret

000007c8 <setStartValues>:
 * @param columns numbers columns the outline pictures has (width)
 * @param rows numbers columns the outline pictures has (height)
 * @param coordx x coordinate of the start point for painting
 * @param coordy y coordinate of the start point for painting
 **/
void setStartValues(int columns, int rows, int coordx, int coordy) {
     7c8:	cf 92       	push	r12
     7ca:	df 92       	push	r13
     7cc:	ef 92       	push	r14
     7ce:	ff 92       	push	r15
     7d0:	0f 93       	push	r16
     7d2:	1f 93       	push	r17
     7d4:	cf 93       	push	r28
     7d6:	df 93       	push	r29
     7d8:	ec 01       	movw	r28, r24
     7da:	7b 01       	movw	r14, r22
     7dc:	6a 01       	movw	r12, r20
	//by using 50 the outline will be placed more on the upper boarder of display.
	//In this way, below the outline is place for a debug outprint with further informations
	segmentWidth = 50 / columns;
     7de:	02 e3       	ldi	r16, 0x32	; 50
     7e0:	10 e0       	ldi	r17, 0x00	; 0
     7e2:	c8 01       	movw	r24, r16
     7e4:	be 01       	movw	r22, r28
     7e6:	0e 94 04 1a 	call	0x3408	; 0x3408 <__divmodhi4>
     7ea:	fb 01       	movw	r30, r22
     7ec:	70 93 c0 04 	sts	0x04C0, r23
     7f0:	60 93 bf 04 	sts	0x04BF, r22
	segmentHeight = 50 / rows;
     7f4:	c8 01       	movw	r24, r16
     7f6:	b7 01       	movw	r22, r14
     7f8:	0e 94 04 1a 	call	0x3408	; 0x3408 <__divmodhi4>
     7fc:	70 93 c5 04 	sts	0x04C5, r23
     800:	60 93 c4 04 	sts	0x04C4, r22
	//startx coordinate will be manipulated so the whole outline is placed in the middle of the display.
	int startx = (segmentWidth * coordx) + ((128 - segmentWidth * columns) / 2);
	int starty = (segmentHeight * coordy) + 5;
     804:	62 9f       	mul	r22, r18
     806:	d0 01       	movw	r26, r0
     808:	63 9f       	mul	r22, r19
     80a:	b0 0d       	add	r27, r0
     80c:	72 9f       	mul	r23, r18
     80e:	b0 0d       	add	r27, r0
     810:	11 24       	eor	r1, r1
     812:	15 96       	adiw	r26, 0x05	; 5
	//by using 50 the outline will be placed more on the upper boarder of display.
	//In this way, below the outline is place for a debug outprint with further informations
	segmentWidth = 50 / columns;
	segmentHeight = 50 / rows;
	//startx coordinate will be manipulated so the whole outline is placed in the middle of the display.
	int startx = (segmentWidth * coordx) + ((128 - segmentWidth * columns) / 2);
     814:	ec 9d       	mul	r30, r12
     816:	c0 01       	movw	r24, r0
     818:	ed 9d       	mul	r30, r13
     81a:	90 0d       	add	r25, r0
     81c:	fc 9d       	mul	r31, r12
     81e:	90 0d       	add	r25, r0
     820:	11 24       	eor	r1, r1
     822:	ec 9f       	mul	r30, r28
     824:	a0 01       	movw	r20, r0
     826:	ed 9f       	mul	r30, r29
     828:	50 0d       	add	r21, r0
     82a:	fc 9f       	mul	r31, r28
     82c:	50 0d       	add	r21, r0
     82e:	11 24       	eor	r1, r1
     830:	20 e8       	ldi	r18, 0x80	; 128
     832:	30 e0       	ldi	r19, 0x00	; 0
     834:	24 1b       	sub	r18, r20
     836:	35 0b       	sbc	r19, r21
     838:	37 ff       	sbrs	r19, 7
     83a:	02 c0       	rjmp	.+4      	; 0x840 <setStartValues+0x78>
     83c:	2f 5f       	subi	r18, 0xFF	; 255
     83e:	3f 4f       	sbci	r19, 0xFF	; 255
     840:	35 95       	asr	r19
     842:	27 95       	ror	r18
	int starty = (segmentHeight * coordy) + 5;
	setStartPointForOutline(startx, starty);
     844:	bd 01       	movw	r22, r26
     846:	82 0f       	add	r24, r18
     848:	93 1f       	adc	r25, r19
}
     84a:	df 91       	pop	r29
     84c:	cf 91       	pop	r28
     84e:	1f 91       	pop	r17
     850:	0f 91       	pop	r16
     852:	ff 90       	pop	r15
     854:	ef 90       	pop	r14
     856:	df 90       	pop	r13
     858:	cf 90       	pop	r12
	segmentWidth = 50 / columns;
	segmentHeight = 50 / rows;
	//startx coordinate will be manipulated so the whole outline is placed in the middle of the display.
	int startx = (segmentWidth * coordx) + ((128 - segmentWidth * columns) / 2);
	int starty = (segmentHeight * coordy) + 5;
	setStartPointForOutline(startx, starty);
     85a:	0c 94 01 01 	jmp	0x202	; 0x202 <setStartPointForOutline>

0000085e <clearBuffer>:
/**
 * Sometimes the buffer of XBee communication will be filled randomly.
 * This will be wiped to provide a better receiving from NIBOBrody.
 **/
void clearBuffer(){
	while(!uart0_rxempty()){
     85e:	90 91 d9 04 	lds	r25, 0x04D9
     862:	80 91 da 04 	lds	r24, 0x04DA
     866:	98 17       	cp	r25, r24
     868:	19 f0       	breq	.+6      	; 0x870 <clearBuffer+0x12>
		unsigned char received = uart0_getchar();
     86a:	0e 94 ca 07 	call	0xf94	; 0xf94 <uart0_getchar>
     86e:	f7 cf       	rjmp	.-18     	; 0x85e <clearBuffer>
	}
}
     870:	08 95       	ret

00000872 <receiveStartValues>:
 * The message which contains parts of the start values are slightly different
 * and need a own function. Because sometimes xbee messages are failing,
 * this function listens for several seconds.
 * @return returns whether there was received a message in time.
 **/
int receiveStartValues() {
     872:	1f 93       	push	r17
     874:	cf 93       	push	r28
     876:	df 93       	push	r29
     878:	c4 e1       	ldi	r28, 0x14	; 20
     87a:	d0 e0       	ldi	r29, 0x00	; 0
	int byte;
	unsigned char received;
	for (int i = 0; i < 20; i++) {
		if (!uart0_rxempty()) {
     87c:	90 91 d9 04 	lds	r25, 0x04D9
     880:	80 91 da 04 	lds	r24, 0x04DA
     884:	98 17       	cp	r25, r24
     886:	a1 f0       	breq	.+40     	; 0x8b0 <receiveStartValues+0x3e>
			received = uart0_getchar();
     888:	0e 94 ca 07 	call	0xf94	; 0xf94 <uart0_getchar>
     88c:	18 2f       	mov	r17, r24
			byte = received;
			if ((byte & 128) == 128) {
     88e:	87 ff       	sbrs	r24, 7
     890:	0f c0       	rjmp	.+30     	; 0x8b0 <receiveStartValues+0x3e>
				//sending acknowledgment
				unsigned char answer = byte & 255;
				if (!uart0_txfull()) {
     892:	80 91 db 04 	lds	r24, 0x04DB
     896:	88 30       	cpi	r24, 0x08	; 8
     898:	39 f0       	breq	.+14     	; 0x8a8 <receiveStartValues+0x36>
					uart0_putchar(answer);
     89a:	81 2f       	mov	r24, r17
     89c:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <uart0_putchar>
					delay(200);
     8a0:	88 ec       	ldi	r24, 0xC8	; 200
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	0e 94 62 09 	call	0x12c4	; 0x12c4 <delay>
				}
				return byte & 127;
     8a8:	1f 77       	andi	r17, 0x7F	; 127
     8aa:	81 2f       	mov	r24, r17
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	09 c0       	rjmp	.+18     	; 0x8c2 <receiveStartValues+0x50>
			}
		}
		delay(200);
     8b0:	88 ec       	ldi	r24, 0xC8	; 200
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	0e 94 62 09 	call	0x12c4	; 0x12c4 <delay>
     8b8:	21 97       	sbiw	r28, 0x01	; 1
 * @return returns whether there was received a message in time.
 **/
int receiveStartValues() {
	int byte;
	unsigned char received;
	for (int i = 0; i < 20; i++) {
     8ba:	20 97       	sbiw	r28, 0x00	; 0
     8bc:	f9 f6       	brne	.-66     	; 0x87c <receiveStartValues+0xa>
			}
		}
		delay(200);
	}

	return -1;
     8be:	8f ef       	ldi	r24, 0xFF	; 255
     8c0:	9f ef       	ldi	r25, 0xFF	; 255
}
     8c2:	df 91       	pop	r29
     8c4:	cf 91       	pop	r28
     8c6:	1f 91       	pop	r17
     8c8:	08 95       	ret

000008ca <receiveOutline>:
 * The message which contains parts of the outline figur are slightly different
 * and need a own function. Because sometimes xbee messages are failing,
 * this function listens for several seconds until closing.
 * @return returns whether there was received a message in time.
 **/
int receiveOutline() {
     8ca:	0f 93       	push	r16
     8cc:	1f 93       	push	r17
     8ce:	cf 93       	push	r28
     8d0:	df 93       	push	r29
     8d2:	0a e0       	ldi	r16, 0x0A	; 10
     8d4:	10 e0       	ldi	r17, 0x00	; 0
	int byte;

	unsigned char received;
	for (int i = 0; i < 10; i++) {
		if (!uart0_rxempty()) {
     8d6:	90 91 d9 04 	lds	r25, 0x04D9
     8da:	80 91 da 04 	lds	r24, 0x04DA
     8de:	98 17       	cp	r25, r24
     8e0:	89 f0       	breq	.+34     	; 0x904 <receiveOutline+0x3a>
			received = uart0_getchar();
     8e2:	0e 94 ca 07 	call	0xf94	; 0xf94 <uart0_getchar>
			byte = received;
     8e6:	c8 2f       	mov	r28, r24
     8e8:	d0 e0       	ldi	r29, 0x00	; 0
			if ((byte & 128) == 128) {
     8ea:	87 ff       	sbrs	r24, 7
     8ec:	0b c0       	rjmp	.+22     	; 0x904 <receiveOutline+0x3a>
				unsigned char answer = byte & 255;
				if (!uart0_txfull()) {
     8ee:	90 91 db 04 	lds	r25, 0x04DB
     8f2:	98 30       	cpi	r25, 0x08	; 8
     8f4:	99 f0       	breq	.+38     	; 0x91c <receiveOutline+0x52>
					uart0_putchar(answer);
     8f6:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <uart0_putchar>
					delay(200);
     8fa:	88 ec       	ldi	r24, 0xC8	; 200
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	0e 94 62 09 	call	0x12c4	; 0x12c4 <delay>
     902:	0c c0       	rjmp	.+24     	; 0x91c <receiveOutline+0x52>
				}
				return byte;
			}
		}
		delay(400);
     904:	80 e9       	ldi	r24, 0x90	; 144
     906:	91 e0       	ldi	r25, 0x01	; 1
     908:	0e 94 62 09 	call	0x12c4	; 0x12c4 <delay>
     90c:	01 50       	subi	r16, 0x01	; 1
     90e:	11 09       	sbc	r17, r1
 **/
int receiveOutline() {
	int byte;

	unsigned char received;
	for (int i = 0; i < 10; i++) {
     910:	01 15       	cp	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	01 f7       	brne	.-64     	; 0x8d6 <receiveOutline+0xc>
				return byte;
			}
		}
		delay(400);
	}
	return -1;
     916:	8f ef       	ldi	r24, 0xFF	; 255
     918:	9f ef       	ldi	r25, 0xFF	; 255
     91a:	01 c0       	rjmp	.+2      	; 0x91e <receiveOutline+0x54>

	unsigned char received;
	for (int i = 0; i < 10; i++) {
		if (!uart0_rxempty()) {
			received = uart0_getchar();
			byte = received;
     91c:	ce 01       	movw	r24, r28
			}
		}
		delay(400);
	}
	return -1;
}
     91e:	df 91       	pop	r29
     920:	cf 91       	pop	r28
     922:	1f 91       	pop	r17
     924:	0f 91       	pop	r16
     926:	08 95       	ret

00000928 <sendMessageToNibo>:

/**
 * This message sends a signal to NIBOShorty so it can start playing music and showing picture.
 * @param signal sets start signal (1 = start, 0 = stop)
 */
void sendMessageToNibo(int signal) {
     928:	1f 93       	push	r17
     92a:	cf 93       	push	r28
     92c:	df 93       	push	r29
     92e:	18 2f       	mov	r17, r24
	// signal indicates the start or end of the music
	// this message addresses the NIBO, so the indication bit has to be 0
	int byte = signal;
	unsigned char message = byte & 255;
	unsigned char answer;
	int i = 0;
     930:	c0 e0       	ldi	r28, 0x00	; 0
     932:	d0 e0       	ldi	r29, 0x00	; 0
	while (1) {
		if (!uart0_txfull()) {
     934:	80 91 db 04 	lds	r24, 0x04DB
     938:	88 30       	cpi	r24, 0x08	; 8
     93a:	19 f0       	breq	.+6      	; 0x942 <sendMessageToNibo+0x1a>
			uart0_putchar(message);
     93c:	81 2f       	mov	r24, r17
     93e:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <uart0_putchar>
		}
		delay(200);
     942:	88 ec       	ldi	r24, 0xC8	; 200
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	0e 94 62 09 	call	0x12c4	; 0x12c4 <delay>
		if (!uart0_rxempty()) {
     94a:	90 91 d9 04 	lds	r25, 0x04D9
     94e:	80 91 da 04 	lds	r24, 0x04DA
     952:	98 17       	cp	r25, r24
     954:	29 f0       	breq	.+10     	; 0x960 <sendMessageToNibo+0x38>
			// wait for answer
			answer = uart0_getchar();
     956:	0e 94 ca 07 	call	0xf94	; 0xf94 <uart0_getchar>
			byte = answer;
			if ((byte & 128) != 0) {
     95a:	87 fd       	sbrc	r24, 7
     95c:	eb cf       	rjmp	.-42     	; 0x934 <sendMessageToNibo+0xc>
     95e:	05 c0       	rjmp	.+10     	; 0x96a <sendMessageToNibo+0x42>
				// wrong indicator
				continue;
			}
			break;
		} else if (i == 5) {
     960:	c5 30       	cpi	r28, 0x05	; 5
     962:	d1 05       	cpc	r29, r1
     964:	11 f0       	breq	.+4      	; 0x96a <sendMessageToNibo+0x42>
			break;
		}
		i++;
     966:	21 96       	adiw	r28, 0x01	; 1
     968:	e5 cf       	rjmp	.-54     	; 0x934 <sendMessageToNibo+0xc>
	}
}
     96a:	df 91       	pop	r29
     96c:	cf 91       	pop	r28
     96e:	1f 91       	pop	r17
     970:	08 95       	ret

00000972 <init_protocol>:
/**
 * This protocol initializes NIBOJones. Its measuring distance to wall next to the nibo
 * to set distance which shall be hold to the wall by moving around. Recognizing the movement direction
 * part of this protocol too. There are two ways of moving direction, left and right run.
 */
void init_protocol() {
     972:	2f 92       	push	r2
     974:	3f 92       	push	r3
     976:	4f 92       	push	r4
     978:	5f 92       	push	r5
     97a:	6f 92       	push	r6
     97c:	7f 92       	push	r7
     97e:	8f 92       	push	r8
     980:	9f 92       	push	r9
     982:	af 92       	push	r10
     984:	bf 92       	push	r11
     986:	cf 92       	push	r12
     988:	df 92       	push	r13
     98a:	ef 92       	push	r14
     98c:	ff 92       	push	r15
     98e:	0f 93       	push	r16
     990:	1f 93       	push	r17
     992:	cf 93       	push	r28
     994:	df 93       	push	r29
	floor_init();
     996:	0e 94 de 14 	call	0x29bc	; 0x29bc <floor_init>
	copro_update();
     99a:	0e 94 04 10 	call	0x2008	; 0x2008 <copro_update>
	printDebug("Initialization...");
     99e:	80 e3       	ldi	r24, 0x30	; 48
     9a0:	94 e0       	ldi	r25, 0x04	; 4
     9a2:	0e 94 c8 01 	call	0x390	; 0x390 <printDebug>
	printMovingDirection(run_direction);
     9a6:	80 91 be 04 	lds	r24, 0x04BE
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <printMovingDirection>
     9b0:	55 e0       	ldi	r21, 0x05	; 5
     9b2:	45 2e       	mov	r4, r21
     9b4:	51 2c       	mov	r5, r1
	int averageDistance_SideLeft = 0;
	int averageDistance_SideRight = 0;
	int averageDistance_BladeLeft = 0;
	int averageDistance_BladeRight = 0;
     9b6:	c0 e0       	ldi	r28, 0x00	; 0
     9b8:	d0 e0       	ldi	r29, 0x00	; 0
	copro_update();
	printDebug("Initialization...");
	printMovingDirection(run_direction);
	int averageDistance_SideLeft = 0;
	int averageDistance_SideRight = 0;
	int averageDistance_BladeLeft = 0;
     9ba:	00 e0       	ldi	r16, 0x00	; 0
     9bc:	10 e0       	ldi	r17, 0x00	; 0
	floor_init();
	copro_update();
	printDebug("Initialization...");
	printMovingDirection(run_direction);
	int averageDistance_SideLeft = 0;
	int averageDistance_SideRight = 0;
     9be:	e1 2c       	mov	r14, r1
     9c0:	f1 2c       	mov	r15, r1
void init_protocol() {
	floor_init();
	copro_update();
	printDebug("Initialization...");
	printMovingDirection(run_direction);
	int averageDistance_SideLeft = 0;
     9c2:	61 2c       	mov	r6, r1
     9c4:	71 2c       	mov	r7, r1
	int averageDistance_SideRight = 0;
	int averageDistance_BladeLeft = 0;
	int averageDistance_BladeRight = 0;

	for (int i = 0; i < 5; i++) {
		copro_update();
     9c6:	0e 94 04 10 	call	0x2008	; 0x2008 <copro_update>
		averageDistance_SideLeft += copro_distance[4] / 256;
     9ca:	80 90 51 05 	lds	r8, 0x0551
     9ce:	91 2c       	mov	r9, r1
     9d0:	68 0c       	add	r6, r8
     9d2:	79 1c       	adc	r7, r9
		averageDistance_SideRight += copro_distance[0] / 256;
     9d4:	a0 90 49 05 	lds	r10, 0x0549
     9d8:	b1 2c       	mov	r11, r1
     9da:	ea 0c       	add	r14, r10
     9dc:	fb 1c       	adc	r15, r11
		averageDistance_BladeLeft += copro_distance[3] / 256;
     9de:	c0 90 4f 05 	lds	r12, 0x054F
     9e2:	d1 2c       	mov	r13, r1
     9e4:	0c 0d       	add	r16, r12
     9e6:	1d 1d       	adc	r17, r13
		averageDistance_BladeRight += copro_distance[1] / 256;
     9e8:	20 90 4b 05 	lds	r2, 0x054B
     9ec:	31 2c       	mov	r3, r1
     9ee:	c2 0d       	add	r28, r2
     9f0:	d3 1d       	adc	r29, r3
		delay(200);
     9f2:	88 ec       	ldi	r24, 0xC8	; 200
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	0e 94 62 09 	call	0x12c4	; 0x12c4 <delay>
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	48 1a       	sub	r4, r24
     9fe:	51 08       	sbc	r5, r1
	int averageDistance_SideLeft = 0;
	int averageDistance_SideRight = 0;
	int averageDistance_BladeLeft = 0;
	int averageDistance_BladeRight = 0;

	for (int i = 0; i < 5; i++) {
     a00:	41 14       	cp	r4, r1
     a02:	51 04       	cpc	r5, r1
     a04:	01 f7       	brne	.-64     	; 0x9c6 <init_protocol+0x54>
		averageDistance_BladeLeft += copro_distance[3] / 256;
		averageDistance_BladeRight += copro_distance[1] / 256;
		delay(200);
	}

	averageDistance_SideLeft = averageDistance_SideLeft / 5;
     a06:	25 e0       	ldi	r18, 0x05	; 5
     a08:	30 e0       	ldi	r19, 0x00	; 0
     a0a:	c3 01       	movw	r24, r6
     a0c:	b9 01       	movw	r22, r18
     a0e:	0e 94 04 1a 	call	0x3408	; 0x3408 <__divmodhi4>
     a12:	6b 01       	movw	r12, r22
	averageDistance_SideRight = averageDistance_SideRight / 5;
     a14:	c7 01       	movw	r24, r14
     a16:	b9 01       	movw	r22, r18
     a18:	0e 94 04 1a 	call	0x3408	; 0x3408 <__divmodhi4>
     a1c:	fb 01       	movw	r30, r22
	averageDistance_BladeLeft = averageDistance_BladeLeft / 5;
	averageDistance_BladeRight = averageDistance_BladeRight / 5;

	if (averageDistance_SideLeft > averageDistance_SideRight) {
     a1e:	6c 15       	cp	r22, r12
     a20:	7d 05       	cpc	r23, r13
     a22:	cc f4       	brge	.+50     	; 0xa56 <init_protocol+0xe4>
		delay(200);
	}

	averageDistance_SideLeft = averageDistance_SideLeft / 5;
	averageDistance_SideRight = averageDistance_SideRight / 5;
	averageDistance_BladeLeft = averageDistance_BladeLeft / 5;
     a24:	c8 01       	movw	r24, r16
     a26:	b9 01       	movw	r22, r18
     a28:	0e 94 04 1a 	call	0x3408	; 0x3408 <__divmodhi4>
	averageDistance_BladeRight = averageDistance_BladeRight / 5;

	if (averageDistance_SideLeft > averageDistance_SideRight) {
		run_direction = RIGHT_RUN;
     a2c:	84 e0       	ldi	r24, 0x04	; 4
     a2e:	80 93 be 04 	sts	0x04BE, r24
		SIDE_THRESHOLD_OUTSIDE_MAX = averageDistance_SideLeft;
     a32:	d0 92 b5 04 	sts	0x04B5, r13
     a36:	c0 92 b4 04 	sts	0x04B4, r12
		SIDE_THRESHOLD_OUTSIDE_MIN = averageDistance_SideLeft - 20;
     a3a:	84 e1       	ldi	r24, 0x14	; 20
     a3c:	c8 1a       	sub	r12, r24
     a3e:	d1 08       	sbc	r13, r1
     a40:	d0 92 b3 04 	sts	0x04B3, r13
     a44:	c0 92 b2 04 	sts	0x04B2, r12
		BLADE_THRESHOLD_OUTSIDE_MAX = averageDistance_BladeLeft;
     a48:	70 93 b1 04 	sts	0x04B1, r23
     a4c:	60 93 b0 04 	sts	0x04B0, r22
		BLADE_THRESHOLD_OUTSIDE_MIN = averageDistance_BladeLeft - 20;
     a50:	64 51       	subi	r22, 0x14	; 20
     a52:	71 09       	sbc	r23, r1
     a54:	19 c0       	rjmp	.+50     	; 0xa88 <init_protocol+0x116>
	}

	averageDistance_SideLeft = averageDistance_SideLeft / 5;
	averageDistance_SideRight = averageDistance_SideRight / 5;
	averageDistance_BladeLeft = averageDistance_BladeLeft / 5;
	averageDistance_BladeRight = averageDistance_BladeRight / 5;
     a56:	ce 01       	movw	r24, r28
     a58:	b9 01       	movw	r22, r18
     a5a:	0e 94 04 1a 	call	0x3408	; 0x3408 <__divmodhi4>
		SIDE_THRESHOLD_OUTSIDE_MAX = averageDistance_SideLeft;
		SIDE_THRESHOLD_OUTSIDE_MIN = averageDistance_SideLeft - 20;
		BLADE_THRESHOLD_OUTSIDE_MAX = averageDistance_BladeLeft;
		BLADE_THRESHOLD_OUTSIDE_MIN = averageDistance_BladeLeft - 20;
	} else {
		run_direction = LEFT_RUN;
     a5e:	10 92 be 04 	sts	0x04BE, r1
		SIDE_THRESHOLD_OUTSIDE_MAX = averageDistance_SideRight + 10;
     a62:	cf 01       	movw	r24, r30
     a64:	0a 96       	adiw	r24, 0x0a	; 10
     a66:	90 93 b5 04 	sts	0x04B5, r25
     a6a:	80 93 b4 04 	sts	0x04B4, r24
		SIDE_THRESHOLD_OUTSIDE_MIN = averageDistance_SideRight - 10;
     a6e:	3a 97       	sbiw	r30, 0x0a	; 10
     a70:	f0 93 b3 04 	sts	0x04B3, r31
     a74:	e0 93 b2 04 	sts	0x04B2, r30
		BLADE_THRESHOLD_OUTSIDE_MAX = averageDistance_BladeRight + 10;
     a78:	cb 01       	movw	r24, r22
     a7a:	0a 96       	adiw	r24, 0x0a	; 10
     a7c:	90 93 b1 04 	sts	0x04B1, r25
     a80:	80 93 b0 04 	sts	0x04B0, r24
		BLADE_THRESHOLD_OUTSIDE_MIN = averageDistance_BladeRight - 10;
     a84:	6a 50       	subi	r22, 0x0A	; 10
     a86:	71 09       	sbc	r23, r1
     a88:	70 93 af 04 	sts	0x04AF, r23
     a8c:	60 93 ae 04 	sts	0x04AE, r22
	}

	FRONT_THRESHOLD = SIDE_THRESHOLD_OUTSIDE_MAX;
     a90:	80 91 b4 04 	lds	r24, 0x04B4
     a94:	90 91 b5 04 	lds	r25, 0x04B5

	if (SIDE_THRESHOLD_OUTSIDE_MAX > 250) {
     a98:	8b 3f       	cpi	r24, 0xFB	; 251
     a9a:	91 05       	cpc	r25, r1
     a9c:	14 f0       	brlt	.+4      	; 0xaa2 <init_protocol+0x130>
		FRONT_THRESHOLD = FRONT_THRESHOLD - 30;
     a9e:	4e 97       	sbiw	r24, 0x1e	; 30
     aa0:	04 c0       	rjmp	.+8      	; 0xaaa <init_protocol+0x138>
	} else if (SIDE_THRESHOLD_OUTSIDE_MAX > 230) {
     aa2:	87 3e       	cpi	r24, 0xE7	; 231
     aa4:	91 05       	cpc	r25, r1
     aa6:	0c f0       	brlt	.+2      	; 0xaaa <init_protocol+0x138>
		FRONT_THRESHOLD = FRONT_THRESHOLD - 10;
     aa8:	0a 97       	sbiw	r24, 0x0a	; 10
     aaa:	90 93 b7 04 	sts	0x04B7, r25
     aae:	80 93 b6 04 	sts	0x04B6, r24
	}

	if (run_direction == LEFT_RUN) {
     ab2:	80 91 be 04 	lds	r24, 0x04BE
     ab6:	81 11       	cpse	r24, r1
     ab8:	0f c0       	rjmp	.+30     	; 0xad8 <init_protocol+0x166>
		sensorIDSide = 0;
     aba:	10 92 c7 04 	sts	0x04C7, r1
     abe:	10 92 c6 04 	sts	0x04C6, r1
		sensorIDBlade = 1;
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	90 93 c3 04 	sts	0x04C3, r25
     aca:	80 93 c2 04 	sts	0x04C2, r24
		turnDirection_send = 0;
     ace:	10 92 ab 04 	sts	0x04AB, r1
     ad2:	10 92 aa 04 	sts	0x04AA, r1
     ad6:	12 c0       	rjmp	.+36     	; 0xafc <init_protocol+0x18a>
	} else {
		sensorIDSide = 4;
     ad8:	84 e0       	ldi	r24, 0x04	; 4
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	90 93 c7 04 	sts	0x04C7, r25
     ae0:	80 93 c6 04 	sts	0x04C6, r24
		sensorIDBlade = 3;
     ae4:	83 e0       	ldi	r24, 0x03	; 3
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	90 93 c3 04 	sts	0x04C3, r25
     aec:	80 93 c2 04 	sts	0x04C2, r24
		turnDirection_send = 1;
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	90 93 ab 04 	sts	0x04AB, r25
     af8:	80 93 aa 04 	sts	0x04AA, r24
	}

	cleanDebug(17);
     afc:	81 e1       	ldi	r24, 0x11	; 17
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	0e 94 8a 01 	call	0x314	; 0x314 <cleanDebug>
	printMovingDirection(run_direction);
     b04:	80 91 be 04 	lds	r24, 0x04BE
     b08:	90 e0       	ldi	r25, 0x00	; 0
}
     b0a:	df 91       	pop	r29
     b0c:	cf 91       	pop	r28
     b0e:	1f 91       	pop	r17
     b10:	0f 91       	pop	r16
     b12:	ff 90       	pop	r15
     b14:	ef 90       	pop	r14
     b16:	df 90       	pop	r13
     b18:	cf 90       	pop	r12
     b1a:	bf 90       	pop	r11
     b1c:	af 90       	pop	r10
     b1e:	9f 90       	pop	r9
     b20:	8f 90       	pop	r8
     b22:	7f 90       	pop	r7
     b24:	6f 90       	pop	r6
     b26:	5f 90       	pop	r5
     b28:	4f 90       	pop	r4
     b2a:	3f 90       	pop	r3
     b2c:	2f 90       	pop	r2
		sensorIDBlade = 3;
		turnDirection_send = 1;
	}

	cleanDebug(17);
	printMovingDirection(run_direction);
     b2e:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <printMovingDirection>

00000b32 <correctTrackToLeft>:

/**
 * Instructs the nibo to correct its track to left. This helps nibo to follow the wall.
 */
void correctTrackToLeft() {
	leds_set_status(LEDS_ORANGE, 4);
     b32:	64 e0       	ldi	r22, 0x04	; 4
     b34:	83 e0       	ldi	r24, 0x03	; 3
     b36:	0e 94 13 15 	call	0x2a26	; 0x2a26 <leds_set_status>
	leds_set_status(LEDS_OFF, 5);
     b3a:	65 e0       	ldi	r22, 0x05	; 5
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	0e 94 13 15 	call	0x2a26	; 0x2a26 <leds_set_status>
	copro_setSpeed(10, 12);
     b42:	6c e0       	ldi	r22, 0x0C	; 12
     b44:	70 e0       	ldi	r23, 0x00	; 0
     b46:	8a e0       	ldi	r24, 0x0A	; 10
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	0c 94 bc 10 	jmp	0x2178	; 0x2178 <copro_setSpeed>

00000b4e <correctTrackToRight>:

/**
 * Instructs the nibo to correct its track to right. This helps NIBO to follow the wall.
 */
void correctTrackToRight() {
	leds_set_status(LEDS_ORANGE, 5);
     b4e:	65 e0       	ldi	r22, 0x05	; 5
     b50:	83 e0       	ldi	r24, 0x03	; 3
     b52:	0e 94 13 15 	call	0x2a26	; 0x2a26 <leds_set_status>
	leds_set_status(LEDS_OFF, 4);
     b56:	64 e0       	ldi	r22, 0x04	; 4
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	0e 94 13 15 	call	0x2a26	; 0x2a26 <leds_set_status>
	copro_setSpeed(12, 10);
     b5e:	6a e0       	ldi	r22, 0x0A	; 10
     b60:	70 e0       	ldi	r23, 0x00	; 0
     b62:	8c e0       	ldi	r24, 0x0C	; 12
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	0c 94 bc 10 	jmp	0x2178	; 0x2178 <copro_setSpeed>

00000b6a <correctTrackToInside>:
 * Because there are 2 ways to move around the structure this method decides
 * in which way the track will be corrected. To inside means to the center of structure.
 * @param direction run direction in which the NIBO moves around structure
 */
void correctTrackToInside(int direction) {
	if (direction == LEFT_RUN) {
     b6a:	00 97       	sbiw	r24, 0x00	; 0
     b6c:	11 f4       	brne	.+4      	; 0xb72 <correctTrackToInside+0x8>
		correctTrackToLeft();
     b6e:	0c 94 99 05 	jmp	0xb32	; 0xb32 <correctTrackToLeft>
	} else if (direction == RIGHT_RUN) {
     b72:	04 97       	sbiw	r24, 0x04	; 4
     b74:	11 f4       	brne	.+4      	; 0xb7a <correctTrackToInside+0x10>
		correctTrackToRight();
     b76:	0c 94 a7 05 	jmp	0xb4e	; 0xb4e <correctTrackToRight>
     b7a:	08 95       	ret

00000b7c <correctTrackToOutside>:
 * Because there are 2 ways to move around the structure this method decides
 * in which way the track will be corrected. To outside means away from center of structure.
 * @param direction run direction in which the NIBO moves around structure
 */
void correctTrackToOutside(int direction) {
	if (direction == LEFT_RUN) {
     b7c:	00 97       	sbiw	r24, 0x00	; 0
     b7e:	11 f4       	brne	.+4      	; 0xb84 <correctTrackToOutside+0x8>
		correctTrackToRight();
     b80:	0c 94 a7 05 	jmp	0xb4e	; 0xb4e <correctTrackToRight>
	} else if (direction == RIGHT_RUN) {
     b84:	04 97       	sbiw	r24, 0x04	; 4
     b86:	11 f4       	brne	.+4      	; 0xb8c <correctTrackToOutside+0x10>
		correctTrackToLeft();
     b88:	0c 94 99 05 	jmp	0xb32	; 0xb32 <correctTrackToLeft>
     b8c:	08 95       	ret

00000b8e <leftTurnFree>:
 * With this method the NIBO is able to turn left at a corner as inside turn.
 * Because the NIBO is not able to perform perfect 90° turns its orientating on the corner and its wall
 * to perform its turn. Those wall and corner have to be positioned as 90° corner!
 */
void leftTurnFree() {
	turnDirection_send = 0;
     b8e:	10 92 ab 04 	sts	0x04AB, r1
     b92:	10 92 aa 04 	sts	0x04AA, r1
	leds_set_status(LEDS_ORANGE, 3);
     b96:	63 e0       	ldi	r22, 0x03	; 3
     b98:	83 e0       	ldi	r24, 0x03	; 3
     b9a:	0e 94 13 15 	call	0x2a26	; 0x2a26 <leds_set_status>
	while (1 == 1) {
		copro_update();
     b9e:	0e 94 04 10 	call	0x2008	; 0x2008 <copro_update>
		copro_setSpeed(-10, 15);
     ba2:	6f e0       	ldi	r22, 0x0F	; 15
     ba4:	70 e0       	ldi	r23, 0x00	; 0
     ba6:	86 ef       	ldi	r24, 0xF6	; 246
     ba8:	9f ef       	ldi	r25, 0xFF	; 255
     baa:	0e 94 bc 10 	call	0x2178	; 0x2178 <copro_setSpeed>
		if (copro_distance[2] / 256 < 100 && copro_distance[1] / 256 < 50) {
     bae:	80 91 4c 05 	lds	r24, 0x054C
     bb2:	90 91 4d 05 	lds	r25, 0x054D
     bb6:	81 15       	cp	r24, r1
     bb8:	94 46       	sbci	r25, 0x64	; 100
     bba:	88 f7       	brcc	.-30     	; 0xb9e <leftTurnFree+0x10>
     bbc:	80 91 4a 05 	lds	r24, 0x054A
     bc0:	90 91 4b 05 	lds	r25, 0x054B
     bc4:	81 15       	cp	r24, r1
     bc6:	92 43       	sbci	r25, 0x32	; 50
     bc8:	50 f7       	brcc	.-44     	; 0xb9e <leftTurnFree+0x10>
			copro_stop();
     bca:	0e 94 a0 10 	call	0x2140	; 0x2140 <copro_stop>
			leds_set_status(LEDS_OFF, 3);
     bce:	63 e0       	ldi	r22, 0x03	; 3
     bd0:	80 e0       	ldi	r24, 0x00	; 0
     bd2:	0c 94 13 15 	jmp	0x2a26	; 0x2a26 <leds_set_status>

00000bd6 <leftTurnForced>:
 * For outside turns the NIBOs looses contact to walls and is free in field.
 * In this situation the nibo has to perform a 90° turn of its own.
 * Use this method to perform a right turn.
 */
void leftTurnForced() {
	turnDirection_send = 0;
     bd6:	10 92 ab 04 	sts	0x04AB, r1
     bda:	10 92 aa 04 	sts	0x04AA, r1
	leds_set_status(LEDS_ORANGE, 3);
     bde:	63 e0       	ldi	r22, 0x03	; 3
     be0:	83 e0       	ldi	r24, 0x03	; 3
     be2:	0e 94 13 15 	call	0x2a26	; 0x2a26 <leds_set_status>
	copro_setTargetRel(-27, 27, 10);
     be6:	4a e0       	ldi	r20, 0x0A	; 10
     be8:	50 e0       	ldi	r21, 0x00	; 0
     bea:	6b e1       	ldi	r22, 0x1B	; 27
     bec:	70 e0       	ldi	r23, 0x00	; 0
     bee:	85 ee       	ldi	r24, 0xE5	; 229
     bf0:	9f ef       	ldi	r25, 0xFF	; 255
     bf2:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <copro_setTargetRel>
	delay(2000);
     bf6:	80 ed       	ldi	r24, 0xD0	; 208
     bf8:	97 e0       	ldi	r25, 0x07	; 7
     bfa:	0e 94 62 09 	call	0x12c4	; 0x12c4 <delay>
	leds_set_status(LEDS_OFF, 3);
     bfe:	63 e0       	ldi	r22, 0x03	; 3
     c00:	80 e0       	ldi	r24, 0x00	; 0
     c02:	0c 94 13 15 	jmp	0x2a26	; 0x2a26 <leds_set_status>

00000c06 <rightTurnFree>:
 * With this method the NIBO is able to turn right at a corner as inside turn.
 * Because the NIBO is not able to perform perfect 90° turns its orientating on the corner and its wall
 * to perform its turn. Those wall and corner have to be positioned as 90° corner!
 */
void rightTurnFree() {
	turnDirection_send = 1;
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	90 93 ab 04 	sts	0x04AB, r25
     c0e:	80 93 aa 04 	sts	0x04AA, r24
	leds_set_status(LEDS_ORANGE, 6);
     c12:	66 e0       	ldi	r22, 0x06	; 6
     c14:	83 e0       	ldi	r24, 0x03	; 3
     c16:	0e 94 13 15 	call	0x2a26	; 0x2a26 <leds_set_status>
	while (1 == 1) {
		copro_update();
     c1a:	0e 94 04 10 	call	0x2008	; 0x2008 <copro_update>
		copro_setSpeed(15, -10);
     c1e:	66 ef       	ldi	r22, 0xF6	; 246
     c20:	7f ef       	ldi	r23, 0xFF	; 255
     c22:	8f e0       	ldi	r24, 0x0F	; 15
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	0e 94 bc 10 	call	0x2178	; 0x2178 <copro_setSpeed>
		if (copro_distance[2] / 256 < 100 && copro_distance[3] / 256 < 50) {
     c2a:	80 91 4c 05 	lds	r24, 0x054C
     c2e:	90 91 4d 05 	lds	r25, 0x054D
     c32:	81 15       	cp	r24, r1
     c34:	94 46       	sbci	r25, 0x64	; 100
     c36:	88 f7       	brcc	.-30     	; 0xc1a <rightTurnFree+0x14>
     c38:	80 91 4e 05 	lds	r24, 0x054E
     c3c:	90 91 4f 05 	lds	r25, 0x054F
     c40:	81 15       	cp	r24, r1
     c42:	92 43       	sbci	r25, 0x32	; 50
     c44:	50 f7       	brcc	.-44     	; 0xc1a <rightTurnFree+0x14>
			copro_stop();
     c46:	0e 94 a0 10 	call	0x2140	; 0x2140 <copro_stop>
			leds_set_status(LEDS_OFF, 6);
     c4a:	66 e0       	ldi	r22, 0x06	; 6
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	0c 94 13 15 	jmp	0x2a26	; 0x2a26 <leds_set_status>

00000c52 <rightTurnForced>:
 * For outside turns the NIBOs looses contact to walls and is free in field.
 * In this situation the nibo has to perform a 90° turn of its own.
 * Use this method to perform a left turn.
 */
void rightTurnForced() {
	turnDirection_send = 1;
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	90 93 ab 04 	sts	0x04AB, r25
     c5a:	80 93 aa 04 	sts	0x04AA, r24
	leds_set_status(LEDS_ORANGE, 6);
     c5e:	66 e0       	ldi	r22, 0x06	; 6
     c60:	83 e0       	ldi	r24, 0x03	; 3
     c62:	0e 94 13 15 	call	0x2a26	; 0x2a26 <leds_set_status>
	copro_setTargetRel(27, -27, 10);
     c66:	4a e0       	ldi	r20, 0x0A	; 10
     c68:	50 e0       	ldi	r21, 0x00	; 0
     c6a:	65 ee       	ldi	r22, 0xE5	; 229
     c6c:	7f ef       	ldi	r23, 0xFF	; 255
     c6e:	8b e1       	ldi	r24, 0x1B	; 27
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <copro_setTargetRel>
	delay(2000);
     c76:	80 ed       	ldi	r24, 0xD0	; 208
     c78:	97 e0       	ldi	r25, 0x07	; 7
     c7a:	0e 94 62 09 	call	0x12c4	; 0x12c4 <delay>
	leds_set_status(LEDS_OFF, 6);
     c7e:	66 e0       	ldi	r22, 0x06	; 6
     c80:	80 e0       	ldi	r24, 0x00	; 0
     c82:	0c 94 13 15 	jmp	0x2a26	; 0x2a26 <leds_set_status>

00000c86 <turnInside_protocol>:
/**
 * There are different ways for NIBOJones to run around the structure.
 * This method decides whether left or right shall be choosen to turn to inside of structure.
 */
void turnInside_protocol() {
	if (run_direction == LEFT_RUN) {
     c86:	80 91 be 04 	lds	r24, 0x04BE
     c8a:	81 11       	cpse	r24, r1
     c8c:	02 c0       	rjmp	.+4      	; 0xc92 <turnInside_protocol+0xc>
		leftTurnFree();
     c8e:	0c 94 c7 05 	jmp	0xb8e	; 0xb8e <leftTurnFree>
	} else {
		rightTurnFree();
     c92:	0c 94 03 06 	jmp	0xc06	; 0xc06 <rightTurnFree>

00000c96 <turnOutside_protocol>:
/**
 * There are different ways for NIBOJones to run around the structure.
 * This method decides whether left or right shall be choosen to turn to outside of structure.
 */
void turnOutside_protocol() {
	if (run_direction == LEFT_RUN) {
     c96:	80 91 be 04 	lds	r24, 0x04BE
     c9a:	81 11       	cpse	r24, r1
     c9c:	03 c0       	rjmp	.+6      	; 0xca4 <turnOutside_protocol+0xe>
		rightTurnForced();
     c9e:	0e 94 29 06 	call	0xc52	; 0xc52 <rightTurnForced>
     ca2:	02 c0       	rjmp	.+4      	; 0xca8 <turnOutside_protocol+0x12>
	} else {
		leftTurnForced();
     ca4:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <leftTurnForced>
	}
	delay(1000);
     ca8:	88 ee       	ldi	r24, 0xE8	; 232
     caa:	93 e0       	ldi	r25, 0x03	; 3
     cac:	0c 94 62 09 	jmp	0x12c4	; 0x12c4 <delay>

00000cb0 <trackCorrection_protocol>:
 * This protocol corrects the track of NIBO running forward
 * to prevent collision with wall on the sides. Its correcting to inside or outside.
 * In case of specific run direction it a correction to left or right
 */
void trackCorrection_protocol() {
	copro_update();
     cb0:	0e 94 04 10 	call	0x2008	; 0x2008 <copro_update>
	//if side sensors value hits threshold of nearest distance to wall.
	if (copro_distance[sensorIDSide] / 256 > SIDE_THRESHOLD_OUTSIDE_MAX
     cb4:	e0 91 c6 04 	lds	r30, 0x04C6
     cb8:	f0 91 c7 04 	lds	r31, 0x04C7
     cbc:	ee 0f       	add	r30, r30
     cbe:	ff 1f       	adc	r31, r31
     cc0:	e8 5b       	subi	r30, 0xB8	; 184
     cc2:	fa 4f       	sbci	r31, 0xFA	; 250
     cc4:	21 81       	ldd	r18, Z+1	; 0x01
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	80 91 b4 04 	lds	r24, 0x04B4
     ccc:	90 91 b5 04 	lds	r25, 0x04B5
     cd0:	82 17       	cp	r24, r18
     cd2:	93 07       	cpc	r25, r19
     cd4:	88 f0       	brcs	.+34     	; 0xcf8 <trackCorrection_protocol+0x48>
			|| copro_distance[sensorIDBlade] / 256
     cd6:	e0 91 c2 04 	lds	r30, 0x04C2
     cda:	f0 91 c3 04 	lds	r31, 0x04C3
     cde:	ee 0f       	add	r30, r30
     ce0:	ff 1f       	adc	r31, r31
     ce2:	e8 5b       	subi	r30, 0xB8	; 184
     ce4:	fa 4f       	sbci	r31, 0xFA	; 250
     ce6:	81 81       	ldd	r24, Z+1	; 0x01
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	40 91 b0 04 	lds	r20, 0x04B0
     cee:	50 91 b1 04 	lds	r21, 0x04B1
     cf2:	48 17       	cp	r20, r24
     cf4:	59 07       	cpc	r21, r25
     cf6:	48 f4       	brcc	.+18     	; 0xd0a <trackCorrection_protocol+0x5a>
					> BLADE_THRESHOLD_OUTSIDE_MAX) {
		correctState = INSIDE;
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	80 93 c1 04 	sts	0x04C1, r24
		correctTrackToInside(run_direction);
     cfe:	80 91 be 04 	lds	r24, 0x04BE
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	0e 94 b5 05 	call	0xb6a	; 0xb6a <correctTrackToInside>
     d08:	27 c0       	rjmp	.+78     	; 0xd58 <trackCorrection_protocol+0xa8>
	//if side sensor value hits threshold of most far distance to wall.
	} else if (copro_distance[sensorIDSide] / 256 < SIDE_THRESHOLD_OUTSIDE_MIN
     d0a:	40 91 b2 04 	lds	r20, 0x04B2
     d0e:	50 91 b3 04 	lds	r21, 0x04B3
     d12:	24 17       	cp	r18, r20
     d14:	35 07       	cpc	r19, r21
     d16:	38 f0       	brcs	.+14     	; 0xd26 <trackCorrection_protocol+0x76>
			|| copro_distance[sensorIDBlade] / 256
     d18:	20 91 ae 04 	lds	r18, 0x04AE
     d1c:	30 91 af 04 	lds	r19, 0x04AF
     d20:	82 17       	cp	r24, r18
     d22:	93 07       	cpc	r25, r19
     d24:	40 f4       	brcc	.+16     	; 0xd36 <trackCorrection_protocol+0x86>
					< BLADE_THRESHOLD_OUTSIDE_MIN) {
		correctState = OUTSIDE;
     d26:	10 92 c1 04 	sts	0x04C1, r1
		correctTrackToOutside(run_direction);
     d2a:	80 91 be 04 	lds	r24, 0x04BE
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	0e 94 be 05 	call	0xb7c	; 0xb7c <correctTrackToOutside>
     d34:	11 c0       	rjmp	.+34     	; 0xd58 <trackCorrection_protocol+0xa8>
	} else {
		correctState = NON;
     d36:	82 e0       	ldi	r24, 0x02	; 2
     d38:	80 93 c1 04 	sts	0x04C1, r24
		leds_set_status(LEDS_OFF, 4);
     d3c:	64 e0       	ldi	r22, 0x04	; 4
     d3e:	80 e0       	ldi	r24, 0x00	; 0
     d40:	0e 94 13 15 	call	0x2a26	; 0x2a26 <leds_set_status>
		leds_set_status(LEDS_OFF, 5);
     d44:	65 e0       	ldi	r22, 0x05	; 5
     d46:	80 e0       	ldi	r24, 0x00	; 0
     d48:	0e 94 13 15 	call	0x2a26	; 0x2a26 <leds_set_status>
		copro_setSpeed(10, 10);
     d4c:	6a e0       	ldi	r22, 0x0A	; 10
     d4e:	70 e0       	ldi	r23, 0x00	; 0
     d50:	8a e0       	ldi	r24, 0x0A	; 10
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	0e 94 bc 10 	call	0x2178	; 0x2178 <copro_setSpeed>
	}

	lastCorrectState = correctState;
     d58:	80 91 c1 04 	lds	r24, 0x04C1
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	90 93 47 03 	sts	0x0347, r25
     d62:	80 93 46 03 	sts	0x0346, r24
	machine_State = RUNNING_FORWARD;
     d66:	84 e0       	ldi	r24, 0x04	; 4
     d68:	80 93 ba 04 	sts	0x04BA, r24
     d6c:	08 95       	ret

00000d6e <floorCheck>:
 * After recognition this method will change the machine state to next state.
 * It will start or stop the measuring process too.
 * @return returns whether the floor sensors noticed a black line.
 */
int floorCheck() {
	floor_update();
     d6e:	0e 94 e7 13 	call	0x27ce	; 0x27ce <floor_update>

	if (reconizedBlackLine_send == 0
     d72:	80 91 ac 04 	lds	r24, 0x04AC
     d76:	90 91 ad 04 	lds	r25, 0x04AD
     d7a:	89 2b       	or	r24, r25
     d7c:	09 f0       	breq	.+2      	; 0xd80 <floorCheck+0x12>
     d7e:	42 c0       	rjmp	.+132    	; 0xe04 <floorCheck+0x96>
			&& (floor_relative[FLOOR_LEFT] <= BLACK_UNDERGROUND
     d80:	80 91 9a 05 	lds	r24, 0x059A
     d84:	90 91 9b 05 	lds	r25, 0x059B
     d88:	89 97       	sbiw	r24, 0x29	; 41
     d8a:	30 f0       	brcs	.+12     	; 0xd98 <floorCheck+0x2a>
					|| floor_relative[FLOOR_RIGHT] <= BLACK_UNDERGROUND)) {
     d8c:	80 91 9c 05 	lds	r24, 0x059C
     d90:	90 91 9d 05 	lds	r25, 0x059D
     d94:	89 97       	sbiw	r24, 0x29	; 41
     d96:	b0 f5       	brcc	.+108    	; 0xe04 <floorCheck+0x96>
		switch (measure_State) {
     d98:	80 91 bb 04 	lds	r24, 0x04BB
     d9c:	88 23       	and	r24, r24
     d9e:	a1 f0       	breq	.+40     	; 0xdc8 <floorCheck+0x5a>
     da0:	81 30       	cpi	r24, 0x01	; 1
     da2:	49 f5       	brne	.+82     	; 0xdf6 <floorCheck+0x88>
			measure_State = STARTED;
			copro_stop();
			sendMessageToNibo(1);
			break;
		case STARTED:
			cleanDebug("         ");
     da4:	8c e6       	ldi	r24, 0x6C	; 108
     da6:	93 e0       	ldi	r25, 0x03	; 3
     da8:	0e 94 8a 01 	call	0x314	; 0x314 <cleanDebug>
			printDebug("Finished!");
     dac:	8b e4       	ldi	r24, 0x4B	; 75
     dae:	94 e0       	ldi	r25, 0x04	; 4
     db0:	0e 94 c8 01 	call	0x390	; 0x390 <printDebug>
			measure_State = FINISHED;
     db4:	10 92 bb 04 	sts	0x04BB, r1
			machine_State = SENDING_DATA;
     db8:	85 e0       	ldi	r24, 0x05	; 5
     dba:	80 93 ba 04 	sts	0x04BA, r24
			copro_stop();
     dbe:	0e 94 a0 10 	call	0x2140	; 0x2140 <copro_stop>
			sendMessageToNibo(0);
     dc2:	80 e0       	ldi	r24, 0x00	; 0
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	15 c0       	rjmp	.+42     	; 0xdf2 <floorCheck+0x84>
	if (reconizedBlackLine_send == 0
			&& (floor_relative[FLOOR_LEFT] <= BLACK_UNDERGROUND
					|| floor_relative[FLOOR_RIGHT] <= BLACK_UNDERGROUND)) {
		switch (measure_State) {
		case FINISHED:
			cleanDebug("        ");
     dc8:	8d e6       	ldi	r24, 0x6D	; 109
     dca:	93 e0       	ldi	r25, 0x03	; 3
     dcc:	0e 94 8a 01 	call	0x314	; 0x314 <cleanDebug>
			printDebug("Started!");
     dd0:	82 e4       	ldi	r24, 0x42	; 66
     dd2:	94 e0       	ldi	r25, 0x04	; 4
     dd4:	0e 94 c8 01 	call	0x390	; 0x390 <printDebug>
			copro_resetOdometry(0, 0);
     dd8:	60 e0       	ldi	r22, 0x00	; 0
     dda:	70 e0       	ldi	r23, 0x00	; 0
     ddc:	80 e0       	ldi	r24, 0x00	; 0
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	0e 94 18 11 	call	0x2230	; 0x2230 <copro_resetOdometry>
			measure_State = STARTED;
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	80 93 bb 04 	sts	0x04BB, r24
			copro_stop();
     dea:	0e 94 a0 10 	call	0x2140	; 0x2140 <copro_stop>
			sendMessageToNibo(1);
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	90 e0       	ldi	r25, 0x00	; 0
			cleanDebug("         ");
			printDebug("Finished!");
			measure_State = FINISHED;
			machine_State = SENDING_DATA;
			copro_stop();
			sendMessageToNibo(0);
     df2:	0e 94 94 04 	call	0x928	; 0x928 <sendMessageToNibo>
			break;
		}
		reconizedBlackLine_send = 1;
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	90 93 ad 04 	sts	0x04AD, r25
     dfe:	80 93 ac 04 	sts	0x04AC, r24
		return 1;
     e02:	08 95       	ret
	}
	return 0;
     e04:	80 e0       	ldi	r24, 0x00	; 0
     e06:	90 e0       	ldi	r25, 0x00	; 0
}
     e08:	08 95       	ret

00000e0a <showOutline_protocol>:
/**
 * This protocol will paint the outline of moved around and measured structure on NIBOs display.
 * Receiving data from NIBOBrody for painting is also part of this protocol.
 * @return returns whether all data for paining was received successfully.
 */
int showOutline_protocol() {
     e0a:	cf 92       	push	r12
     e0c:	df 92       	push	r13
     e0e:	ef 92       	push	r14
     e10:	ff 92       	push	r15
     e12:	0f 93       	push	r16
     e14:	1f 93       	push	r17
     e16:	cf 93       	push	r28
     e18:	df 93       	push	r29
	printDebug("Start receiving");
     e1a:	85 e5       	ldi	r24, 0x55	; 85
     e1c:	94 e0       	ldi	r25, 0x04	; 4
     e1e:	0e 94 c8 01 	call	0x390	; 0x390 <printDebug>
	int columns = receiveStartValues();
     e22:	0e 94 39 04 	call	0x872	; 0x872 <receiveStartValues>
     e26:	ec 01       	movw	r28, r24
	if (columns == -1) {
     e28:	8f 3f       	cpi	r24, 0xFF	; 255
     e2a:	2f ef       	ldi	r18, 0xFF	; 255
     e2c:	92 07       	cpc	r25, r18
     e2e:	59 f4       	brne	.+22     	; 0xe46 <showOutline_protocol+0x3c>
		cleanDebug(20);
     e30:	84 e1       	ldi	r24, 0x14	; 20
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	0e 94 8a 01 	call	0x314	; 0x314 <cleanDebug>
		printDebug("ERROR: columns");
     e38:	85 e6       	ldi	r24, 0x65	; 101
     e3a:	94 e0       	ldi	r25, 0x04	; 4
     e3c:	0e 94 c8 01 	call	0x390	; 0x390 <printDebug>
		return -1;
     e40:	8f ef       	ldi	r24, 0xFF	; 255
     e42:	9f ef       	ldi	r25, 0xFF	; 255
     e44:	2e c0       	rjmp	.+92     	; 0xea2 <showOutline_protocol+0x98>
	}
	int rows = receiveStartValues();
     e46:	0e 94 39 04 	call	0x872	; 0x872 <receiveStartValues>
     e4a:	8c 01       	movw	r16, r24
	if (columns == -1) {
		cleanDebug(20);
		printDebug("ERROR: rows");
		return -1;
	}
	int startX = receiveStartValues();
     e4c:	0e 94 39 04 	call	0x872	; 0x872 <receiveStartValues>
     e50:	7c 01       	movw	r14, r24
	if (columns == -1) {
		cleanDebug(20);
		printDebug("ERROR: startx");
		return -1;
	}
	int startY = receiveStartValues();
     e52:	0e 94 39 04 	call	0x872	; 0x872 <receiveStartValues>
     e56:	6c 01       	movw	r12, r24
	if (columns == -1) {
		cleanDebug(20);
		printDebug("ERROR: starty");
		return -1;
	}
	cleanDebug(20);
     e58:	84 e1       	ldi	r24, 0x14	; 20
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	0e 94 8a 01 	call	0x314	; 0x314 <cleanDebug>
	printDebug("connect successful");
     e60:	84 e7       	ldi	r24, 0x74	; 116
     e62:	94 e0       	ldi	r25, 0x04	; 4
     e64:	0e 94 c8 01 	call	0x390	; 0x390 <printDebug>
	setStartValues(columns, rows, startX, startY);
     e68:	96 01       	movw	r18, r12
     e6a:	a7 01       	movw	r20, r14
     e6c:	b8 01       	movw	r22, r16
     e6e:	ce 01       	movw	r24, r28
     e70:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <setStartValues>
	int isFinished = 0;
	int byte = -1;

	while (!isFinished) {
		isFinished = 1;
		byte = receiveOutline();
     e74:	0e 94 65 04 	call	0x8ca	; 0x8ca <receiveOutline>
		if (byte != -1) {
     e78:	8f 3f       	cpi	r24, 0xFF	; 255
     e7a:	2f ef       	ldi	r18, 0xFF	; 255
     e7c:	92 07       	cpc	r25, r18
     e7e:	59 f0       	breq	.+22     	; 0xe96 <showOutline_protocol+0x8c>
			showOutline(byte, segmentHeight, segmentWidth);
     e80:	40 91 bf 04 	lds	r20, 0x04BF
     e84:	50 91 c0 04 	lds	r21, 0x04C0
     e88:	60 91 c4 04 	lds	r22, 0x04C4
     e8c:	70 91 c5 04 	lds	r23, 0x04C5
     e90:	0e 94 1a 01 	call	0x234	; 0x234 <showOutline>
     e94:	04 c0       	rjmp	.+8      	; 0xe9e <showOutline_protocol+0x94>
			isFinished = 0;
			break;
		} else {
			delay(200);
     e96:	88 ec       	ldi	r24, 0xC8	; 200
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	0e 94 62 09 	call	0x12c4	; 0x12c4 <delay>
		}
		byte = -1;
	}

	return 1;
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	90 e0       	ldi	r25, 0x00	; 0
}
     ea2:	df 91       	pop	r29
     ea4:	cf 91       	pop	r28
     ea6:	1f 91       	pop	r17
     ea8:	0f 91       	pop	r16
     eaa:	ff 90       	pop	r15
     eac:	ef 90       	pop	r14
     eae:	df 90       	pop	r13
     eb0:	cf 90       	pop	r12
     eb2:	08 95       	ret

00000eb4 <finishRun_protocol>:

/**
 * This protocol will be started at the end of the measuring run around the structure.
 * Its starting outline painting protocol.
 */
void finishRun_protocol() {
     eb4:	cf 93       	push	r28
     eb6:	df 93       	push	r29
	//sometimes buffer is filled before received any message from NIBOBrody. This could cause problems.
	clearBuffer();
     eb8:	0e 94 2f 04 	call	0x85e	; 0x85e <clearBuffer>
     ebc:	c5 e0       	ldi	r28, 0x05	; 5
     ebe:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i = 0; i < 5; i++) {
		//if showOutline protocol will fail it will be repeated several times.
		if (showOutline_protocol() == 1) {
     ec0:	0e 94 05 07 	call	0xe0a	; 0xe0a <showOutline_protocol>
     ec4:	01 97       	sbiw	r24, 0x01	; 1
     ec6:	51 f4       	brne	.+20     	; 0xedc <finishRun_protocol+0x28>
			break;
		}
		delay(500);
	}
	cleanDebug(16);
     ec8:	80 e1       	ldi	r24, 0x10	; 16
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	0e 94 8a 01 	call	0x314	; 0x314 <cleanDebug>
	printDebug("End of communication!");
     ed0:	87 e8       	ldi	r24, 0x87	; 135
     ed2:	94 e0       	ldi	r25, 0x04	; 4
}
     ed4:	df 91       	pop	r29
     ed6:	cf 91       	pop	r28
			break;
		}
		delay(500);
	}
	cleanDebug(16);
	printDebug("End of communication!");
     ed8:	0c 94 c8 01 	jmp	0x390	; 0x390 <printDebug>
	for (int i = 0; i < 5; i++) {
		//if showOutline protocol will fail it will be repeated several times.
		if (showOutline_protocol() == 1) {
			break;
		}
		delay(500);
     edc:	84 ef       	ldi	r24, 0xF4	; 244
     ede:	91 e0       	ldi	r25, 0x01	; 1
     ee0:	0e 94 62 09 	call	0x12c4	; 0x12c4 <delay>
     ee4:	21 97       	sbiw	r28, 0x01	; 1
 * Its starting outline painting protocol.
 */
void finishRun_protocol() {
	//sometimes buffer is filled before received any message from NIBOBrody. This could cause problems.
	clearBuffer();
	for (int i = 0; i < 5; i++) {
     ee6:	20 97       	sbiw	r28, 0x00	; 0
     ee8:	59 f7       	brne	.-42     	; 0xec0 <finishRun_protocol+0xc>
     eea:	ee cf       	rjmp	.-36     	; 0xec8 <finishRun_protocol+0x14>

00000eec <runForward_protocol>:

/**
 * This protocol controls the NIBO by running forward. Its the main protocol too and
 * starts all others protcolls by setting machine state.
 */
void runForward_protocol() {
     eec:	cf 93       	push	r28
     eee:	df 93       	push	r29
	copro_update();
     ef0:	0e 94 04 10 	call	0x2008	; 0x2008 <copro_update>
	int front = copro_distance[2] / 256;
     ef4:	d0 91 4d 05 	lds	r29, 0x054D
	int side_outside = copro_distance[run_direction] / 256;
     ef8:	e0 91 be 04 	lds	r30, 0x04BE
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	ee 0f       	add	r30, r30
     f00:	ff 1f       	adc	r31, r31
     f02:	e8 5b       	subi	r30, 0xB8	; 184
     f04:	fa 4f       	sbci	r31, 0xFA	; 250
     f06:	c1 81       	ldd	r28, Z+1	; 0x01

	if (s3_was_pressed()) {
     f08:	0e 94 b2 03 	call	0x764	; 0x764 <s3_was_pressed>
     f0c:	89 2b       	or	r24, r25
     f0e:	11 f0       	breq	.+4      	; 0xf14 <runForward_protocol+0x28>
		machine_State = WAITING;
     f10:	86 e0       	ldi	r24, 0x06	; 6
     f12:	25 c0       	rjmp	.+74     	; 0xf5e <runForward_protocol+0x72>
		return;
	}

	//if a black line was recognized this will perform a hard switch of machine state to improve reaction time.
	if (floorCheck() == 1) {
     f14:	0e 94 b7 06 	call	0xd6e	; 0xd6e <floorCheck>
     f18:	01 97       	sbiw	r24, 0x01	; 1
     f1a:	19 f1       	breq	.+70     	; 0xf62 <runForward_protocol+0x76>
 * This protocol controls the NIBO by running forward. Its the main protocol too and
 * starts all others protcolls by setting machine state.
 */
void runForward_protocol() {
	copro_update();
	int front = copro_distance[2] / 256;
     f1c:	8d 2f       	mov	r24, r29
     f1e:	90 e0       	ldi	r25, 0x00	; 0
	//if a black line was recognized this will perform a hard switch of machine state to improve reaction time.
	if (floorCheck() == 1) {
		return;
	}

	if (front >= FRONT_THRESHOLD) { //wall on front
     f20:	20 91 b6 04 	lds	r18, 0x04B6
     f24:	30 91 b7 04 	lds	r19, 0x04B7
     f28:	82 17       	cp	r24, r18
     f2a:	93 07       	cpc	r25, r19
     f2c:	24 f0       	brlt	.+8      	; 0xf36 <runForward_protocol+0x4a>
		copro_stop();
     f2e:	0e 94 a0 10 	call	0x2140	; 0x2140 <copro_stop>
		machine_State = TURNING_INSIDE;
     f32:	82 e0       	ldi	r24, 0x02	; 2
     f34:	14 c0       	rjmp	.+40     	; 0xf5e <runForward_protocol+0x72>
	} else if (run_direction
     f36:	80 91 be 04 	lds	r24, 0x04BE
     f3a:	82 30       	cpi	r24, 0x02	; 2
     f3c:	79 f0       	breq	.+30     	; 0xf5c <runForward_protocol+0x70>
 * starts all others protcolls by setting machine state.
 */
void runForward_protocol() {
	copro_update();
	int front = copro_distance[2] / 256;
	int side_outside = copro_distance[run_direction] / 256;
     f3e:	8c 2f       	mov	r24, r28
     f40:	90 e0       	ldi	r25, 0x00	; 0

	if (front >= FRONT_THRESHOLD) { //wall on front
		copro_stop();
		machine_State = TURNING_INSIDE;
	} else if (run_direction
			!= UNKNOWN&& side_outside < SIDE_OUTSIDE_TURN_THRESHOLD) { // loosed contact to wall on side
     f42:	44 97       	sbiw	r24, 0x14	; 20
     f44:	5c f4       	brge	.+22     	; 0xf5c <runForward_protocol+0x70>
		machine_State = TURNING_OUTSIDE;
     f46:	83 e0       	ldi	r24, 0x03	; 3
     f48:	80 93 ba 04 	sts	0x04BA, r24
		delay(1000);
     f4c:	88 ee       	ldi	r24, 0xE8	; 232
     f4e:	93 e0       	ldi	r25, 0x03	; 3
     f50:	0e 94 62 09 	call	0x12c4	; 0x12c4 <delay>
		copro_stop();
	} else { //no wall on front or loosed contact to wall on side
		machine_State = TRACK_CORRECTION;
	}
}
     f54:	df 91       	pop	r29
     f56:	cf 91       	pop	r28
		machine_State = TURNING_INSIDE;
	} else if (run_direction
			!= UNKNOWN&& side_outside < SIDE_OUTSIDE_TURN_THRESHOLD) { // loosed contact to wall on side
		machine_State = TURNING_OUTSIDE;
		delay(1000);
		copro_stop();
     f58:	0c 94 a0 10 	jmp	0x2140	; 0x2140 <copro_stop>
	} else { //no wall on front or loosed contact to wall on side
		machine_State = TRACK_CORRECTION;
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	80 93 ba 04 	sts	0x04BA, r24
	}
}
     f62:	df 91       	pop	r29
     f64:	cf 91       	pop	r28
     f66:	08 95       	ret

00000f68 <uart0_set_baudrate>:
uint8_t uart0_rxbuf_end;



void uart0_set_baudrate(uint16_t baud) {
  baud = ((uint32_t)(F_CPU))/((uint32_t)baud*16) - 1;
     f68:	9c 01       	movw	r18, r24
     f6a:	40 e0       	ldi	r20, 0x00	; 0
     f6c:	50 e0       	ldi	r21, 0x00	; 0
     f6e:	84 e0       	ldi	r24, 0x04	; 4
     f70:	22 0f       	add	r18, r18
     f72:	33 1f       	adc	r19, r19
     f74:	44 1f       	adc	r20, r20
     f76:	55 1f       	adc	r21, r21
     f78:	8a 95       	dec	r24
     f7a:	d1 f7       	brne	.-12     	; 0xf70 <uart0_set_baudrate+0x8>
     f7c:	60 e0       	ldi	r22, 0x00	; 0
     f7e:	74 e2       	ldi	r23, 0x24	; 36
     f80:	84 ef       	ldi	r24, 0xF4	; 244
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	0e 94 18 1a 	call	0x3430	; 0x3430 <__udivmodsi4>
     f88:	21 50       	subi	r18, 0x01	; 1
     f8a:	31 09       	sbc	r19, r1
  UBRR0H = (uint8_t)(baud>>8);
     f8c:	30 93 90 00 	sts	0x0090, r19
  UBRR0L = (uint8_t)(baud&0xff);
     f90:	29 b9       	out	0x09, r18	; 9
     f92:	08 95       	ret

00000f94 <uart0_getchar>:
}


char uart0_getchar() {
  cli();
     f94:	f8 94       	cli
  uint8_t result = uart0_rxbuf[uart0_rxbuf_begin];
     f96:	90 91 d9 04 	lds	r25, 0x04D9
     f9a:	e9 2f       	mov	r30, r25
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	e7 53       	subi	r30, 0x37	; 55
     fa0:	fb 4f       	sbci	r31, 0xFB	; 251
     fa2:	80 81       	ld	r24, Z
  if (uart0_rxbuf_end==UART0_RXBUF_SIZE) {
     fa4:	20 91 da 04 	lds	r18, 0x04DA
     fa8:	28 30       	cpi	r18, 0x08	; 8
     faa:	11 f4       	brne	.+4      	; 0xfb0 <uart0_getchar+0x1c>
    uart0_rxbuf_end=uart0_rxbuf_begin;
     fac:	90 93 da 04 	sts	0x04DA, r25
  }
  
  if (++uart0_rxbuf_begin>=UART0_RXBUF_SIZE) {
     fb0:	9f 5f       	subi	r25, 0xFF	; 255
     fb2:	98 30       	cpi	r25, 0x08	; 8
     fb4:	18 f4       	brcc	.+6      	; 0xfbc <uart0_getchar+0x28>
     fb6:	90 93 d9 04 	sts	0x04D9, r25
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <uart0_getchar+0x2c>
    uart0_rxbuf_begin=0;
     fbc:	10 92 d9 04 	sts	0x04D9, r1
  }
  sei();
     fc0:	78 94       	sei
  return result;
}
     fc2:	08 95       	ret

00000fc4 <uart0_putchar>:


char uart0_putchar(char c) {
  cli();
     fc4:	f8 94       	cli
  uart0_txbuf[uart0_txbuf_end] = c;
     fc6:	90 91 db 04 	lds	r25, 0x04DB
     fca:	e9 2f       	mov	r30, r25
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	ef 52       	subi	r30, 0x2F	; 47
     fd0:	fb 4f       	sbci	r31, 0xFB	; 251
     fd2:	80 83       	st	Z, r24
  if (++uart0_txbuf_end>=UART0_TXBUF_SIZE) {
     fd4:	9f 5f       	subi	r25, 0xFF	; 255
     fd6:	98 30       	cpi	r25, 0x08	; 8
     fd8:	18 f4       	brcc	.+6      	; 0xfe0 <uart0_putchar+0x1c>
     fda:	90 93 db 04 	sts	0x04DB, r25
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <uart0_putchar+0x20>
    uart0_txbuf_end=0;
     fe0:	10 92 db 04 	sts	0x04DB, r1
  }
  if (uart0_txbuf_end==uart0_txbuf_begin) {
     fe4:	20 91 db 04 	lds	r18, 0x04DB
     fe8:	90 91 c8 04 	lds	r25, 0x04C8
     fec:	29 13       	cpse	r18, r25
     fee:	03 c0       	rjmp	.+6      	; 0xff6 <uart0_putchar+0x32>
    uart0_txbuf_end=UART0_TXBUF_SIZE;
     ff0:	98 e0       	ldi	r25, 0x08	; 8
     ff2:	90 93 db 04 	sts	0x04DB, r25
  }
  // reenable transmit register empty interrupt
  UCSR0B |= _BV(UDRIE0);
     ff6:	55 9a       	sbi	0x0a, 5	; 10
  sei();
     ff8:	78 94       	sei
  return c;
}
     ffa:	08 95       	ret

00000ffc <uart0_enable>:
  return c;
}


void uart0_enable() {
  UCSR0B = _BV(RXCIE0) + _BV(UDRIE0) + _BV(RXEN0) + _BV(TXEN0);
     ffc:	88 eb       	ldi	r24, 0xB8	; 184
     ffe:	8a b9       	out	0x0a, r24	; 10
    1000:	08 95       	ret

00001002 <uart0_disable>:
}


void uart0_disable() {
  UCSR0B = 0;
    1002:	1a b8       	out	0x0a, r1	; 10
    1004:	08 95       	ret

00001006 <__vector_18>:
}


ISR(USART0_RX_vect) {
    1006:	1f 92       	push	r1
    1008:	0f 92       	push	r0
    100a:	0f b6       	in	r0, 0x3f	; 63
    100c:	0f 92       	push	r0
    100e:	11 24       	eor	r1, r1
    1010:	0b b6       	in	r0, 0x3b	; 59
    1012:	0f 92       	push	r0
    1014:	8f 93       	push	r24
    1016:	9f 93       	push	r25
    1018:	ef 93       	push	r30
    101a:	ff 93       	push	r31
  uint8_t c = UDR0;
    101c:	9c b1       	in	r25, 0x0c	; 12

/*!
 * Liefert true wenn der Empfangspuffer voll ist.
 */
static inline char uart0_rxfull() {
  return uart0_rxbuf_end==UART0_RXBUF_SIZE;
    101e:	80 91 da 04 	lds	r24, 0x04DA
  if (!uart0_rxfull()) {
    1022:	88 30       	cpi	r24, 0x08	; 8
    1024:	b1 f0       	breq	.+44     	; 0x1052 <__vector_18+0x4c>
  return result;
}


static char uart0_rx_putchar(char c) {
  uart0_rxbuf[uart0_rxbuf_end] = c;
    1026:	e8 2f       	mov	r30, r24
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	e7 53       	subi	r30, 0x37	; 55
    102c:	fb 4f       	sbci	r31, 0xFB	; 251
    102e:	90 83       	st	Z, r25
  if (++uart0_rxbuf_end>=UART0_RXBUF_SIZE) {
    1030:	8f 5f       	subi	r24, 0xFF	; 255
    1032:	88 30       	cpi	r24, 0x08	; 8
    1034:	18 f4       	brcc	.+6      	; 0x103c <__vector_18+0x36>
    1036:	80 93 da 04 	sts	0x04DA, r24
    103a:	02 c0       	rjmp	.+4      	; 0x1040 <__vector_18+0x3a>
    uart0_rxbuf_end=0;
    103c:	10 92 da 04 	sts	0x04DA, r1
  }
  if (uart0_rxbuf_end==uart0_rxbuf_begin) {
    1040:	90 91 da 04 	lds	r25, 0x04DA
    1044:	80 91 d9 04 	lds	r24, 0x04D9
    1048:	98 13       	cpse	r25, r24
    104a:	03 c0       	rjmp	.+6      	; 0x1052 <__vector_18+0x4c>
    uart0_rxbuf_end=UART0_RXBUF_SIZE;
    104c:	88 e0       	ldi	r24, 0x08	; 8
    104e:	80 93 da 04 	sts	0x04DA, r24
ISR(USART0_RX_vect) {
  uint8_t c = UDR0;
  if (!uart0_rxfull()) {
    uart0_rx_putchar(c);
  }
}
    1052:	ff 91       	pop	r31
    1054:	ef 91       	pop	r30
    1056:	9f 91       	pop	r25
    1058:	8f 91       	pop	r24
    105a:	0f 90       	pop	r0
    105c:	0b be       	out	0x3b, r0	; 59
    105e:	0f 90       	pop	r0
    1060:	0f be       	out	0x3f, r0	; 63
    1062:	0f 90       	pop	r0
    1064:	1f 90       	pop	r1
    1066:	18 95       	reti

00001068 <__vector_19>:


ISR(USART0_UDRE_vect) {
    1068:	1f 92       	push	r1
    106a:	0f 92       	push	r0
    106c:	0f b6       	in	r0, 0x3f	; 63
    106e:	0f 92       	push	r0
    1070:	11 24       	eor	r1, r1
    1072:	0b b6       	in	r0, 0x3b	; 59
    1074:	0f 92       	push	r0
    1076:	2f 93       	push	r18
    1078:	8f 93       	push	r24
    107a:	9f 93       	push	r25
    107c:	ef 93       	push	r30
    107e:	ff 93       	push	r31

/*!
 * Liefert true wenn der Sendepuffer leer ist.
 */
static inline char uart0_txempty() {
  return uart0_txbuf_begin==uart0_txbuf_end;
    1080:	80 91 c8 04 	lds	r24, 0x04C8
    1084:	90 91 db 04 	lds	r25, 0x04DB
  if (!uart0_txempty()) {
    1088:	89 17       	cp	r24, r25
    108a:	99 f0       	breq	.+38     	; 0x10b2 <__vector_19+0x4a>
  return c;
}


static char uart0_tx_getchar() {
  uint8_t result = uart0_txbuf[uart0_txbuf_begin];
    108c:	e8 2f       	mov	r30, r24
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	ef 52       	subi	r30, 0x2F	; 47
    1092:	fb 4f       	sbci	r31, 0xFB	; 251
    1094:	20 81       	ld	r18, Z
  if (uart0_txbuf_end==UART0_TXBUF_SIZE) {
    1096:	98 30       	cpi	r25, 0x08	; 8
    1098:	11 f4       	brne	.+4      	; 0x109e <__vector_19+0x36>
    uart0_txbuf_end=uart0_txbuf_begin;
    109a:	80 93 db 04 	sts	0x04DB, r24
  }
  
  if (++uart0_txbuf_begin>=UART0_TXBUF_SIZE) {
    109e:	8f 5f       	subi	r24, 0xFF	; 255
    10a0:	88 30       	cpi	r24, 0x08	; 8
    10a2:	18 f4       	brcc	.+6      	; 0x10aa <__vector_19+0x42>
    10a4:	80 93 c8 04 	sts	0x04C8, r24
    10a8:	02 c0       	rjmp	.+4      	; 0x10ae <__vector_19+0x46>
    uart0_txbuf_begin=0;
    10aa:	10 92 c8 04 	sts	0x04C8, r1
}


ISR(USART0_UDRE_vect) {
  if (!uart0_txempty()) {
    UDR0 = uart0_tx_getchar();
    10ae:	2c b9       	out	0x0c, r18	; 12
    10b0:	01 c0       	rjmp	.+2      	; 0x10b4 <__vector_19+0x4c>
  } else {
    UCSR0B &= ~_BV(UDRIE0);
    10b2:	55 98       	cbi	0x0a, 5	; 10
  }
}
    10b4:	ff 91       	pop	r31
    10b6:	ef 91       	pop	r30
    10b8:	9f 91       	pop	r25
    10ba:	8f 91       	pop	r24
    10bc:	2f 91       	pop	r18
    10be:	0f 90       	pop	r0
    10c0:	0b be       	out	0x3b, r0	; 59
    10c2:	0f 90       	pop	r0
    10c4:	0f be       	out	0x3f, r0	; 63
    10c6:	0f 90       	pop	r0
    10c8:	1f 90       	pop	r1
    10ca:	18 95       	reti

000010cc <display_write>:
    10cc:	90 91 65 00 	lds	r25, 0x0065
    10d0:	28 2f       	mov	r18, r24
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	80 e0       	ldi	r24, 0x00	; 0
    10d6:	a9 01       	movw	r20, r18
    10d8:	41 70       	andi	r20, 0x01	; 1
    10da:	50 70       	andi	r21, 0x00	; 0
    10dc:	20 ff       	sbrs	r18, 0
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	9e 7f       	andi	r25, 0xFE	; 254
    10e2:	98 2b       	or	r25, r24
    10e4:	90 93 65 00 	sts	0x0065, r25
    10e8:	80 91 65 00 	lds	r24, 0x0065
    10ec:	41 15       	cp	r20, r1
    10ee:	51 05       	cpc	r21, r1
    10f0:	11 f4       	brne	.+4      	; 0x10f6 <display_write+0x2a>
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	01 c0       	rjmp	.+2      	; 0x10f8 <display_write+0x2c>
    10f6:	92 e0       	ldi	r25, 0x02	; 2
    10f8:	8d 7f       	andi	r24, 0xFD	; 253
    10fa:	89 2b       	or	r24, r25
    10fc:	80 93 65 00 	sts	0x0065, r24
    1100:	80 91 65 00 	lds	r24, 0x0065
    1104:	21 fd       	sbrc	r18, 1
    1106:	02 c0       	rjmp	.+4      	; 0x110c <__stack+0xd>
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	01 c0       	rjmp	.+2      	; 0x110e <__stack+0xf>
    110c:	98 e0       	ldi	r25, 0x08	; 8
    110e:	87 7f       	andi	r24, 0xF7	; 247
    1110:	89 2b       	or	r24, r25
    1112:	80 93 65 00 	sts	0x0065, r24
    1116:	80 91 65 00 	lds	r24, 0x0065
    111a:	8f 7e       	andi	r24, 0xEF	; 239
    111c:	80 93 65 00 	sts	0x0065, r24
    1120:	8f ef       	ldi	r24, 0xFF	; 255
    1122:	8a bb       	out	0x1a, r24	; 26
    1124:	6b bb       	out	0x1b, r22	; 27
    1126:	85 e0       	ldi	r24, 0x05	; 5
    1128:	98 2f       	mov	r25, r24
    112a:	9a 95       	dec	r25
    112c:	f1 f7       	brne	.-4      	; 0x112a <__stack+0x2b>
    112e:	90 91 65 00 	lds	r25, 0x0065
    1132:	94 60       	ori	r25, 0x04	; 4
    1134:	90 93 65 00 	sts	0x0065, r25
    1138:	98 2f       	mov	r25, r24
    113a:	9a 95       	dec	r25
    113c:	f1 f7       	brne	.-4      	; 0x113a <__stack+0x3b>
    113e:	90 91 65 00 	lds	r25, 0x0065
    1142:	9b 7f       	andi	r25, 0xFB	; 251
    1144:	90 93 65 00 	sts	0x0065, r25
    1148:	8a 95       	dec	r24
    114a:	f1 f7       	brne	.-4      	; 0x1148 <__stack+0x49>
    114c:	1b ba       	out	0x1b, r1	; 27
    114e:	1a ba       	out	0x1a, r1	; 26
    1150:	08 95       	ret

00001152 <display_read>:
    1152:	90 91 65 00 	lds	r25, 0x0065
    1156:	28 2f       	mov	r18, r24
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	80 e0       	ldi	r24, 0x00	; 0
    115c:	a9 01       	movw	r20, r18
    115e:	41 70       	andi	r20, 0x01	; 1
    1160:	50 70       	andi	r21, 0x00	; 0
    1162:	20 ff       	sbrs	r18, 0
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	9e 7f       	andi	r25, 0xFE	; 254
    1168:	98 2b       	or	r25, r24
    116a:	90 93 65 00 	sts	0x0065, r25
    116e:	80 91 65 00 	lds	r24, 0x0065
    1172:	41 15       	cp	r20, r1
    1174:	51 05       	cpc	r21, r1
    1176:	11 f4       	brne	.+4      	; 0x117c <display_read+0x2a>
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	01 c0       	rjmp	.+2      	; 0x117e <display_read+0x2c>
    117c:	92 e0       	ldi	r25, 0x02	; 2
    117e:	8d 7f       	andi	r24, 0xFD	; 253
    1180:	89 2b       	or	r24, r25
    1182:	80 93 65 00 	sts	0x0065, r24
    1186:	80 91 65 00 	lds	r24, 0x0065
    118a:	21 fd       	sbrc	r18, 1
    118c:	02 c0       	rjmp	.+4      	; 0x1192 <display_read+0x40>
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	01 c0       	rjmp	.+2      	; 0x1194 <display_read+0x42>
    1192:	98 e0       	ldi	r25, 0x08	; 8
    1194:	87 7f       	andi	r24, 0xF7	; 247
    1196:	89 2b       	or	r24, r25
    1198:	80 93 65 00 	sts	0x0065, r24
    119c:	80 91 65 00 	lds	r24, 0x0065
    11a0:	80 61       	ori	r24, 0x10	; 16
    11a2:	80 93 65 00 	sts	0x0065, r24
    11a6:	1a ba       	out	0x1a, r1	; 26
    11a8:	25 e0       	ldi	r18, 0x05	; 5
    11aa:	82 2f       	mov	r24, r18
    11ac:	8a 95       	dec	r24
    11ae:	f1 f7       	brne	.-4      	; 0x11ac <display_read+0x5a>
    11b0:	80 91 65 00 	lds	r24, 0x0065
    11b4:	84 60       	ori	r24, 0x04	; 4
    11b6:	80 93 65 00 	sts	0x0065, r24
    11ba:	85 e1       	ldi	r24, 0x15	; 21
    11bc:	8a 95       	dec	r24
    11be:	f1 f7       	brne	.-4      	; 0x11bc <display_read+0x6a>
    11c0:	89 b3       	in	r24, 0x19	; 25
    11c2:	90 91 65 00 	lds	r25, 0x0065
    11c6:	9b 7f       	andi	r25, 0xFB	; 251
    11c8:	90 93 65 00 	sts	0x0065, r25
    11cc:	92 2f       	mov	r25, r18
    11ce:	9a 95       	dec	r25
    11d0:	f1 f7       	brne	.-4      	; 0x11ce <display_read+0x7c>
    11d2:	08 95       	ret

000011d4 <display_wait>:
    11d4:	1f 93       	push	r17
    11d6:	cf 93       	push	r28
    11d8:	df 93       	push	r29
    11da:	90 91 dc 04 	lds	r25, 0x04DC
    11de:	99 23       	and	r25, r25
    11e0:	71 f0       	breq	.+28     	; 0x11fe <display_wait+0x2a>
    11e2:	18 2f       	mov	r17, r24
    11e4:	11 70       	andi	r17, 0x01	; 1
    11e6:	cf ef       	ldi	r28, 0xFF	; 255
    11e8:	df ef       	ldi	r29, 0xFF	; 255
    11ea:	81 2f       	mov	r24, r17
    11ec:	0e 94 a9 08 	call	0x1152	; 0x1152 <display_read>
    11f0:	21 97       	sbiw	r28, 0x01	; 1
    11f2:	87 fd       	sbrc	r24, 7
    11f4:	02 c0       	rjmp	.+4      	; 0x11fa <display_wait+0x26>
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	03 c0       	rjmp	.+6      	; 0x1200 <display_wait+0x2c>
    11fa:	20 97       	sbiw	r28, 0x00	; 0
    11fc:	b1 f7       	brne	.-20     	; 0x11ea <display_wait+0x16>
    11fe:	80 e0       	ldi	r24, 0x00	; 0
    1200:	df 91       	pop	r29
    1202:	cf 91       	pop	r28
    1204:	1f 91       	pop	r17
    1206:	08 95       	ret

00001208 <display_init>:
    1208:	8f ef       	ldi	r24, 0xFF	; 255
    120a:	80 93 dc 04 	sts	0x04DC, r24
    120e:	80 91 64 00 	lds	r24, 0x0064
    1212:	88 60       	ori	r24, 0x08	; 8
    1214:	80 93 64 00 	sts	0x0064, r24
    1218:	80 91 64 00 	lds	r24, 0x0064
    121c:	80 61       	ori	r24, 0x10	; 16
    121e:	80 93 64 00 	sts	0x0064, r24
    1222:	80 91 64 00 	lds	r24, 0x0064
    1226:	84 60       	ori	r24, 0x04	; 4
    1228:	80 93 64 00 	sts	0x0064, r24
    122c:	80 91 64 00 	lds	r24, 0x0064
    1230:	81 60       	ori	r24, 0x01	; 1
    1232:	80 93 64 00 	sts	0x0064, r24
    1236:	80 91 64 00 	lds	r24, 0x0064
    123a:	82 60       	ori	r24, 0x02	; 2
    123c:	80 93 64 00 	sts	0x0064, r24
    1240:	b8 9a       	sbi	0x17, 0	; 23
    1242:	1a ba       	out	0x1a, r1	; 26
    1244:	80 91 65 00 	lds	r24, 0x0065
    1248:	87 7f       	andi	r24, 0xF7	; 247
    124a:	80 93 65 00 	sts	0x0065, r24
    124e:	80 91 65 00 	lds	r24, 0x0065
    1252:	8f 7e       	andi	r24, 0xEF	; 239
    1254:	80 93 65 00 	sts	0x0065, r24
    1258:	80 91 65 00 	lds	r24, 0x0065
    125c:	8b 7f       	andi	r24, 0xFB	; 251
    125e:	80 93 65 00 	sts	0x0065, r24
    1262:	80 91 65 00 	lds	r24, 0x0065
    1266:	8e 7f       	andi	r24, 0xFE	; 254
    1268:	80 93 65 00 	sts	0x0065, r24
    126c:	80 91 65 00 	lds	r24, 0x0065
    1270:	8d 7f       	andi	r24, 0xFD	; 253
    1272:	80 93 65 00 	sts	0x0065, r24
    1276:	c0 98       	cbi	0x18, 0	; 24
    1278:	97 9b       	sbis	0x12, 7	; 18
    127a:	07 c0       	rjmp	.+14     	; 0x128a <display_init+0x82>
    127c:	97 98       	cbi	0x12, 7	; 18
    127e:	80 ea       	ldi	r24, 0xA0	; 160
    1280:	9f e0       	ldi	r25, 0x0F	; 15
    1282:	01 97       	sbiw	r24, 0x01	; 1
    1284:	f1 f7       	brne	.-4      	; 0x1282 <display_init+0x7a>
    1286:	97 9a       	sbi	0x12, 7	; 18
    1288:	04 c0       	rjmp	.+8      	; 0x1292 <display_init+0x8a>
    128a:	80 ea       	ldi	r24, 0xA0	; 160
    128c:	9f e0       	ldi	r25, 0x0F	; 15
    128e:	01 97       	sbiw	r24, 0x01	; 1
    1290:	f1 f7       	brne	.-4      	; 0x128e <display_init+0x86>
    1292:	c0 9a       	sbi	0x18, 0	; 24
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <display_wait>
    129a:	88 23       	and	r24, r24
    129c:	51 f0       	breq	.+20     	; 0x12b2 <display_init+0xaa>
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <display_wait>
    12a4:	88 23       	and	r24, r24
    12a6:	11 f0       	breq	.+4      	; 0x12ac <display_init+0xa4>
    12a8:	82 e0       	ldi	r24, 0x02	; 2
    12aa:	01 c0       	rjmp	.+2      	; 0x12ae <display_init+0xa6>
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	80 93 dc 04 	sts	0x04DC, r24
    12b2:	80 91 dc 04 	lds	r24, 0x04DC
    12b6:	8f 3f       	cpi	r24, 0xFF	; 255
    12b8:	11 f4       	brne	.+4      	; 0x12be <display_init+0xb6>
    12ba:	10 92 dc 04 	sts	0x04DC, r1
    12be:	80 91 dc 04 	lds	r24, 0x04DC
    12c2:	08 95       	ret

000012c4 <delay>:
    12c4:	20 ea       	ldi	r18, 0xA0	; 160
    12c6:	3f e0       	ldi	r19, 0x0F	; 15
    12c8:	04 c0       	rjmp	.+8      	; 0x12d2 <delay+0xe>
    12ca:	f9 01       	movw	r30, r18
    12cc:	31 97       	sbiw	r30, 0x01	; 1
    12ce:	f1 f7       	brne	.-4      	; 0x12cc <delay+0x8>
    12d0:	01 97       	sbiw	r24, 0x01	; 1
    12d2:	00 97       	sbiw	r24, 0x00	; 0
    12d4:	d1 f7       	brne	.-12     	; 0x12ca <delay+0x6>
    12d6:	08 95       	ret

000012d8 <spi_restart_transmission>:
    12d8:	10 92 19 05 	sts	0x0519, r1
    12dc:	80 93 fa 04 	sts	0x04FA, r24
    12e0:	98 2f       	mov	r25, r24
    12e2:	9f 5f       	subi	r25, 0xFF	; 255
    12e4:	90 93 fc 04 	sts	0x04FC, r25
    12e8:	96 e9       	ldi	r25, 0x96	; 150
    12ea:	90 93 1a 05 	sts	0x051A, r25
    12ee:	f8 94       	cli
    12f0:	03 c0       	rjmp	.+6      	; 0x12f8 <spi_restart_transmission+0x20>
    12f2:	78 94       	sei
    12f4:	00 00       	nop
    12f6:	f8 94       	cli
    12f8:	b0 9b       	sbis	0x16, 0	; 22
    12fa:	fb cf       	rjmp	.-10     	; 0x12f2 <spi_restart_transmission+0x1a>
    12fc:	90 ec       	ldi	r25, 0xC0	; 192
    12fe:	9d b9       	out	0x0d, r25	; 13
    1300:	8f b9       	out	0x0f, r24	; 15
    1302:	96 e9       	ldi	r25, 0x96	; 150
    1304:	98 27       	eor	r25, r24
    1306:	90 93 18 05 	sts	0x0518, r25
    130a:	77 9a       	sbi	0x0e, 7	; 14
    130c:	78 94       	sei
    130e:	80 e0       	ldi	r24, 0x00	; 0
    1310:	08 95       	ret

00001312 <spi_init>:
    1312:	b8 98       	cbi	0x17, 0	; 23
    1314:	c0 98       	cbi	0x18, 0	; 24
    1316:	bb 9a       	sbi	0x17, 3	; 23
    1318:	c3 9a       	sbi	0x18, 3	; 24
    131a:	80 e0       	ldi	r24, 0x00	; 0
    131c:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <spi_restart_transmission>
    1320:	08 95       	ret

00001322 <__vector_17>:
    1322:	1f 92       	push	r1
    1324:	0f 92       	push	r0
    1326:	0f b6       	in	r0, 0x3f	; 63
    1328:	0f 92       	push	r0
    132a:	0b b6       	in	r0, 0x3b	; 59
    132c:	0f 92       	push	r0
    132e:	11 24       	eor	r1, r1
    1330:	2f 93       	push	r18
    1332:	3f 93       	push	r19
    1334:	4f 93       	push	r20
    1336:	5f 93       	push	r21
    1338:	6f 93       	push	r22
    133a:	7f 93       	push	r23
    133c:	8f 93       	push	r24
    133e:	9f 93       	push	r25
    1340:	af 93       	push	r26
    1342:	bf 93       	push	r27
    1344:	ef 93       	push	r30
    1346:	ff 93       	push	r31
    1348:	9f b1       	in	r25, 0x0f	; 15
    134a:	20 91 1a 05 	lds	r18, 0x051A
    134e:	29 27       	eor	r18, r25
    1350:	20 93 1a 05 	sts	0x051A, r18
    1354:	80 91 19 05 	lds	r24, 0x0519
    1358:	88 23       	and	r24, r24
    135a:	b1 f4       	brne	.+44     	; 0x1388 <__vector_17+0x66>
    135c:	90 93 f8 04 	sts	0x04F8, r25
    1360:	9c 31       	cpi	r25, 0x1C	; 28
    1362:	30 f0       	brcs	.+12     	; 0x1370 <__vector_17+0x4e>
    1364:	10 92 fa 04 	sts	0x04FA, r1
    1368:	10 92 f8 04 	sts	0x04F8, r1
    136c:	91 e0       	ldi	r25, 0x01	; 1
    136e:	09 c0       	rjmp	.+18     	; 0x1382 <__vector_17+0x60>
    1370:	49 2f       	mov	r20, r25
    1372:	50 e0       	ldi	r21, 0x00	; 0
    1374:	20 91 fc 04 	lds	r18, 0x04FC
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	42 17       	cp	r20, r18
    137c:	53 07       	cpc	r21, r19
    137e:	fc f0       	brlt	.+62     	; 0x13be <__vector_17+0x9c>
    1380:	9f 5f       	subi	r25, 0xFF	; 255
    1382:	90 93 fc 04 	sts	0x04FC, r25
    1386:	1b c0       	rjmp	.+54     	; 0x13be <__vector_17+0x9c>
    1388:	48 2f       	mov	r20, r24
    138a:	50 e0       	ldi	r21, 0x00	; 0
    138c:	60 91 f8 04 	lds	r22, 0x04F8
    1390:	70 e0       	ldi	r23, 0x00	; 0
    1392:	64 17       	cp	r22, r20
    1394:	75 07       	cpc	r23, r21
    1396:	2c f0       	brlt	.+10     	; 0x13a2 <__vector_17+0x80>
    1398:	44 50       	subi	r20, 0x04	; 4
    139a:	5b 4f       	sbci	r21, 0xFB	; 251
    139c:	fa 01       	movw	r30, r20
    139e:	90 83       	st	Z, r25
    13a0:	0e c0       	rjmp	.+28     	; 0x13be <__vector_17+0x9c>
    13a2:	41 50       	subi	r20, 0x01	; 1
    13a4:	50 40       	sbci	r21, 0x00	; 0
    13a6:	46 17       	cp	r20, r22
    13a8:	57 07       	cpc	r21, r23
    13aa:	49 f4       	brne	.+18     	; 0x13be <__vector_17+0x9c>
    13ac:	22 23       	and	r18, r18
    13ae:	39 f0       	breq	.+14     	; 0x13be <__vector_17+0x9c>
    13b0:	90 91 f9 04 	lds	r25, 0x04F9
    13b4:	9f 5f       	subi	r25, 0xFF	; 255
    13b6:	90 93 f9 04 	sts	0x04F9, r25
    13ba:	10 92 f8 04 	sts	0x04F8, r1
    13be:	90 91 fa 04 	lds	r25, 0x04FA
    13c2:	89 17       	cp	r24, r25
    13c4:	50 f4       	brcc	.+20     	; 0x13da <__vector_17+0xb8>
    13c6:	e8 2f       	mov	r30, r24
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	e3 52       	subi	r30, 0x23	; 35
    13cc:	fb 4f       	sbci	r31, 0xFB	; 251
    13ce:	20 81       	ld	r18, Z
    13d0:	2f b9       	out	0x0f, r18	; 15
    13d2:	90 91 18 05 	lds	r25, 0x0518
    13d6:	92 27       	eor	r25, r18
    13d8:	11 c0       	rjmp	.+34     	; 0x13fc <__vector_17+0xda>
    13da:	89 17       	cp	r24, r25
    13dc:	31 f4       	brne	.+12     	; 0x13ea <__vector_17+0xc8>
    13de:	90 91 18 05 	lds	r25, 0x0518
    13e2:	9f b9       	out	0x0f, r25	; 15
    13e4:	10 92 18 05 	sts	0x0518, r1
    13e8:	0b c0       	rjmp	.+22     	; 0x1400 <__vector_17+0xde>
    13ea:	90 91 fc 04 	lds	r25, 0x04FC
    13ee:	89 17       	cp	r24, r25
    13f0:	58 f4       	brcc	.+22     	; 0x1408 <__vector_17+0xe6>
    13f2:	9f ef       	ldi	r25, 0xFF	; 255
    13f4:	9f b9       	out	0x0f, r25	; 15
    13f6:	90 91 18 05 	lds	r25, 0x0518
    13fa:	90 95       	com	r25
    13fc:	90 93 18 05 	sts	0x0518, r25
    1400:	8f 5f       	subi	r24, 0xFF	; 255
    1402:	80 93 19 05 	sts	0x0519, r24
    1406:	11 c0       	rjmp	.+34     	; 0x142a <__vector_17+0x108>
    1408:	b8 98       	cbi	0x17, 0	; 23
    140a:	c0 98       	cbi	0x18, 0	; 24
    140c:	1d b8       	out	0x0d, r1	; 13
    140e:	b8 98       	cbi	0x17, 0	; 23
    1410:	c0 98       	cbi	0x18, 0	; 24
    1412:	80 91 fb 04 	lds	r24, 0x04FB
    1416:	8f 5f       	subi	r24, 0xFF	; 255
    1418:	80 93 fb 04 	sts	0x04FB, r24
    141c:	78 94       	sei
    141e:	80 91 f8 04 	lds	r24, 0x04F8
    1422:	0e 94 77 11 	call	0x22ee	; 0x22ee <spi_finished_callback>
    1426:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <spi_restart_transmission>
    142a:	ff 91       	pop	r31
    142c:	ef 91       	pop	r30
    142e:	bf 91       	pop	r27
    1430:	af 91       	pop	r26
    1432:	9f 91       	pop	r25
    1434:	8f 91       	pop	r24
    1436:	7f 91       	pop	r23
    1438:	6f 91       	pop	r22
    143a:	5f 91       	pop	r21
    143c:	4f 91       	pop	r20
    143e:	3f 91       	pop	r19
    1440:	2f 91       	pop	r18
    1442:	0f 90       	pop	r0
    1444:	0b be       	out	0x3b, r0	; 59
    1446:	0f 90       	pop	r0
    1448:	0f be       	out	0x3f, r0	; 63
    144a:	0f 90       	pop	r0
    144c:	1f 90       	pop	r1
    144e:	18 95       	reti

00001450 <gfx_get_x>:
    1450:	80 91 1e 05 	lds	r24, 0x051E
    1454:	08 95       	ret

00001456 <gfx_get_y>:
    1456:	80 91 27 05 	lds	r24, 0x0527
    145a:	08 95       	ret

0000145c <gfx_draw_mode>:
    145c:	80 93 1b 05 	sts	0x051B, r24
    1460:	08 95       	ret

00001462 <gfx_char_width>:
    1462:	98 2f       	mov	r25, r24
    1464:	90 52       	subi	r25, 0x20	; 32
    1466:	90 36       	cpi	r25, 0x60	; 96
    1468:	08 f0       	brcs	.+2      	; 0x146c <gfx_char_width+0xa>
    146a:	80 e8       	ldi	r24, 0x80	; 128
    146c:	80 52       	subi	r24, 0x20	; 32
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	fc 01       	movw	r30, r24
    1472:	ee 0f       	add	r30, r30
    1474:	ff 1f       	adc	r31, r31
    1476:	e8 0f       	add	r30, r24
    1478:	f9 1f       	adc	r31, r25
    147a:	ee 0f       	add	r30, r30
    147c:	ff 1f       	adc	r31, r31
    147e:	e0 50       	subi	r30, 0x00	; 0
    1480:	ff 4f       	sbci	r31, 0xFF	; 255
    1482:	90 81       	ld	r25, Z
    1484:	80 91 1d 05 	lds	r24, 0x051D
    1488:	88 23       	and	r24, r24
    148a:	09 f4       	brne	.+2      	; 0x148e <gfx_char_width+0x2c>
    148c:	9f e1       	ldi	r25, 0x1F	; 31
    148e:	80 e0       	ldi	r24, 0x00	; 0
    1490:	20 e0       	ldi	r18, 0x00	; 0
    1492:	90 fd       	sbrc	r25, 0
    1494:	8f 5f       	subi	r24, 0xFF	; 255
    1496:	2f 5f       	subi	r18, 0xFF	; 255
    1498:	25 30       	cpi	r18, 0x05	; 5
    149a:	11 f0       	breq	.+4      	; 0x14a0 <gfx_char_width+0x3e>
    149c:	96 95       	lsr	r25
    149e:	f9 cf       	rjmp	.-14     	; 0x1492 <gfx_char_width+0x30>
    14a0:	08 95       	ret

000014a2 <gfx_text_width>:
    14a2:	1f 93       	push	r17
    14a4:	cf 93       	push	r28
    14a6:	df 93       	push	r29
    14a8:	ec 01       	movw	r28, r24
    14aa:	10 e0       	ldi	r17, 0x00	; 0
    14ac:	05 c0       	rjmp	.+10     	; 0x14b8 <gfx_text_width+0x16>
    14ae:	21 96       	adiw	r28, 0x01	; 1
    14b0:	0e 94 31 0a 	call	0x1462	; 0x1462 <gfx_char_width>
    14b4:	8f 5f       	subi	r24, 0xFF	; 255
    14b6:	18 0f       	add	r17, r24
    14b8:	88 81       	ld	r24, Y
    14ba:	88 23       	and	r24, r24
    14bc:	c1 f7       	brne	.-16     	; 0x14ae <gfx_text_width+0xc>
    14be:	81 2f       	mov	r24, r17
    14c0:	df 91       	pop	r29
    14c2:	cf 91       	pop	r28
    14c4:	1f 91       	pop	r17
    14c6:	08 95       	ret

000014c8 <gfx_text_width_P>:
    14c8:	1f 93       	push	r17
    14ca:	cf 93       	push	r28
    14cc:	df 93       	push	r29
    14ce:	ec 01       	movw	r28, r24
    14d0:	10 e0       	ldi	r17, 0x00	; 0
    14d2:	07 c0       	rjmp	.+14     	; 0x14e2 <gfx_text_width_P+0x1a>
    14d4:	21 96       	adiw	r28, 0x01	; 1
    14d6:	f9 01       	movw	r30, r18
    14d8:	84 91       	lpm	r24, Z
    14da:	0e 94 31 0a 	call	0x1462	; 0x1462 <gfx_char_width>
    14de:	8f 5f       	subi	r24, 0xFF	; 255
    14e0:	18 0f       	add	r17, r24
    14e2:	9e 01       	movw	r18, r28
    14e4:	fe 01       	movw	r30, r28
    14e6:	94 91       	lpm	r25, Z
    14e8:	99 23       	and	r25, r25
    14ea:	a1 f7       	brne	.-24     	; 0x14d4 <gfx_text_width_P+0xc>
    14ec:	81 2f       	mov	r24, r17
    14ee:	df 91       	pop	r29
    14f0:	cf 91       	pop	r28
    14f2:	1f 91       	pop	r17
    14f4:	08 95       	ret

000014f6 <gfx_set_proportional>:
    14f6:	80 93 1d 05 	sts	0x051D, r24
    14fa:	08 95       	ret

000014fc <gfx_get_proportional>:
    14fc:	80 91 1d 05 	lds	r24, 0x051D
    1500:	08 95       	ret

00001502 <gfx_term_goto>:
    1502:	86 31       	cpi	r24, 0x16	; 22
    1504:	30 f4       	brcc	.+12     	; 0x1512 <gfx_term_goto+0x10>
    1506:	68 30       	cpi	r22, 0x08	; 8
    1508:	20 f4       	brcc	.+8      	; 0x1512 <gfx_term_goto+0x10>
    150a:	60 93 1c 05 	sts	0x051C, r22
    150e:	80 93 28 05 	sts	0x0528, r24
    1512:	08 95       	ret

00001514 <gfx_store_disp_tile>:
    1514:	0f 93       	push	r16
    1516:	1f 93       	push	r17
    1518:	df 93       	push	r29
    151a:	cf 93       	push	r28
    151c:	0f 92       	push	r0
    151e:	cd b7       	in	r28, 0x3d	; 61
    1520:	de b7       	in	r29, 0x3e	; 62
    1522:	18 2f       	mov	r17, r24
    1524:	68 54       	subi	r22, 0x48	; 72
    1526:	88 30       	cpi	r24, 0x08	; 8
    1528:	18 f5       	brcc	.+70     	; 0x1570 <gfx_store_disp_tile+0x5c>
    152a:	80 e0       	ldi	r24, 0x00	; 0
    152c:	69 83       	std	Y+1, r22	; 0x01
    152e:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <display_wait>
    1532:	80 e0       	ldi	r24, 0x00	; 0
    1534:	69 81       	ldd	r22, Y+1	; 0x01
    1536:	0e 94 66 08 	call	0x10cc	; 0x10cc <display_write>
    153a:	80 e0       	ldi	r24, 0x00	; 0
    153c:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <display_wait>
    1540:	61 2f       	mov	r22, r17
    1542:	66 0f       	add	r22, r22
    1544:	66 0f       	add	r22, r22
    1546:	66 0f       	add	r22, r22
    1548:	60 5c       	subi	r22, 0xC0	; 192
    154a:	80 e0       	ldi	r24, 0x00	; 0
    154c:	0e 94 66 08 	call	0x10cc	; 0x10cc <display_write>
    1550:	0f e1       	ldi	r16, 0x1F	; 31
    1552:	15 e0       	ldi	r17, 0x05	; 5
    1554:	82 e0       	ldi	r24, 0x02	; 2
    1556:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <display_wait>
    155a:	82 e0       	ldi	r24, 0x02	; 2
    155c:	f8 01       	movw	r30, r16
    155e:	61 91       	ld	r22, Z+
    1560:	8f 01       	movw	r16, r30
    1562:	0e 94 66 08 	call	0x10cc	; 0x10cc <display_write>
    1566:	f5 e0       	ldi	r31, 0x05	; 5
    1568:	07 32       	cpi	r16, 0x27	; 39
    156a:	1f 07       	cpc	r17, r31
    156c:	99 f7       	brne	.-26     	; 0x1554 <gfx_store_disp_tile+0x40>
    156e:	23 c0       	rjmp	.+70     	; 0x15b6 <gfx_store_disp_tile+0xa2>
    1570:	18 50       	subi	r17, 0x08	; 8
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	69 83       	std	Y+1, r22	; 0x01
    1576:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <display_wait>
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	69 81       	ldd	r22, Y+1	; 0x01
    157e:	0e 94 66 08 	call	0x10cc	; 0x10cc <display_write>
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <display_wait>
    1588:	61 2f       	mov	r22, r17
    158a:	66 0f       	add	r22, r22
    158c:	66 0f       	add	r22, r22
    158e:	66 0f       	add	r22, r22
    1590:	60 5c       	subi	r22, 0xC0	; 192
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	0e 94 66 08 	call	0x10cc	; 0x10cc <display_write>
    1598:	0f e1       	ldi	r16, 0x1F	; 31
    159a:	15 e0       	ldi	r17, 0x05	; 5
    159c:	83 e0       	ldi	r24, 0x03	; 3
    159e:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <display_wait>
    15a2:	83 e0       	ldi	r24, 0x03	; 3
    15a4:	f8 01       	movw	r30, r16
    15a6:	61 91       	ld	r22, Z+
    15a8:	8f 01       	movw	r16, r30
    15aa:	0e 94 66 08 	call	0x10cc	; 0x10cc <display_write>
    15ae:	f5 e0       	ldi	r31, 0x05	; 5
    15b0:	07 32       	cpi	r16, 0x27	; 39
    15b2:	1f 07       	cpc	r17, r31
    15b4:	99 f7       	brne	.-26     	; 0x159c <gfx_store_disp_tile+0x88>
    15b6:	0f 90       	pop	r0
    15b8:	cf 91       	pop	r28
    15ba:	df 91       	pop	r29
    15bc:	1f 91       	pop	r17
    15be:	0f 91       	pop	r16
    15c0:	08 95       	ret

000015c2 <gfx_fill>:
    15c2:	ff 92       	push	r15
    15c4:	0f 93       	push	r16
    15c6:	1f 93       	push	r17
    15c8:	f8 2e       	mov	r15, r24
    15ca:	18 eb       	ldi	r17, 0xB8	; 184
    15cc:	80 e0       	ldi	r24, 0x00	; 0
    15ce:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <display_wait>
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <display_wait>
    15d8:	80 e0       	ldi	r24, 0x00	; 0
    15da:	61 2f       	mov	r22, r17
    15dc:	0e 94 66 08 	call	0x10cc	; 0x10cc <display_write>
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	61 2f       	mov	r22, r17
    15e4:	0e 94 66 08 	call	0x10cc	; 0x10cc <display_write>
    15e8:	00 e0       	ldi	r16, 0x00	; 0
    15ea:	82 e0       	ldi	r24, 0x02	; 2
    15ec:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <display_wait>
    15f0:	83 e0       	ldi	r24, 0x03	; 3
    15f2:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <display_wait>
    15f6:	82 e0       	ldi	r24, 0x02	; 2
    15f8:	6f 2d       	mov	r22, r15
    15fa:	0e 94 66 08 	call	0x10cc	; 0x10cc <display_write>
    15fe:	83 e0       	ldi	r24, 0x03	; 3
    1600:	6f 2d       	mov	r22, r15
    1602:	0e 94 66 08 	call	0x10cc	; 0x10cc <display_write>
    1606:	0f 5f       	subi	r16, 0xFF	; 255
    1608:	00 34       	cpi	r16, 0x40	; 64
    160a:	79 f7       	brne	.-34     	; 0x15ea <gfx_fill+0x28>
    160c:	1f 5f       	subi	r17, 0xFF	; 255
    160e:	10 3c       	cpi	r17, 0xC0	; 192
    1610:	e9 f6       	brne	.-70     	; 0x15cc <gfx_fill+0xa>
    1612:	80 e0       	ldi	r24, 0x00	; 0
    1614:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <display_wait>
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <display_wait>
    161e:	80 e0       	ldi	r24, 0x00	; 0
    1620:	68 eb       	ldi	r22, 0xB8	; 184
    1622:	0e 94 66 08 	call	0x10cc	; 0x10cc <display_write>
    1626:	81 e0       	ldi	r24, 0x01	; 1
    1628:	68 eb       	ldi	r22, 0xB8	; 184
    162a:	0e 94 66 08 	call	0x10cc	; 0x10cc <display_write>
    162e:	1f 91       	pop	r17
    1630:	0f 91       	pop	r16
    1632:	ff 90       	pop	r15
    1634:	08 95       	ret

00001636 <gfx_term_clear>:
    1636:	80 e0       	ldi	r24, 0x00	; 0
    1638:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <gfx_fill>
    163c:	10 92 1c 05 	sts	0x051C, r1
    1640:	10 92 28 05 	sts	0x0528, r1
    1644:	08 95       	ret

00001646 <gfx_init>:
    1646:	80 e0       	ldi	r24, 0x00	; 0
    1648:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <display_wait>
    164c:	80 e0       	ldi	r24, 0x00	; 0
    164e:	6f e3       	ldi	r22, 0x3F	; 63
    1650:	0e 94 66 08 	call	0x10cc	; 0x10cc <display_write>
    1654:	80 e0       	ldi	r24, 0x00	; 0
    1656:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <display_wait>
    165a:	80 e0       	ldi	r24, 0x00	; 0
    165c:	60 ec       	ldi	r22, 0xC0	; 192
    165e:	0e 94 66 08 	call	0x10cc	; 0x10cc <display_write>
    1662:	80 e0       	ldi	r24, 0x00	; 0
    1664:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <display_wait>
    1668:	80 e0       	ldi	r24, 0x00	; 0
    166a:	60 e4       	ldi	r22, 0x40	; 64
    166c:	0e 94 66 08 	call	0x10cc	; 0x10cc <display_write>
    1670:	80 e0       	ldi	r24, 0x00	; 0
    1672:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <display_wait>
    1676:	80 e0       	ldi	r24, 0x00	; 0
    1678:	68 eb       	ldi	r22, 0xB8	; 184
    167a:	0e 94 66 08 	call	0x10cc	; 0x10cc <display_write>
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <display_wait>
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	6f e3       	ldi	r22, 0x3F	; 63
    1688:	0e 94 66 08 	call	0x10cc	; 0x10cc <display_write>
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <display_wait>
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	60 ec       	ldi	r22, 0xC0	; 192
    1696:	0e 94 66 08 	call	0x10cc	; 0x10cc <display_write>
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <display_wait>
    16a0:	81 e0       	ldi	r24, 0x01	; 1
    16a2:	60 e4       	ldi	r22, 0x40	; 64
    16a4:	0e 94 66 08 	call	0x10cc	; 0x10cc <display_write>
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <display_wait>
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    16b0:	68 eb       	ldi	r22, 0xB8	; 184
    16b2:	0e 94 66 08 	call	0x10cc	; 0x10cc <display_write>
    16b6:	80 e0       	ldi	r24, 0x00	; 0
    16b8:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <gfx_fill>
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	80 93 1b 05 	sts	0x051B, r24
    16c2:	08 95       	ret

000016c4 <gfx_move>:
    16c4:	0f 93       	push	r16
    16c6:	1f 93       	push	r17
    16c8:	18 2f       	mov	r17, r24
    16ca:	06 2f       	mov	r16, r22
    16cc:	80 93 1e 05 	sts	0x051E, r24
    16d0:	60 93 27 05 	sts	0x0527, r22
    16d4:	80 e0       	ldi	r24, 0x00	; 0
    16d6:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <display_wait>
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <display_wait>
    16e0:	06 95       	lsr	r16
    16e2:	06 95       	lsr	r16
    16e4:	06 95       	lsr	r16
    16e6:	08 54       	subi	r16, 0x48	; 72
    16e8:	80 e0       	ldi	r24, 0x00	; 0
    16ea:	60 2f       	mov	r22, r16
    16ec:	0e 94 66 08 	call	0x10cc	; 0x10cc <display_write>
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	60 2f       	mov	r22, r16
    16f4:	0e 94 66 08 	call	0x10cc	; 0x10cc <display_write>
    16f8:	80 e0       	ldi	r24, 0x00	; 0
    16fa:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <display_wait>
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <display_wait>
    1704:	11 34       	cpi	r17, 0x41	; 65
    1706:	38 f0       	brcs	.+14     	; 0x1716 <gfx_move+0x52>
    1708:	80 e0       	ldi	r24, 0x00	; 0
    170a:	60 e4       	ldi	r22, 0x40	; 64
    170c:	0e 94 66 08 	call	0x10cc	; 0x10cc <display_write>
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	61 2f       	mov	r22, r17
    1714:	07 c0       	rjmp	.+14     	; 0x1724 <gfx_move+0x60>
    1716:	61 2f       	mov	r22, r17
    1718:	60 5c       	subi	r22, 0xC0	; 192
    171a:	80 e0       	ldi	r24, 0x00	; 0
    171c:	0e 94 66 08 	call	0x10cc	; 0x10cc <display_write>
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	60 e4       	ldi	r22, 0x40	; 64
    1724:	0e 94 66 08 	call	0x10cc	; 0x10cc <display_write>
    1728:	1f 91       	pop	r17
    172a:	0f 91       	pop	r16
    172c:	08 95       	ret

0000172e <gfx_term_scroll>:
    172e:	ef 92       	push	r14
    1730:	ff 92       	push	r15
    1732:	0f 93       	push	r16
    1734:	1f 93       	push	r17
    1736:	cf 93       	push	r28
    1738:	df 93       	push	r29
    173a:	19 eb       	ldi	r17, 0xB9	; 185
    173c:	47 c0       	rjmp	.+142    	; 0x17cc <gfx_term_scroll+0x9e>
    173e:	08 30       	cpi	r16, 0x08	; 8
    1740:	e8 f4       	brcc	.+58     	; 0x177c <gfx_term_scroll+0x4e>
    1742:	80 e0       	ldi	r24, 0x00	; 0
    1744:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <display_wait>
    1748:	80 e0       	ldi	r24, 0x00	; 0
    174a:	61 2f       	mov	r22, r17
    174c:	0e 94 66 08 	call	0x10cc	; 0x10cc <display_write>
    1750:	80 e0       	ldi	r24, 0x00	; 0
    1752:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <display_wait>
    1756:	6f 2d       	mov	r22, r15
    1758:	60 5c       	subi	r22, 0xC0	; 192
    175a:	80 e0       	ldi	r24, 0x00	; 0
    175c:	0e 94 66 08 	call	0x10cc	; 0x10cc <display_write>
    1760:	82 e0       	ldi	r24, 0x02	; 2
    1762:	0e 94 a9 08 	call	0x1152	; 0x1152 <display_read>
    1766:	cf e1       	ldi	r28, 0x1F	; 31
    1768:	d5 e0       	ldi	r29, 0x05	; 5
    176a:	82 e0       	ldi	r24, 0x02	; 2
    176c:	0e 94 a9 08 	call	0x1152	; 0x1152 <display_read>
    1770:	89 93       	st	Y+, r24
    1772:	85 e0       	ldi	r24, 0x05	; 5
    1774:	c7 32       	cpi	r28, 0x27	; 39
    1776:	d8 07       	cpc	r29, r24
    1778:	c1 f7       	brne	.-16     	; 0x176a <gfx_term_scroll+0x3c>
    177a:	1b c0       	rjmp	.+54     	; 0x17b2 <gfx_term_scroll+0x84>
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <display_wait>
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	61 2f       	mov	r22, r17
    1786:	0e 94 66 08 	call	0x10cc	; 0x10cc <display_write>
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <display_wait>
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	6f 2d       	mov	r22, r15
    1794:	0e 94 66 08 	call	0x10cc	; 0x10cc <display_write>
    1798:	83 e0       	ldi	r24, 0x03	; 3
    179a:	0e 94 a9 08 	call	0x1152	; 0x1152 <display_read>
    179e:	cf e1       	ldi	r28, 0x1F	; 31
    17a0:	d5 e0       	ldi	r29, 0x05	; 5
    17a2:	83 e0       	ldi	r24, 0x03	; 3
    17a4:	0e 94 a9 08 	call	0x1152	; 0x1152 <display_read>
    17a8:	89 93       	st	Y+, r24
    17aa:	85 e0       	ldi	r24, 0x05	; 5
    17ac:	c7 32       	cpi	r28, 0x27	; 39
    17ae:	d8 07       	cpc	r29, r24
    17b0:	c1 f7       	brne	.-16     	; 0x17a2 <gfx_term_scroll+0x74>
    17b2:	80 2f       	mov	r24, r16
    17b4:	6e 2d       	mov	r22, r14
    17b6:	0e 94 8a 0a 	call	0x1514	; 0x1514 <gfx_store_disp_tile>
    17ba:	0f 5f       	subi	r16, 0xFF	; 255
    17bc:	88 e0       	ldi	r24, 0x08	; 8
    17be:	f8 0e       	add	r15, r24
    17c0:	00 31       	cpi	r16, 0x10	; 16
    17c2:	09 f0       	breq	.+2      	; 0x17c6 <gfx_term_scroll+0x98>
    17c4:	bc cf       	rjmp	.-136    	; 0x173e <gfx_term_scroll+0x10>
    17c6:	1f 5f       	subi	r17, 0xFF	; 255
    17c8:	10 3c       	cpi	r17, 0xC0	; 192
    17ca:	31 f0       	breq	.+12     	; 0x17d8 <gfx_term_scroll+0xaa>
    17cc:	ff 24       	eor	r15, r15
    17ce:	00 e0       	ldi	r16, 0x00	; 0
    17d0:	37 e4       	ldi	r19, 0x47	; 71
    17d2:	e3 2e       	mov	r14, r19
    17d4:	e1 0e       	add	r14, r17
    17d6:	b3 cf       	rjmp	.-154    	; 0x173e <gfx_term_scroll+0x10>
    17d8:	ef e1       	ldi	r30, 0x1F	; 31
    17da:	f5 e0       	ldi	r31, 0x05	; 5
    17dc:	11 92       	st	Z+, r1
    17de:	85 e0       	ldi	r24, 0x05	; 5
    17e0:	e7 32       	cpi	r30, 0x27	; 39
    17e2:	f8 07       	cpc	r31, r24
    17e4:	d9 f7       	brne	.-10     	; 0x17dc <gfx_term_scroll+0xae>
    17e6:	10 e0       	ldi	r17, 0x00	; 0
    17e8:	81 2f       	mov	r24, r17
    17ea:	67 e0       	ldi	r22, 0x07	; 7
    17ec:	0e 94 8a 0a 	call	0x1514	; 0x1514 <gfx_store_disp_tile>
    17f0:	1f 5f       	subi	r17, 0xFF	; 255
    17f2:	10 31       	cpi	r17, 0x10	; 16
    17f4:	c9 f7       	brne	.-14     	; 0x17e8 <gfx_term_scroll+0xba>
    17f6:	80 91 1c 05 	lds	r24, 0x051C
    17fa:	88 23       	and	r24, r24
    17fc:	19 f0       	breq	.+6      	; 0x1804 <gfx_term_scroll+0xd6>
    17fe:	81 50       	subi	r24, 0x01	; 1
    1800:	80 93 1c 05 	sts	0x051C, r24
    1804:	df 91       	pop	r29
    1806:	cf 91       	pop	r28
    1808:	1f 91       	pop	r17
    180a:	0f 91       	pop	r16
    180c:	ff 90       	pop	r15
    180e:	ef 90       	pop	r14
    1810:	08 95       	ret

00001812 <gfx_display_write2>:
    1812:	ef 92       	push	r14
    1814:	ff 92       	push	r15
    1816:	0f 93       	push	r16
    1818:	1f 93       	push	r17
    181a:	e8 2e       	mov	r14, r24
    181c:	16 2f       	mov	r17, r22
    181e:	80 91 1e 05 	lds	r24, 0x051E
    1822:	87 fd       	sbrc	r24, 7
    1824:	39 c0       	rjmp	.+114    	; 0x1898 <gfx_display_write2+0x86>
    1826:	00 e0       	ldi	r16, 0x00	; 0
    1828:	80 34       	cpi	r24, 0x40	; 64
    182a:	08 f0       	brcs	.+2      	; 0x182e <gfx_display_write2+0x1c>
    182c:	01 e0       	ldi	r16, 0x01	; 1
    182e:	80 2f       	mov	r24, r16
    1830:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <display_wait>
    1834:	42 e0       	ldi	r20, 0x02	; 2
    1836:	f4 2e       	mov	r15, r20
    1838:	f0 0e       	add	r15, r16
    183a:	8f 2d       	mov	r24, r15
    183c:	0e 94 a9 08 	call	0x1152	; 0x1152 <display_read>
    1840:	8f 2d       	mov	r24, r15
    1842:	0e 94 a9 08 	call	0x1152	; 0x1152 <display_read>
    1846:	90 91 1b 05 	lds	r25, 0x051B
    184a:	92 ff       	sbrs	r25, 2
    184c:	02 c0       	rjmp	.+4      	; 0x1852 <gfx_display_write2+0x40>
    184e:	e0 94       	com	r14
    1850:	9b 7f       	andi	r25, 0xFB	; 251
    1852:	e1 22       	and	r14, r17
    1854:	99 23       	and	r25, r25
    1856:	19 f4       	brne	.+6      	; 0x185e <gfx_display_write2+0x4c>
    1858:	1e 2d       	mov	r17, r14
    185a:	18 2b       	or	r17, r24
    185c:	08 c0       	rjmp	.+16     	; 0x186e <gfx_display_write2+0x5c>
    185e:	91 30       	cpi	r25, 0x01	; 1
    1860:	21 f4       	brne	.+8      	; 0x186a <gfx_display_write2+0x58>
    1862:	10 95       	com	r17
    1864:	18 23       	and	r17, r24
    1866:	1e 29       	or	r17, r14
    1868:	02 c0       	rjmp	.+4      	; 0x186e <gfx_display_write2+0x5c>
    186a:	1e 2d       	mov	r17, r14
    186c:	18 27       	eor	r17, r24
    186e:	80 2f       	mov	r24, r16
    1870:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <display_wait>
    1874:	60 91 1e 05 	lds	r22, 0x051E
    1878:	60 64       	ori	r22, 0x40	; 64
    187a:	80 2f       	mov	r24, r16
    187c:	0e 94 66 08 	call	0x10cc	; 0x10cc <display_write>
    1880:	80 2f       	mov	r24, r16
    1882:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <display_wait>
    1886:	8f 2d       	mov	r24, r15
    1888:	61 2f       	mov	r22, r17
    188a:	0e 94 66 08 	call	0x10cc	; 0x10cc <display_write>
    188e:	80 91 1e 05 	lds	r24, 0x051E
    1892:	8f 5f       	subi	r24, 0xFF	; 255
    1894:	80 93 1e 05 	sts	0x051E, r24
    1898:	1f 91       	pop	r17
    189a:	0f 91       	pop	r16
    189c:	ff 90       	pop	r15
    189e:	ef 90       	pop	r14
    18a0:	08 95       	ret

000018a2 <gfx_pixel>:
    18a2:	90 91 27 05 	lds	r25, 0x0527
    18a6:	97 70       	andi	r25, 0x07	; 7
    18a8:	61 e0       	ldi	r22, 0x01	; 1
    18aa:	70 e0       	ldi	r23, 0x00	; 0
    18ac:	02 c0       	rjmp	.+4      	; 0x18b2 <gfx_pixel+0x10>
    18ae:	66 0f       	add	r22, r22
    18b0:	77 1f       	adc	r23, r23
    18b2:	9a 95       	dec	r25
    18b4:	e2 f7       	brpl	.-8      	; 0x18ae <gfx_pixel+0xc>
    18b6:	88 23       	and	r24, r24
    18b8:	11 f0       	breq	.+4      	; 0x18be <gfx_pixel+0x1c>
    18ba:	86 2f       	mov	r24, r22
    18bc:	02 c0       	rjmp	.+4      	; 0x18c2 <gfx_pixel+0x20>
    18be:	86 2f       	mov	r24, r22
    18c0:	60 e0       	ldi	r22, 0x00	; 0
    18c2:	0e 94 09 0c 	call	0x1812	; 0x1812 <gfx_display_write2>
    18c6:	08 95       	ret

000018c8 <gfx_draw_xbm_P>:
    18c8:	2f 92       	push	r2
    18ca:	3f 92       	push	r3
    18cc:	4f 92       	push	r4
    18ce:	5f 92       	push	r5
    18d0:	6f 92       	push	r6
    18d2:	7f 92       	push	r7
    18d4:	8f 92       	push	r8
    18d6:	9f 92       	push	r9
    18d8:	af 92       	push	r10
    18da:	bf 92       	push	r11
    18dc:	cf 92       	push	r12
    18de:	df 92       	push	r13
    18e0:	ef 92       	push	r14
    18e2:	ff 92       	push	r15
    18e4:	0f 93       	push	r16
    18e6:	1f 93       	push	r17
    18e8:	df 93       	push	r29
    18ea:	cf 93       	push	r28
    18ec:	00 d0       	rcall	.+0      	; 0x18ee <gfx_draw_xbm_P+0x26>
    18ee:	00 d0       	rcall	.+0      	; 0x18f0 <gfx_draw_xbm_P+0x28>
    18f0:	00 d0       	rcall	.+0      	; 0x18f2 <gfx_draw_xbm_P+0x2a>
    18f2:	cd b7       	in	r28, 0x3d	; 61
    18f4:	de b7       	in	r29, 0x3e	; 62
    18f6:	08 2f       	mov	r16, r24
    18f8:	16 2f       	mov	r17, r22
    18fa:	5a 83       	std	Y+2, r21	; 0x02
    18fc:	49 83       	std	Y+1, r20	; 0x01
    18fe:	60 90 1e 05 	lds	r6, 0x051E
    1902:	e0 90 27 05 	lds	r14, 0x0527
    1906:	8e 2d       	mov	r24, r14
    1908:	87 70       	andi	r24, 0x07	; 7
    190a:	2f ef       	ldi	r18, 0xFF	; 255
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	f2 2e       	mov	r15, r18
    1910:	01 c0       	rjmp	.+2      	; 0x1914 <gfx_draw_xbm_P+0x4c>
    1912:	ff 0c       	add	r15, r15
    1914:	8a 95       	dec	r24
    1916:	ea f7       	brpl	.-6      	; 0x1912 <gfx_draw_xbm_P+0x4a>
    1918:	80 2f       	mov	r24, r16
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	01 97       	sbiw	r24, 0x01	; 1
    191e:	68 e0       	ldi	r22, 0x08	; 8
    1920:	70 e0       	ldi	r23, 0x00	; 0
    1922:	0e 94 04 1a 	call	0x3408	; 0x3408 <__divmodhi4>
    1926:	6f 5f       	subi	r22, 0xFF	; 255
    1928:	a6 2e       	mov	r10, r22
    192a:	bb 24       	eor	r11, r11
    192c:	c5 01       	movw	r24, r10
    192e:	73 e0       	ldi	r23, 0x03	; 3
    1930:	88 0f       	add	r24, r24
    1932:	99 1f       	adc	r25, r25
    1934:	7a 95       	dec	r23
    1936:	e1 f7       	brne	.-8      	; 0x1930 <gfx_draw_xbm_P+0x68>
    1938:	44 24       	eor	r4, r4
    193a:	55 24       	eor	r5, r5
    193c:	48 1a       	sub	r4, r24
    193e:	59 0a       	sbc	r5, r25
    1940:	cc 24       	eor	r12, r12
    1942:	68 e0       	ldi	r22, 0x08	; 8
    1944:	76 2e       	mov	r7, r22
    1946:	5f ef       	ldi	r21, 0xFF	; 255
    1948:	85 2e       	mov	r8, r21
    194a:	91 2c       	mov	r9, r1
    194c:	bc 82       	std	Y+4, r11	; 0x04
    194e:	ab 82       	std	Y+3, r10	; 0x03
    1950:	71 c0       	rjmp	.+226    	; 0x1a34 <gfx_draw_xbm_P+0x16c>
    1952:	8e 2d       	mov	r24, r14
    1954:	87 70       	andi	r24, 0x07	; 7
    1956:	d7 2c       	mov	r13, r7
    1958:	d8 1a       	sub	r13, r24
    195a:	1d 15       	cp	r17, r13
    195c:	48 f4       	brcc	.+18     	; 0x1970 <gfx_draw_xbm_P+0xa8>
    195e:	8d 2d       	mov	r24, r13
    1960:	81 1b       	sub	r24, r17
    1962:	94 01       	movw	r18, r8
    1964:	02 c0       	rjmp	.+4      	; 0x196a <gfx_draw_xbm_P+0xa2>
    1966:	35 95       	asr	r19
    1968:	27 95       	ror	r18
    196a:	8a 95       	dec	r24
    196c:	e2 f7       	brpl	.-8      	; 0x1966 <gfx_draw_xbm_P+0x9e>
    196e:	f2 22       	and	r15, r18
    1970:	8d 2d       	mov	r24, r13
    1972:	8c 0d       	add	r24, r12
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	8a 9d       	mul	r24, r10
    1978:	10 01       	movw	r2, r0
    197a:	8b 9d       	mul	r24, r11
    197c:	30 0c       	add	r3, r0
    197e:	9a 9d       	mul	r25, r10
    1980:	30 0c       	add	r3, r0
    1982:	11 24       	eor	r1, r1
    1984:	80 e0       	ldi	r24, 0x00	; 0
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	9e 83       	std	Y+6, r25	; 0x06
    198a:	8d 83       	std	Y+5, r24	; 0x05
    198c:	43 c0       	rjmp	.+134    	; 0x1a14 <gfx_draw_xbm_P+0x14c>
    198e:	4d 81       	ldd	r20, Y+5	; 0x05
    1990:	5e 81       	ldd	r21, Y+6	; 0x06
    1992:	47 70       	andi	r20, 0x07	; 7
    1994:	50 70       	andi	r21, 0x00	; 0
    1996:	41 15       	cp	r20, r1
    1998:	51 05       	cpc	r21, r1
    199a:	71 f5       	brne	.+92     	; 0x19f8 <gfx_draw_xbm_P+0x130>
    199c:	e6 95       	lsr	r30
    199e:	e6 95       	lsr	r30
    19a0:	e6 95       	lsr	r30
    19a2:	c1 01       	movw	r24, r2
    19a4:	8e 0f       	add	r24, r30
    19a6:	91 1d       	adc	r25, r1
    19a8:	fc 01       	movw	r30, r24
    19aa:	a9 81       	ldd	r26, Y+1	; 0x01
    19ac:	ba 81       	ldd	r27, Y+2	; 0x02
    19ae:	ea 0f       	add	r30, r26
    19b0:	fb 1f       	adc	r31, r27
    19b2:	e4 0d       	add	r30, r4
    19b4:	f5 1d       	adc	r31, r5
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	6d 81       	ldd	r22, Y+5	; 0x05
    19bc:	7e 81       	ldd	r23, Y+6	; 0x06
    19be:	94 91       	lpm	r25, Z
    19c0:	af e1       	ldi	r26, 0x1F	; 31
    19c2:	b5 e0       	ldi	r27, 0x05	; 5
    19c4:	8c 91       	ld	r24, X
    19c6:	86 95       	lsr	r24
    19c8:	8c 93       	st	X, r24
    19ca:	90 ff       	sbrs	r25, 0
    19cc:	02 c0       	rjmp	.+4      	; 0x19d2 <gfx_draw_xbm_P+0x10a>
    19ce:	80 68       	ori	r24, 0x80	; 128
    19d0:	8c 93       	st	X, r24
    19d2:	11 96       	adiw	r26, 0x01	; 1
    19d4:	85 e0       	ldi	r24, 0x05	; 5
    19d6:	a7 32       	cpi	r26, 0x27	; 39
    19d8:	b8 07       	cpc	r27, r24
    19da:	11 f0       	breq	.+4      	; 0x19e0 <gfx_draw_xbm_P+0x118>
    19dc:	96 95       	lsr	r25
    19de:	f2 cf       	rjmp	.-28     	; 0x19c4 <gfx_draw_xbm_P+0xfc>
    19e0:	2f 5f       	subi	r18, 0xFF	; 255
    19e2:	3f 4f       	sbci	r19, 0xFF	; 255
    19e4:	28 30       	cpi	r18, 0x08	; 8
    19e6:	31 05       	cpc	r19, r1
    19e8:	29 f0       	breq	.+10     	; 0x19f4 <gfx_draw_xbm_P+0x12c>
    19ea:	ab 81       	ldd	r26, Y+3	; 0x03
    19ec:	bc 81       	ldd	r27, Y+4	; 0x04
    19ee:	ea 0f       	add	r30, r26
    19f0:	fb 1f       	adc	r31, r27
    19f2:	e5 cf       	rjmp	.-54     	; 0x19be <gfx_draw_xbm_P+0xf6>
    19f4:	7e 83       	std	Y+6, r23	; 0x06
    19f6:	6d 83       	std	Y+5, r22	; 0x05
    19f8:	41 5e       	subi	r20, 0xE1	; 225
    19fa:	5a 4f       	sbci	r21, 0xFA	; 250
    19fc:	fa 01       	movw	r30, r20
    19fe:	80 81       	ld	r24, Z
    1a00:	8f 21       	and	r24, r15
    1a02:	6f 2d       	mov	r22, r15
    1a04:	0e 94 09 0c 	call	0x1812	; 0x1812 <gfx_display_write2>
    1a08:	2d 81       	ldd	r18, Y+5	; 0x05
    1a0a:	3e 81       	ldd	r19, Y+6	; 0x06
    1a0c:	2f 5f       	subi	r18, 0xFF	; 255
    1a0e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a10:	3e 83       	std	Y+6, r19	; 0x06
    1a12:	2d 83       	std	Y+5, r18	; 0x05
    1a14:	ed 81       	ldd	r30, Y+5	; 0x05
    1a16:	e0 17       	cp	r30, r16
    1a18:	08 f4       	brcc	.+2      	; 0x1a1c <gfx_draw_xbm_P+0x154>
    1a1a:	b9 cf       	rjmp	.-142    	; 0x198e <gfx_draw_xbm_P+0xc6>
    1a1c:	1d 15       	cp	r17, r13
    1a1e:	08 f4       	brcc	.+2      	; 0x1a22 <gfx_draw_xbm_P+0x15a>
    1a20:	d1 2e       	mov	r13, r17
    1a22:	1d 19       	sub	r17, r13
    1a24:	ed 0c       	add	r14, r13
    1a26:	cd 0c       	add	r12, r13
    1a28:	86 2d       	mov	r24, r6
    1a2a:	6e 2d       	mov	r22, r14
    1a2c:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <gfx_move>
    1a30:	ff 24       	eor	r15, r15
    1a32:	fa 94       	dec	r15
    1a34:	11 23       	and	r17, r17
    1a36:	09 f0       	breq	.+2      	; 0x1a3a <gfx_draw_xbm_P+0x172>
    1a38:	8c cf       	rjmp	.-232    	; 0x1952 <gfx_draw_xbm_P+0x8a>
    1a3a:	26 96       	adiw	r28, 0x06	; 6
    1a3c:	0f b6       	in	r0, 0x3f	; 63
    1a3e:	f8 94       	cli
    1a40:	de bf       	out	0x3e, r29	; 62
    1a42:	0f be       	out	0x3f, r0	; 63
    1a44:	cd bf       	out	0x3d, r28	; 61
    1a46:	cf 91       	pop	r28
    1a48:	df 91       	pop	r29
    1a4a:	1f 91       	pop	r17
    1a4c:	0f 91       	pop	r16
    1a4e:	ff 90       	pop	r15
    1a50:	ef 90       	pop	r14
    1a52:	df 90       	pop	r13
    1a54:	cf 90       	pop	r12
    1a56:	bf 90       	pop	r11
    1a58:	af 90       	pop	r10
    1a5a:	9f 90       	pop	r9
    1a5c:	8f 90       	pop	r8
    1a5e:	7f 90       	pop	r7
    1a60:	6f 90       	pop	r6
    1a62:	5f 90       	pop	r5
    1a64:	4f 90       	pop	r4
    1a66:	3f 90       	pop	r3
    1a68:	2f 90       	pop	r2
    1a6a:	08 95       	ret

00001a6c <gfx_draw_xbm>:
    1a6c:	2f 92       	push	r2
    1a6e:	3f 92       	push	r3
    1a70:	4f 92       	push	r4
    1a72:	5f 92       	push	r5
    1a74:	6f 92       	push	r6
    1a76:	7f 92       	push	r7
    1a78:	8f 92       	push	r8
    1a7a:	9f 92       	push	r9
    1a7c:	af 92       	push	r10
    1a7e:	bf 92       	push	r11
    1a80:	cf 92       	push	r12
    1a82:	df 92       	push	r13
    1a84:	ef 92       	push	r14
    1a86:	ff 92       	push	r15
    1a88:	0f 93       	push	r16
    1a8a:	1f 93       	push	r17
    1a8c:	df 93       	push	r29
    1a8e:	cf 93       	push	r28
    1a90:	00 d0       	rcall	.+0      	; 0x1a92 <gfx_draw_xbm+0x26>
    1a92:	00 d0       	rcall	.+0      	; 0x1a94 <gfx_draw_xbm+0x28>
    1a94:	00 d0       	rcall	.+0      	; 0x1a96 <gfx_draw_xbm+0x2a>
    1a96:	cd b7       	in	r28, 0x3d	; 61
    1a98:	de b7       	in	r29, 0x3e	; 62
    1a9a:	08 2f       	mov	r16, r24
    1a9c:	16 2f       	mov	r17, r22
    1a9e:	5a 83       	std	Y+2, r21	; 0x02
    1aa0:	49 83       	std	Y+1, r20	; 0x01
    1aa2:	60 90 1e 05 	lds	r6, 0x051E
    1aa6:	e0 90 27 05 	lds	r14, 0x0527
    1aaa:	8e 2d       	mov	r24, r14
    1aac:	87 70       	andi	r24, 0x07	; 7
    1aae:	2f ef       	ldi	r18, 0xFF	; 255
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	f2 2e       	mov	r15, r18
    1ab4:	01 c0       	rjmp	.+2      	; 0x1ab8 <gfx_draw_xbm+0x4c>
    1ab6:	ff 0c       	add	r15, r15
    1ab8:	8a 95       	dec	r24
    1aba:	ea f7       	brpl	.-6      	; 0x1ab6 <gfx_draw_xbm+0x4a>
    1abc:	80 2f       	mov	r24, r16
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	01 97       	sbiw	r24, 0x01	; 1
    1ac2:	68 e0       	ldi	r22, 0x08	; 8
    1ac4:	70 e0       	ldi	r23, 0x00	; 0
    1ac6:	0e 94 04 1a 	call	0x3408	; 0x3408 <__divmodhi4>
    1aca:	6f 5f       	subi	r22, 0xFF	; 255
    1acc:	a6 2e       	mov	r10, r22
    1ace:	bb 24       	eor	r11, r11
    1ad0:	c5 01       	movw	r24, r10
    1ad2:	a3 e0       	ldi	r26, 0x03	; 3
    1ad4:	88 0f       	add	r24, r24
    1ad6:	99 1f       	adc	r25, r25
    1ad8:	aa 95       	dec	r26
    1ada:	e1 f7       	brne	.-8      	; 0x1ad4 <gfx_draw_xbm+0x68>
    1adc:	44 24       	eor	r4, r4
    1ade:	55 24       	eor	r5, r5
    1ae0:	48 1a       	sub	r4, r24
    1ae2:	59 0a       	sbc	r5, r25
    1ae4:	cc 24       	eor	r12, r12
    1ae6:	f8 e0       	ldi	r31, 0x08	; 8
    1ae8:	7f 2e       	mov	r7, r31
    1aea:	ef ef       	ldi	r30, 0xFF	; 255
    1aec:	8e 2e       	mov	r8, r30
    1aee:	91 2c       	mov	r9, r1
    1af0:	bc 82       	std	Y+4, r11	; 0x04
    1af2:	ab 82       	std	Y+3, r10	; 0x03
    1af4:	71 c0       	rjmp	.+226    	; 0x1bd8 <gfx_draw_xbm+0x16c>
    1af6:	8e 2d       	mov	r24, r14
    1af8:	87 70       	andi	r24, 0x07	; 7
    1afa:	d7 2c       	mov	r13, r7
    1afc:	d8 1a       	sub	r13, r24
    1afe:	1d 15       	cp	r17, r13
    1b00:	48 f4       	brcc	.+18     	; 0x1b14 <gfx_draw_xbm+0xa8>
    1b02:	8d 2d       	mov	r24, r13
    1b04:	81 1b       	sub	r24, r17
    1b06:	94 01       	movw	r18, r8
    1b08:	02 c0       	rjmp	.+4      	; 0x1b0e <gfx_draw_xbm+0xa2>
    1b0a:	35 95       	asr	r19
    1b0c:	27 95       	ror	r18
    1b0e:	8a 95       	dec	r24
    1b10:	e2 f7       	brpl	.-8      	; 0x1b0a <gfx_draw_xbm+0x9e>
    1b12:	f2 22       	and	r15, r18
    1b14:	8d 2d       	mov	r24, r13
    1b16:	8c 0d       	add	r24, r12
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	8a 9d       	mul	r24, r10
    1b1c:	10 01       	movw	r2, r0
    1b1e:	8b 9d       	mul	r24, r11
    1b20:	30 0c       	add	r3, r0
    1b22:	9a 9d       	mul	r25, r10
    1b24:	30 0c       	add	r3, r0
    1b26:	11 24       	eor	r1, r1
    1b28:	80 e0       	ldi	r24, 0x00	; 0
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	9e 83       	std	Y+6, r25	; 0x06
    1b2e:	8d 83       	std	Y+5, r24	; 0x05
    1b30:	43 c0       	rjmp	.+134    	; 0x1bb8 <gfx_draw_xbm+0x14c>
    1b32:	4d 81       	ldd	r20, Y+5	; 0x05
    1b34:	5e 81       	ldd	r21, Y+6	; 0x06
    1b36:	47 70       	andi	r20, 0x07	; 7
    1b38:	50 70       	andi	r21, 0x00	; 0
    1b3a:	41 15       	cp	r20, r1
    1b3c:	51 05       	cpc	r21, r1
    1b3e:	71 f5       	brne	.+92     	; 0x1b9c <gfx_draw_xbm+0x130>
    1b40:	e6 95       	lsr	r30
    1b42:	e6 95       	lsr	r30
    1b44:	e6 95       	lsr	r30
    1b46:	c1 01       	movw	r24, r2
    1b48:	8e 0f       	add	r24, r30
    1b4a:	91 1d       	adc	r25, r1
    1b4c:	fc 01       	movw	r30, r24
    1b4e:	a9 81       	ldd	r26, Y+1	; 0x01
    1b50:	ba 81       	ldd	r27, Y+2	; 0x02
    1b52:	ea 0f       	add	r30, r26
    1b54:	fb 1f       	adc	r31, r27
    1b56:	e4 0d       	add	r30, r4
    1b58:	f5 1d       	adc	r31, r5
    1b5a:	20 e0       	ldi	r18, 0x00	; 0
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	6d 81       	ldd	r22, Y+5	; 0x05
    1b60:	7e 81       	ldd	r23, Y+6	; 0x06
    1b62:	90 81       	ld	r25, Z
    1b64:	af e1       	ldi	r26, 0x1F	; 31
    1b66:	b5 e0       	ldi	r27, 0x05	; 5
    1b68:	8c 91       	ld	r24, X
    1b6a:	86 95       	lsr	r24
    1b6c:	8c 93       	st	X, r24
    1b6e:	90 ff       	sbrs	r25, 0
    1b70:	02 c0       	rjmp	.+4      	; 0x1b76 <gfx_draw_xbm+0x10a>
    1b72:	80 68       	ori	r24, 0x80	; 128
    1b74:	8c 93       	st	X, r24
    1b76:	11 96       	adiw	r26, 0x01	; 1
    1b78:	85 e0       	ldi	r24, 0x05	; 5
    1b7a:	a7 32       	cpi	r26, 0x27	; 39
    1b7c:	b8 07       	cpc	r27, r24
    1b7e:	11 f0       	breq	.+4      	; 0x1b84 <gfx_draw_xbm+0x118>
    1b80:	96 95       	lsr	r25
    1b82:	f2 cf       	rjmp	.-28     	; 0x1b68 <gfx_draw_xbm+0xfc>
    1b84:	2f 5f       	subi	r18, 0xFF	; 255
    1b86:	3f 4f       	sbci	r19, 0xFF	; 255
    1b88:	28 30       	cpi	r18, 0x08	; 8
    1b8a:	31 05       	cpc	r19, r1
    1b8c:	29 f0       	breq	.+10     	; 0x1b98 <gfx_draw_xbm+0x12c>
    1b8e:	ab 81       	ldd	r26, Y+3	; 0x03
    1b90:	bc 81       	ldd	r27, Y+4	; 0x04
    1b92:	ea 0f       	add	r30, r26
    1b94:	fb 1f       	adc	r31, r27
    1b96:	e5 cf       	rjmp	.-54     	; 0x1b62 <gfx_draw_xbm+0xf6>
    1b98:	7e 83       	std	Y+6, r23	; 0x06
    1b9a:	6d 83       	std	Y+5, r22	; 0x05
    1b9c:	41 5e       	subi	r20, 0xE1	; 225
    1b9e:	5a 4f       	sbci	r21, 0xFA	; 250
    1ba0:	fa 01       	movw	r30, r20
    1ba2:	80 81       	ld	r24, Z
    1ba4:	8f 21       	and	r24, r15
    1ba6:	6f 2d       	mov	r22, r15
    1ba8:	0e 94 09 0c 	call	0x1812	; 0x1812 <gfx_display_write2>
    1bac:	2d 81       	ldd	r18, Y+5	; 0x05
    1bae:	3e 81       	ldd	r19, Y+6	; 0x06
    1bb0:	2f 5f       	subi	r18, 0xFF	; 255
    1bb2:	3f 4f       	sbci	r19, 0xFF	; 255
    1bb4:	3e 83       	std	Y+6, r19	; 0x06
    1bb6:	2d 83       	std	Y+5, r18	; 0x05
    1bb8:	ed 81       	ldd	r30, Y+5	; 0x05
    1bba:	e0 17       	cp	r30, r16
    1bbc:	08 f4       	brcc	.+2      	; 0x1bc0 <gfx_draw_xbm+0x154>
    1bbe:	b9 cf       	rjmp	.-142    	; 0x1b32 <gfx_draw_xbm+0xc6>
    1bc0:	1d 15       	cp	r17, r13
    1bc2:	08 f4       	brcc	.+2      	; 0x1bc6 <gfx_draw_xbm+0x15a>
    1bc4:	d1 2e       	mov	r13, r17
    1bc6:	1d 19       	sub	r17, r13
    1bc8:	ed 0c       	add	r14, r13
    1bca:	cd 0c       	add	r12, r13
    1bcc:	86 2d       	mov	r24, r6
    1bce:	6e 2d       	mov	r22, r14
    1bd0:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <gfx_move>
    1bd4:	ff 24       	eor	r15, r15
    1bd6:	fa 94       	dec	r15
    1bd8:	11 23       	and	r17, r17
    1bda:	09 f0       	breq	.+2      	; 0x1bde <gfx_draw_xbm+0x172>
    1bdc:	8c cf       	rjmp	.-232    	; 0x1af6 <gfx_draw_xbm+0x8a>
    1bde:	26 96       	adiw	r28, 0x06	; 6
    1be0:	0f b6       	in	r0, 0x3f	; 63
    1be2:	f8 94       	cli
    1be4:	de bf       	out	0x3e, r29	; 62
    1be6:	0f be       	out	0x3f, r0	; 63
    1be8:	cd bf       	out	0x3d, r28	; 61
    1bea:	cf 91       	pop	r28
    1bec:	df 91       	pop	r29
    1bee:	1f 91       	pop	r17
    1bf0:	0f 91       	pop	r16
    1bf2:	ff 90       	pop	r15
    1bf4:	ef 90       	pop	r14
    1bf6:	df 90       	pop	r13
    1bf8:	cf 90       	pop	r12
    1bfa:	bf 90       	pop	r11
    1bfc:	af 90       	pop	r10
    1bfe:	9f 90       	pop	r9
    1c00:	8f 90       	pop	r8
    1c02:	7f 90       	pop	r7
    1c04:	6f 90       	pop	r6
    1c06:	5f 90       	pop	r5
    1c08:	4f 90       	pop	r4
    1c0a:	3f 90       	pop	r3
    1c0c:	2f 90       	pop	r2
    1c0e:	08 95       	ret

00001c10 <gfx_box>:
    1c10:	af 92       	push	r10
    1c12:	bf 92       	push	r11
    1c14:	cf 92       	push	r12
    1c16:	df 92       	push	r13
    1c18:	ef 92       	push	r14
    1c1a:	ff 92       	push	r15
    1c1c:	0f 93       	push	r16
    1c1e:	1f 93       	push	r17
    1c20:	cf 93       	push	r28
    1c22:	df 93       	push	r29
    1c24:	a8 2e       	mov	r10, r24
    1c26:	16 2f       	mov	r17, r22
    1c28:	b0 90 1e 05 	lds	r11, 0x051E
    1c2c:	f0 90 27 05 	lds	r15, 0x0527
    1c30:	8f 2d       	mov	r24, r15
    1c32:	87 70       	andi	r24, 0x07	; 7
    1c34:	2f ef       	ldi	r18, 0xFF	; 255
    1c36:	30 e0       	ldi	r19, 0x00	; 0
    1c38:	02 2f       	mov	r16, r18
    1c3a:	01 c0       	rjmp	.+2      	; 0x1c3e <gfx_box+0x2e>
    1c3c:	00 0f       	add	r16, r16
    1c3e:	8a 95       	dec	r24
    1c40:	ea f7       	brpl	.-6      	; 0x1c3c <gfx_box+0x2c>
    1c42:	b8 e0       	ldi	r27, 0x08	; 8
    1c44:	cb 2e       	mov	r12, r27
    1c46:	cf ef       	ldi	r28, 0xFF	; 255
    1c48:	d0 e0       	ldi	r29, 0x00	; 0
    1c4a:	22 c0       	rjmp	.+68     	; 0x1c90 <gfx_box+0x80>
    1c4c:	8f 2d       	mov	r24, r15
    1c4e:	87 70       	andi	r24, 0x07	; 7
    1c50:	ec 2c       	mov	r14, r12
    1c52:	e8 1a       	sub	r14, r24
    1c54:	1e 15       	cp	r17, r14
    1c56:	48 f4       	brcc	.+18     	; 0x1c6a <gfx_box+0x5a>
    1c58:	8e 2d       	mov	r24, r14
    1c5a:	81 1b       	sub	r24, r17
    1c5c:	9e 01       	movw	r18, r28
    1c5e:	02 c0       	rjmp	.+4      	; 0x1c64 <gfx_box+0x54>
    1c60:	35 95       	asr	r19
    1c62:	27 95       	ror	r18
    1c64:	8a 95       	dec	r24
    1c66:	e2 f7       	brpl	.-8      	; 0x1c60 <gfx_box+0x50>
    1c68:	02 23       	and	r16, r18
    1c6a:	da 2c       	mov	r13, r10
    1c6c:	05 c0       	rjmp	.+10     	; 0x1c78 <gfx_box+0x68>
    1c6e:	80 2f       	mov	r24, r16
    1c70:	60 2f       	mov	r22, r16
    1c72:	0e 94 09 0c 	call	0x1812	; 0x1812 <gfx_display_write2>
    1c76:	da 94       	dec	r13
    1c78:	dd 20       	and	r13, r13
    1c7a:	c9 f7       	brne	.-14     	; 0x1c6e <gfx_box+0x5e>
    1c7c:	1e 15       	cp	r17, r14
    1c7e:	08 f4       	brcc	.+2      	; 0x1c82 <gfx_box+0x72>
    1c80:	e1 2e       	mov	r14, r17
    1c82:	1e 19       	sub	r17, r14
    1c84:	fe 0c       	add	r15, r14
    1c86:	8b 2d       	mov	r24, r11
    1c88:	6f 2d       	mov	r22, r15
    1c8a:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <gfx_move>
    1c8e:	0f ef       	ldi	r16, 0xFF	; 255
    1c90:	11 23       	and	r17, r17
    1c92:	e1 f6       	brne	.-72     	; 0x1c4c <gfx_box+0x3c>
    1c94:	df 91       	pop	r29
    1c96:	cf 91       	pop	r28
    1c98:	1f 91       	pop	r17
    1c9a:	0f 91       	pop	r16
    1c9c:	ff 90       	pop	r15
    1c9e:	ef 90       	pop	r14
    1ca0:	df 90       	pop	r13
    1ca2:	cf 90       	pop	r12
    1ca4:	bf 90       	pop	r11
    1ca6:	af 90       	pop	r10
    1ca8:	08 95       	ret

00001caa <gfx_vline>:
    1caa:	68 2f       	mov	r22, r24
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <gfx_box>
    1cb2:	08 95       	ret

00001cb4 <gfx_hline>:
    1cb4:	0f 93       	push	r16
    1cb6:	1f 93       	push	r17
    1cb8:	18 2f       	mov	r17, r24
    1cba:	80 91 27 05 	lds	r24, 0x0527
    1cbe:	87 70       	andi	r24, 0x07	; 7
    1cc0:	21 e0       	ldi	r18, 0x01	; 1
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	02 2f       	mov	r16, r18
    1cc6:	01 c0       	rjmp	.+2      	; 0x1cca <gfx_hline+0x16>
    1cc8:	00 0f       	add	r16, r16
    1cca:	8a 95       	dec	r24
    1ccc:	ea f7       	brpl	.-6      	; 0x1cc8 <gfx_hline+0x14>
    1cce:	05 c0       	rjmp	.+10     	; 0x1cda <gfx_hline+0x26>
    1cd0:	80 2f       	mov	r24, r16
    1cd2:	60 2f       	mov	r22, r16
    1cd4:	0e 94 09 0c 	call	0x1812	; 0x1812 <gfx_display_write2>
    1cd8:	11 50       	subi	r17, 0x01	; 1
    1cda:	11 23       	and	r17, r17
    1cdc:	c9 f7       	brne	.-14     	; 0x1cd0 <gfx_hline+0x1c>
    1cde:	1f 91       	pop	r17
    1ce0:	0f 91       	pop	r16
    1ce2:	08 95       	ret

00001ce4 <gfx_lineTo>:
    1ce4:	9f 92       	push	r9
    1ce6:	af 92       	push	r10
    1ce8:	bf 92       	push	r11
    1cea:	cf 92       	push	r12
    1cec:	df 92       	push	r13
    1cee:	ef 92       	push	r14
    1cf0:	ff 92       	push	r15
    1cf2:	0f 93       	push	r16
    1cf4:	1f 93       	push	r17
    1cf6:	08 2f       	mov	r16, r24
    1cf8:	16 2f       	mov	r17, r22
    1cfa:	f0 90 1e 05 	lds	r15, 0x051E
    1cfe:	e0 90 27 05 	lds	r14, 0x0527
    1d02:	8f 15       	cp	r24, r15
    1d04:	61 f4       	brne	.+24     	; 0x1d1e <gfx_lineTo+0x3a>
    1d06:	e6 16       	cp	r14, r22
    1d08:	18 f4       	brcc	.+6      	; 0x1d10 <gfx_lineTo+0x2c>
    1d0a:	86 2f       	mov	r24, r22
    1d0c:	8e 19       	sub	r24, r14
    1d0e:	04 c0       	rjmp	.+8      	; 0x1d18 <gfx_lineTo+0x34>
    1d10:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <gfx_move>
    1d14:	8e 2d       	mov	r24, r14
    1d16:	81 1b       	sub	r24, r17
    1d18:	0e 94 55 0e 	call	0x1caa	; 0x1caa <gfx_vline>
    1d1c:	5e c0       	rjmp	.+188    	; 0x1dda <gfx_lineTo+0xf6>
    1d1e:	de 2c       	mov	r13, r14
    1d20:	6e 15       	cp	r22, r14
    1d22:	59 f4       	brne	.+22     	; 0x1d3a <gfx_lineTo+0x56>
    1d24:	f8 16       	cp	r15, r24
    1d26:	10 f4       	brcc	.+4      	; 0x1d2c <gfx_lineTo+0x48>
    1d28:	8f 19       	sub	r24, r15
    1d2a:	04 c0       	rjmp	.+8      	; 0x1d34 <gfx_lineTo+0x50>
    1d2c:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <gfx_move>
    1d30:	8f 2d       	mov	r24, r15
    1d32:	80 1b       	sub	r24, r16
    1d34:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <gfx_hline>
    1d38:	50 c0       	rjmp	.+160    	; 0x1dda <gfx_lineTo+0xf6>
    1d3a:	8f 15       	cp	r24, r15
    1d3c:	28 f4       	brcc	.+10     	; 0x1d48 <gfx_lineTo+0x64>
    1d3e:	af 2c       	mov	r10, r15
    1d40:	a8 1a       	sub	r10, r24
    1d42:	99 24       	eor	r9, r9
    1d44:	9a 94       	dec	r9
    1d46:	09 c0       	rjmp	.+18     	; 0x1d5a <gfx_lineTo+0x76>
    1d48:	f8 16       	cp	r15, r24
    1d4a:	18 f0       	brcs	.+6      	; 0x1d52 <gfx_lineTo+0x6e>
    1d4c:	99 24       	eor	r9, r9
    1d4e:	aa 24       	eor	r10, r10
    1d50:	04 c0       	rjmp	.+8      	; 0x1d5a <gfx_lineTo+0x76>
    1d52:	a8 2e       	mov	r10, r24
    1d54:	af 18       	sub	r10, r15
    1d56:	99 24       	eor	r9, r9
    1d58:	93 94       	inc	r9
    1d5a:	1e 15       	cp	r17, r14
    1d5c:	28 f4       	brcc	.+10     	; 0x1d68 <gfx_lineTo+0x84>
    1d5e:	be 2c       	mov	r11, r14
    1d60:	b1 1a       	sub	r11, r17
    1d62:	cc 24       	eor	r12, r12
    1d64:	ca 94       	dec	r12
    1d66:	09 c0       	rjmp	.+18     	; 0x1d7a <gfx_lineTo+0x96>
    1d68:	e1 16       	cp	r14, r17
    1d6a:	18 f0       	brcs	.+6      	; 0x1d72 <gfx_lineTo+0x8e>
    1d6c:	cc 24       	eor	r12, r12
    1d6e:	bb 24       	eor	r11, r11
    1d70:	04 c0       	rjmp	.+8      	; 0x1d7a <gfx_lineTo+0x96>
    1d72:	b1 2e       	mov	r11, r17
    1d74:	be 18       	sub	r11, r14
    1d76:	cc 24       	eor	r12, r12
    1d78:	c3 94       	inc	r12
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
    1d7c:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <gfx_pixel>
    1d80:	ba 14       	cp	r11, r10
    1d82:	b0 f4       	brcc	.+44     	; 0x1db0 <gfx_lineTo+0xcc>
    1d84:	ea 2c       	mov	r14, r10
    1d86:	e6 94       	lsr	r14
    1d88:	e1 94       	neg	r14
    1d8a:	f9 0c       	add	r15, r9
    1d8c:	eb 0c       	add	r14, r11
    1d8e:	1e 14       	cp	r1, r14
    1d90:	14 f4       	brge	.+4      	; 0x1d96 <gfx_lineTo+0xb2>
    1d92:	ea 18       	sub	r14, r10
    1d94:	dc 0c       	add	r13, r12
    1d96:	8f 2d       	mov	r24, r15
    1d98:	6d 2d       	mov	r22, r13
    1d9a:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <gfx_move>
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <gfx_pixel>
    1da4:	f9 0c       	add	r15, r9
    1da6:	8f 2d       	mov	r24, r15
    1da8:	89 19       	sub	r24, r9
    1daa:	80 17       	cp	r24, r16
    1dac:	79 f7       	brne	.-34     	; 0x1d8c <gfx_lineTo+0xa8>
    1dae:	15 c0       	rjmp	.+42     	; 0x1dda <gfx_lineTo+0xf6>
    1db0:	db 2c       	mov	r13, r11
    1db2:	d6 94       	lsr	r13
    1db4:	d1 94       	neg	r13
    1db6:	ec 0c       	add	r14, r12
    1db8:	da 0c       	add	r13, r10
    1dba:	1d 14       	cp	r1, r13
    1dbc:	14 f4       	brge	.+4      	; 0x1dc2 <gfx_lineTo+0xde>
    1dbe:	db 18       	sub	r13, r11
    1dc0:	f9 0c       	add	r15, r9
    1dc2:	8f 2d       	mov	r24, r15
    1dc4:	6e 2d       	mov	r22, r14
    1dc6:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <gfx_move>
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <gfx_pixel>
    1dd0:	ec 0c       	add	r14, r12
    1dd2:	8e 2d       	mov	r24, r14
    1dd4:	8c 19       	sub	r24, r12
    1dd6:	81 17       	cp	r24, r17
    1dd8:	79 f7       	brne	.-34     	; 0x1db8 <gfx_lineTo+0xd4>
    1dda:	80 2f       	mov	r24, r16
    1ddc:	61 2f       	mov	r22, r17
    1dde:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <gfx_move>
    1de2:	1f 91       	pop	r17
    1de4:	0f 91       	pop	r16
    1de6:	ff 90       	pop	r15
    1de8:	ef 90       	pop	r14
    1dea:	df 90       	pop	r13
    1dec:	cf 90       	pop	r12
    1dee:	bf 90       	pop	r11
    1df0:	af 90       	pop	r10
    1df2:	9f 90       	pop	r9
    1df4:	08 95       	ret

00001df6 <gfx_print_char_base>:
    1df6:	8f 92       	push	r8
    1df8:	9f 92       	push	r9
    1dfa:	af 92       	push	r10
    1dfc:	bf 92       	push	r11
    1dfe:	cf 92       	push	r12
    1e00:	df 92       	push	r13
    1e02:	ef 92       	push	r14
    1e04:	ff 92       	push	r15
    1e06:	0f 93       	push	r16
    1e08:	1f 93       	push	r17
    1e0a:	cf 93       	push	r28
    1e0c:	df 93       	push	r29
    1e0e:	06 2f       	mov	r16, r22
    1e10:	98 2f       	mov	r25, r24
    1e12:	90 52       	subi	r25, 0x20	; 32
    1e14:	90 36       	cpi	r25, 0x60	; 96
    1e16:	08 f0       	brcs	.+2      	; 0x1e1a <gfx_print_char_base+0x24>
    1e18:	80 e8       	ldi	r24, 0x80	; 128
    1e1a:	80 52       	subi	r24, 0x20	; 32
    1e1c:	96 e0       	ldi	r25, 0x06	; 6
    1e1e:	89 9f       	mul	r24, r25
    1e20:	e0 01       	movw	r28, r0
    1e22:	11 24       	eor	r1, r1
    1e24:	c0 50       	subi	r28, 0x00	; 0
    1e26:	df 4f       	sbci	r29, 0xFF	; 255
    1e28:	18 81       	ld	r17, Y
    1e2a:	80 91 1d 05 	lds	r24, 0x051D
    1e2e:	88 23       	and	r24, r24
    1e30:	09 f4       	brne	.+2      	; 0x1e34 <gfx_print_char_base+0x3e>
    1e32:	1f e1       	ldi	r17, 0x1F	; 31
    1e34:	e0 2e       	mov	r14, r16
    1e36:	ff 24       	eor	r15, r15
    1e38:	e7 fc       	sbrc	r14, 7
    1e3a:	f0 94       	com	r15
    1e3c:	8f ef       	ldi	r24, 0xFF	; 255
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	6c 01       	movw	r12, r24
    1e42:	0e 2c       	mov	r0, r14
    1e44:	02 c0       	rjmp	.+4      	; 0x1e4a <gfx_print_char_base+0x54>
    1e46:	cc 0c       	add	r12, r12
    1e48:	dd 1c       	adc	r13, r13
    1e4a:	0a 94       	dec	r0
    1e4c:	e2 f7       	brpl	.-8      	; 0x1e46 <gfx_print_char_base+0x50>
    1e4e:	aa 24       	eor	r10, r10
    1e50:	bb 24       	eor	r11, r11
    1e52:	ae 18       	sub	r10, r14
    1e54:	bf 08       	sbc	r11, r15
    1e56:	0a 2c       	mov	r0, r10
    1e58:	02 c0       	rjmp	.+4      	; 0x1e5e <gfx_print_char_base+0x68>
    1e5a:	95 95       	asr	r25
    1e5c:	87 95       	ror	r24
    1e5e:	0a 94       	dec	r0
    1e60:	e2 f7       	brpl	.-8      	; 0x1e5a <gfx_print_char_base+0x64>
    1e62:	d8 2e       	mov	r13, r24
    1e64:	85 e0       	ldi	r24, 0x05	; 5
    1e66:	88 2e       	mov	r8, r24
    1e68:	91 2c       	mov	r9, r1
    1e6a:	8c 0e       	add	r8, r28
    1e6c:	9d 1e       	adc	r9, r29
    1e6e:	10 ff       	sbrs	r17, 0
    1e70:	16 c0       	rjmp	.+44     	; 0x1e9e <gfx_print_char_base+0xa8>
    1e72:	89 81       	ldd	r24, Y+1	; 0x01
    1e74:	07 fd       	sbrc	r16, 7
    1e76:	09 c0       	rjmp	.+18     	; 0x1e8a <gfx_print_char_base+0x94>
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	0e 2c       	mov	r0, r14
    1e7c:	02 c0       	rjmp	.+4      	; 0x1e82 <gfx_print_char_base+0x8c>
    1e7e:	88 0f       	add	r24, r24
    1e80:	99 1f       	adc	r25, r25
    1e82:	0a 94       	dec	r0
    1e84:	e2 f7       	brpl	.-8      	; 0x1e7e <gfx_print_char_base+0x88>
    1e86:	6c 2d       	mov	r22, r12
    1e88:	08 c0       	rjmp	.+16     	; 0x1e9a <gfx_print_char_base+0xa4>
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	0a 2c       	mov	r0, r10
    1e8e:	02 c0       	rjmp	.+4      	; 0x1e94 <gfx_print_char_base+0x9e>
    1e90:	95 95       	asr	r25
    1e92:	87 95       	ror	r24
    1e94:	0a 94       	dec	r0
    1e96:	e2 f7       	brpl	.-8      	; 0x1e90 <gfx_print_char_base+0x9a>
    1e98:	6d 2d       	mov	r22, r13
    1e9a:	0e 94 09 0c 	call	0x1812	; 0x1812 <gfx_display_write2>
    1e9e:	21 96       	adiw	r28, 0x01	; 1
    1ea0:	c8 15       	cp	r28, r8
    1ea2:	d9 05       	cpc	r29, r9
    1ea4:	11 f0       	breq	.+4      	; 0x1eaa <gfx_print_char_base+0xb4>
    1ea6:	16 95       	lsr	r17
    1ea8:	e2 cf       	rjmp	.-60     	; 0x1e6e <gfx_print_char_base+0x78>
    1eaa:	07 fd       	sbrc	r16, 7
    1eac:	03 c0       	rjmp	.+6      	; 0x1eb4 <gfx_print_char_base+0xbe>
    1eae:	80 e0       	ldi	r24, 0x00	; 0
    1eb0:	6c 2d       	mov	r22, r12
    1eb2:	02 c0       	rjmp	.+4      	; 0x1eb8 <gfx_print_char_base+0xc2>
    1eb4:	80 e0       	ldi	r24, 0x00	; 0
    1eb6:	6d 2d       	mov	r22, r13
    1eb8:	0e 94 09 0c 	call	0x1812	; 0x1812 <gfx_display_write2>
    1ebc:	df 91       	pop	r29
    1ebe:	cf 91       	pop	r28
    1ec0:	1f 91       	pop	r17
    1ec2:	0f 91       	pop	r16
    1ec4:	ff 90       	pop	r15
    1ec6:	ef 90       	pop	r14
    1ec8:	df 90       	pop	r13
    1eca:	cf 90       	pop	r12
    1ecc:	bf 90       	pop	r11
    1ece:	af 90       	pop	r10
    1ed0:	9f 90       	pop	r9
    1ed2:	8f 90       	pop	r8
    1ed4:	08 95       	ret

00001ed6 <gfx_print_char>:
    1ed6:	ff 92       	push	r15
    1ed8:	0f 93       	push	r16
    1eda:	1f 93       	push	r17
    1edc:	08 2f       	mov	r16, r24
    1ede:	f0 90 1e 05 	lds	r15, 0x051E
    1ee2:	10 91 27 05 	lds	r17, 0x0527
    1ee6:	17 70       	andi	r17, 0x07	; 7
    1ee8:	61 2f       	mov	r22, r17
    1eea:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <gfx_print_char_base>
    1eee:	11 23       	and	r17, r17
    1ef0:	91 f0       	breq	.+36     	; 0x1f16 <gfx_print_char+0x40>
    1ef2:	60 91 27 05 	lds	r22, 0x0527
    1ef6:	68 5f       	subi	r22, 0xF8	; 248
    1ef8:	8f 2d       	mov	r24, r15
    1efa:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <gfx_move>
    1efe:	61 2f       	mov	r22, r17
    1f00:	68 50       	subi	r22, 0x08	; 8
    1f02:	80 2f       	mov	r24, r16
    1f04:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <gfx_print_char_base>
    1f08:	60 91 27 05 	lds	r22, 0x0527
    1f0c:	68 50       	subi	r22, 0x08	; 8
    1f0e:	80 91 1e 05 	lds	r24, 0x051E
    1f12:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <gfx_move>
    1f16:	1f 91       	pop	r17
    1f18:	0f 91       	pop	r16
    1f1a:	ff 90       	pop	r15
    1f1c:	08 95       	ret

00001f1e <gfx_term_print>:
    1f1e:	1f 93       	push	r17
    1f20:	cf 93       	push	r28
    1f22:	df 93       	push	r29
    1f24:	ec 01       	movw	r28, r24
    1f26:	10 92 1d 05 	sts	0x051D, r1
    1f2a:	36 c0       	rjmp	.+108    	; 0x1f98 <gfx_term_print+0x7a>
    1f2c:	1a 30       	cpi	r17, 0x0A	; 10
    1f2e:	69 f4       	brne	.+26     	; 0x1f4a <gfx_term_print+0x2c>
    1f30:	10 92 28 05 	sts	0x0528, r1
    1f34:	80 91 1c 05 	lds	r24, 0x051C
    1f38:	8f 5f       	subi	r24, 0xFF	; 255
    1f3a:	80 93 1c 05 	sts	0x051C, r24
    1f3e:	88 30       	cpi	r24, 0x08	; 8
    1f40:	59 f5       	brne	.+86     	; 0x1f98 <gfx_term_print+0x7a>
    1f42:	81 e0       	ldi	r24, 0x01	; 1
    1f44:	0e 94 97 0b 	call	0x172e	; 0x172e <gfx_term_scroll>
    1f48:	27 c0       	rjmp	.+78     	; 0x1f98 <gfx_term_print+0x7a>
    1f4a:	1d 30       	cpi	r17, 0x0D	; 13
    1f4c:	29 f1       	breq	.+74     	; 0x1f98 <gfx_term_print+0x7a>
    1f4e:	80 91 28 05 	lds	r24, 0x0528
    1f52:	85 31       	cpi	r24, 0x15	; 21
    1f54:	60 f0       	brcs	.+24     	; 0x1f6e <gfx_term_print+0x50>
    1f56:	10 92 28 05 	sts	0x0528, r1
    1f5a:	80 91 1c 05 	lds	r24, 0x051C
    1f5e:	8f 5f       	subi	r24, 0xFF	; 255
    1f60:	80 93 1c 05 	sts	0x051C, r24
    1f64:	88 30       	cpi	r24, 0x08	; 8
    1f66:	19 f4       	brne	.+6      	; 0x1f6e <gfx_term_print+0x50>
    1f68:	81 e0       	ldi	r24, 0x01	; 1
    1f6a:	0e 94 97 0b 	call	0x172e	; 0x172e <gfx_term_scroll>
    1f6e:	90 91 28 05 	lds	r25, 0x0528
    1f72:	89 2f       	mov	r24, r25
    1f74:	88 0f       	add	r24, r24
    1f76:	89 0f       	add	r24, r25
    1f78:	60 91 1c 05 	lds	r22, 0x051C
    1f7c:	66 0f       	add	r22, r22
    1f7e:	66 0f       	add	r22, r22
    1f80:	66 0f       	add	r22, r22
    1f82:	88 0f       	add	r24, r24
    1f84:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <gfx_move>
    1f88:	81 2f       	mov	r24, r17
    1f8a:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <gfx_print_char>
    1f8e:	80 91 28 05 	lds	r24, 0x0528
    1f92:	8f 5f       	subi	r24, 0xFF	; 255
    1f94:	80 93 28 05 	sts	0x0528, r24
    1f98:	19 91       	ld	r17, Y+
    1f9a:	11 23       	and	r17, r17
    1f9c:	39 f6       	brne	.-114    	; 0x1f2c <gfx_term_print+0xe>
    1f9e:	df 91       	pop	r29
    1fa0:	cf 91       	pop	r28
    1fa2:	1f 91       	pop	r17
    1fa4:	08 95       	ret

00001fa6 <gfx_print_text_P>:
    1fa6:	cf 93       	push	r28
    1fa8:	df 93       	push	r29
    1faa:	ec 01       	movw	r28, r24
    1fac:	05 c0       	rjmp	.+10     	; 0x1fb8 <gfx_print_text_P+0x12>
    1fae:	21 96       	adiw	r28, 0x01	; 1
    1fb0:	f9 01       	movw	r30, r18
    1fb2:	84 91       	lpm	r24, Z
    1fb4:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <gfx_print_char>
    1fb8:	9e 01       	movw	r18, r28
    1fba:	fe 01       	movw	r30, r28
    1fbc:	94 91       	lpm	r25, Z
    1fbe:	99 23       	and	r25, r25
    1fc0:	b1 f7       	brne	.-20     	; 0x1fae <gfx_print_text_P+0x8>
    1fc2:	df 91       	pop	r29
    1fc4:	cf 91       	pop	r28
    1fc6:	08 95       	ret

00001fc8 <gfx_print_text>:
    1fc8:	cf 93       	push	r28
    1fca:	df 93       	push	r29
    1fcc:	ec 01       	movw	r28, r24
    1fce:	03 c0       	rjmp	.+6      	; 0x1fd6 <gfx_print_text+0xe>
    1fd0:	21 96       	adiw	r28, 0x01	; 1
    1fd2:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <gfx_print_char>
    1fd6:	88 81       	ld	r24, Y
    1fd8:	88 23       	and	r24, r24
    1fda:	d1 f7       	brne	.-12     	; 0x1fd0 <gfx_print_text+0x8>
    1fdc:	df 91       	pop	r29
    1fde:	cf 91       	pop	r28
    1fe0:	08 95       	ret

00001fe2 <_copro_check_busy>:
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	28 2f       	mov	r18, r24
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	f9 01       	movw	r30, r18
    1fea:	83 e0       	ldi	r24, 0x03	; 3
    1fec:	ee 0f       	add	r30, r30
    1fee:	ff 1f       	adc	r31, r31
    1ff0:	8a 95       	dec	r24
    1ff2:	e1 f7       	brne	.-8      	; 0x1fec <_copro_check_busy+0xa>
    1ff4:	e2 1b       	sub	r30, r18
    1ff6:	f3 0b       	sbc	r31, r19
    1ff8:	e1 5d       	subi	r30, 0xD1	; 209
    1ffa:	fa 4f       	sbci	r31, 0xFA	; 250
    1ffc:	80 81       	ld	r24, Z
    1ffe:	8f 3f       	cpi	r24, 0xFF	; 255
    2000:	09 f0       	breq	.+2      	; 0x2004 <_copro_check_busy+0x22>
    2002:	91 e0       	ldi	r25, 0x01	; 1
    2004:	89 2f       	mov	r24, r25
    2006:	08 95       	ret

00002008 <copro_update>:
    2008:	f8 94       	cli
    200a:	90 91 67 05 	lds	r25, 0x0567
    200e:	80 e0       	ldi	r24, 0x00	; 0
    2010:	e7 e6       	ldi	r30, 0x67	; 103
    2012:	f5 e0       	ldi	r31, 0x05	; 5
    2014:	22 91       	ld	r18, -Z
    2016:	82 0f       	add	r24, r18
    2018:	91 1d       	adc	r25, r1
    201a:	90 93 49 05 	sts	0x0549, r25
    201e:	80 93 48 05 	sts	0x0548, r24
    2022:	93 81       	ldd	r25, Z+3	; 0x03
    2024:	80 e0       	ldi	r24, 0x00	; 0
    2026:	22 81       	ldd	r18, Z+2	; 0x02
    2028:	82 0f       	add	r24, r18
    202a:	91 1d       	adc	r25, r1
    202c:	90 93 4b 05 	sts	0x054B, r25
    2030:	80 93 4a 05 	sts	0x054A, r24
    2034:	95 81       	ldd	r25, Z+5	; 0x05
    2036:	80 e0       	ldi	r24, 0x00	; 0
    2038:	24 81       	ldd	r18, Z+4	; 0x04
    203a:	82 0f       	add	r24, r18
    203c:	91 1d       	adc	r25, r1
    203e:	90 93 4d 05 	sts	0x054D, r25
    2042:	80 93 4c 05 	sts	0x054C, r24
    2046:	97 81       	ldd	r25, Z+7	; 0x07
    2048:	80 e0       	ldi	r24, 0x00	; 0
    204a:	26 81       	ldd	r18, Z+6	; 0x06
    204c:	82 0f       	add	r24, r18
    204e:	91 1d       	adc	r25, r1
    2050:	90 93 4f 05 	sts	0x054F, r25
    2054:	80 93 4e 05 	sts	0x054E, r24
    2058:	91 85       	ldd	r25, Z+9	; 0x09
    205a:	80 e0       	ldi	r24, 0x00	; 0
    205c:	20 85       	ldd	r18, Z+8	; 0x08
    205e:	82 0f       	add	r24, r18
    2060:	91 1d       	adc	r25, r1
    2062:	90 93 51 05 	sts	0x0551, r25
    2066:	80 93 50 05 	sts	0x0550, r24
    206a:	78 94       	sei
    206c:	f8 94       	cli
    206e:	20 91 70 05 	lds	r18, 0x0570
    2072:	80 91 2b 05 	lds	r24, 0x052B
    2076:	90 91 2c 05 	lds	r25, 0x052C
    207a:	82 0f       	add	r24, r18
    207c:	91 1d       	adc	r25, r1
    207e:	30 91 71 05 	lds	r19, 0x0571
    2082:	20 e0       	ldi	r18, 0x00	; 0
    2084:	82 0f       	add	r24, r18
    2086:	93 1f       	adc	r25, r19
    2088:	90 93 45 05 	sts	0x0545, r25
    208c:	80 93 44 05 	sts	0x0544, r24
    2090:	20 91 72 05 	lds	r18, 0x0572
    2094:	80 91 29 05 	lds	r24, 0x0529
    2098:	90 91 2a 05 	lds	r25, 0x052A
    209c:	82 0f       	add	r24, r18
    209e:	91 1d       	adc	r25, r1
    20a0:	30 91 73 05 	lds	r19, 0x0573
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	82 0f       	add	r24, r18
    20a8:	93 1f       	adc	r25, r19
    20aa:	90 93 5d 05 	sts	0x055D, r25
    20ae:	80 93 5c 05 	sts	0x055C, r24
    20b2:	90 91 75 05 	lds	r25, 0x0575
    20b6:	80 e0       	ldi	r24, 0x00	; 0
    20b8:	20 91 74 05 	lds	r18, 0x0574
    20bc:	82 0f       	add	r24, r18
    20be:	91 1d       	adc	r25, r1
    20c0:	90 93 85 05 	sts	0x0585, r25
    20c4:	80 93 84 05 	sts	0x0584, r24
    20c8:	90 91 77 05 	lds	r25, 0x0577
    20cc:	80 e0       	ldi	r24, 0x00	; 0
    20ce:	20 91 76 05 	lds	r18, 0x0576
    20d2:	82 0f       	add	r24, r18
    20d4:	91 1d       	adc	r25, r1
    20d6:	90 93 5b 05 	sts	0x055B, r25
    20da:	80 93 5a 05 	sts	0x055A, r24
    20de:	90 91 79 05 	lds	r25, 0x0579
    20e2:	80 e0       	ldi	r24, 0x00	; 0
    20e4:	20 91 78 05 	lds	r18, 0x0578
    20e8:	82 0f       	add	r24, r18
    20ea:	91 1d       	adc	r25, r1
    20ec:	90 93 2e 05 	sts	0x052E, r25
    20f0:	80 93 2d 05 	sts	0x052D, r24
    20f4:	90 91 7b 05 	lds	r25, 0x057B
    20f8:	80 e0       	ldi	r24, 0x00	; 0
    20fa:	20 91 7a 05 	lds	r18, 0x057A
    20fe:	82 0f       	add	r24, r18
    2100:	91 1d       	adc	r25, r1
    2102:	90 93 65 05 	sts	0x0565, r25
    2106:	80 93 64 05 	sts	0x0564, r24
    210a:	78 94       	sei
    210c:	f8 94       	cli
    210e:	90 91 7e 05 	lds	r25, 0x057E
    2112:	80 e0       	ldi	r24, 0x00	; 0
    2114:	20 91 7d 05 	lds	r18, 0x057D
    2118:	82 0f       	add	r24, r18
    211a:	91 1d       	adc	r25, r1
    211c:	90 93 47 05 	sts	0x0547, r25
    2120:	80 93 46 05 	sts	0x0546, r24
    2124:	90 91 80 05 	lds	r25, 0x0580
    2128:	80 e0       	ldi	r24, 0x00	; 0
    212a:	20 91 7f 05 	lds	r18, 0x057F
    212e:	82 0f       	add	r24, r18
    2130:	91 1d       	adc	r25, r1
    2132:	90 93 82 05 	sts	0x0582, r25
    2136:	80 93 81 05 	sts	0x0581, r24
    213a:	78 94       	sei
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	08 95       	ret

00002140 <copro_stop>:
    2140:	f8 94       	cli
    2142:	81 e0       	ldi	r24, 0x01	; 1
    2144:	80 93 2f 05 	sts	0x052F, r24
    2148:	78 94       	sei
    214a:	08 95       	ret

0000214c <copro_stopImmediate>:
    214c:	f8 94       	cli
    214e:	8a e0       	ldi	r24, 0x0A	; 10
    2150:	80 93 2f 05 	sts	0x052F, r24
    2154:	78 94       	sei
    2156:	81 e0       	ldi	r24, 0x01	; 1
    2158:	08 95       	ret

0000215a <copro_setPWM>:
    215a:	f8 94       	cli
    215c:	25 e0       	ldi	r18, 0x05	; 5
    215e:	20 93 2f 05 	sts	0x052F, r18
    2162:	80 93 30 05 	sts	0x0530, r24
    2166:	90 93 31 05 	sts	0x0531, r25
    216a:	60 93 32 05 	sts	0x0532, r22
    216e:	70 93 33 05 	sts	0x0533, r23
    2172:	78 94       	sei
    2174:	81 e0       	ldi	r24, 0x01	; 1
    2176:	08 95       	ret

00002178 <copro_setSpeed>:
    2178:	f8 94       	cli
    217a:	22 e0       	ldi	r18, 0x02	; 2
    217c:	20 93 2f 05 	sts	0x052F, r18
    2180:	80 93 30 05 	sts	0x0530, r24
    2184:	90 93 31 05 	sts	0x0531, r25
    2188:	60 93 32 05 	sts	0x0532, r22
    218c:	70 93 33 05 	sts	0x0533, r23
    2190:	78 94       	sei
    2192:	81 e0       	ldi	r24, 0x01	; 1
    2194:	08 95       	ret

00002196 <copro_setTargetAbs>:
    2196:	20 91 2b 05 	lds	r18, 0x052B
    219a:	30 91 2c 05 	lds	r19, 0x052C
    219e:	fc 01       	movw	r30, r24
    21a0:	e2 1b       	sub	r30, r18
    21a2:	f3 0b       	sbc	r31, r19
    21a4:	9f 01       	movw	r18, r30
    21a6:	80 91 29 05 	lds	r24, 0x0529
    21aa:	90 91 2a 05 	lds	r25, 0x052A
    21ae:	68 1b       	sub	r22, r24
    21b0:	79 0b       	sbc	r23, r25
    21b2:	f8 94       	cli
    21b4:	83 e0       	ldi	r24, 0x03	; 3
    21b6:	80 93 2f 05 	sts	0x052F, r24
    21ba:	e0 93 30 05 	sts	0x0530, r30
    21be:	30 93 31 05 	sts	0x0531, r19
    21c2:	60 93 32 05 	sts	0x0532, r22
    21c6:	70 93 33 05 	sts	0x0533, r23
    21ca:	40 93 34 05 	sts	0x0534, r20
    21ce:	50 93 35 05 	sts	0x0535, r21
    21d2:	78 94       	sei
    21d4:	81 e0       	ldi	r24, 0x01	; 1
    21d6:	08 95       	ret

000021d8 <copro_setTargetRel>:
    21d8:	f8 94       	cli
    21da:	24 e0       	ldi	r18, 0x04	; 4
    21dc:	20 93 2f 05 	sts	0x052F, r18
    21e0:	80 93 30 05 	sts	0x0530, r24
    21e4:	90 93 31 05 	sts	0x0531, r25
    21e8:	60 93 32 05 	sts	0x0532, r22
    21ec:	70 93 33 05 	sts	0x0533, r23
    21f0:	40 93 34 05 	sts	0x0534, r20
    21f4:	50 93 35 05 	sts	0x0535, r21
    21f8:	78 94       	sei
    21fa:	81 e0       	ldi	r24, 0x01	; 1
    21fc:	08 95       	ret

000021fe <copro_setSpeedParameters>:
    21fe:	78 94       	sei
    2200:	90 91 3d 05 	lds	r25, 0x053D
    2204:	20 e1       	ldi	r18, 0x10	; 16
    2206:	37 e2       	ldi	r19, 0x27	; 39
    2208:	21 50       	subi	r18, 0x01	; 1
    220a:	30 40       	sbci	r19, 0x00	; 0
    220c:	11 f0       	breq	.+4      	; 0x2212 <copro_setSpeedParameters+0x14>
    220e:	9f 3f       	cpi	r25, 0xFF	; 255
    2210:	d9 f7       	brne	.-10     	; 0x2208 <copro_setSpeedParameters+0xa>
    2212:	f8 94       	cli
    2214:	96 e0       	ldi	r25, 0x06	; 6
    2216:	90 93 3d 05 	sts	0x053D, r25
    221a:	80 93 3e 05 	sts	0x053E, r24
    221e:	60 93 3f 05 	sts	0x053F, r22
    2222:	40 93 40 05 	sts	0x0540, r20
    2226:	78 94       	sei
    2228:	81 e0       	ldi	r24, 0x01	; 1
    222a:	08 95       	ret

0000222c <copro_setPositionParameters>:
    222c:	81 e0       	ldi	r24, 0x01	; 1
    222e:	08 95       	ret

00002230 <copro_resetOdometry>:
    2230:	f8 94       	cli
    2232:	30 91 73 05 	lds	r19, 0x0573
    2236:	20 e0       	ldi	r18, 0x00	; 0
    2238:	40 91 72 05 	lds	r20, 0x0572
    223c:	f9 01       	movw	r30, r18
    223e:	e4 0f       	add	r30, r20
    2240:	f1 1d       	adc	r31, r1
    2242:	af 01       	movw	r20, r30
    2244:	30 91 71 05 	lds	r19, 0x0571
    2248:	20 e0       	ldi	r18, 0x00	; 0
    224a:	e0 91 70 05 	lds	r30, 0x0570
    224e:	2e 0f       	add	r18, r30
    2250:	31 1d       	adc	r19, r1
    2252:	fc 01       	movw	r30, r24
    2254:	e2 1b       	sub	r30, r18
    2256:	f3 0b       	sbc	r31, r19
    2258:	f0 93 2c 05 	sts	0x052C, r31
    225c:	e0 93 2b 05 	sts	0x052B, r30
    2260:	9b 01       	movw	r18, r22
    2262:	24 1b       	sub	r18, r20
    2264:	35 0b       	sbc	r19, r21
    2266:	30 93 2a 05 	sts	0x052A, r19
    226a:	20 93 29 05 	sts	0x0529, r18
    226e:	90 93 45 05 	sts	0x0545, r25
    2272:	80 93 44 05 	sts	0x0544, r24
    2276:	70 93 5d 05 	sts	0x055D, r23
    227a:	60 93 5c 05 	sts	0x055C, r22
    227e:	78 94       	sei
    2280:	81 e0       	ldi	r24, 0x01	; 1
    2282:	08 95       	ret

00002284 <copro_ir_stop>:
    2284:	78 94       	sei
    2286:	20 91 36 05 	lds	r18, 0x0536
    228a:	80 e1       	ldi	r24, 0x10	; 16
    228c:	97 e2       	ldi	r25, 0x27	; 39
    228e:	01 97       	sbiw	r24, 0x01	; 1
    2290:	11 f0       	breq	.+4      	; 0x2296 <copro_ir_stop+0x12>
    2292:	2f 3f       	cpi	r18, 0xFF	; 255
    2294:	e1 f7       	brne	.-8      	; 0x228e <copro_ir_stop+0xa>
    2296:	f8 94       	cli
    2298:	88 e0       	ldi	r24, 0x08	; 8
    229a:	80 93 36 05 	sts	0x0536, r24
    229e:	78 94       	sei
    22a0:	81 e0       	ldi	r24, 0x01	; 1
    22a2:	08 95       	ret

000022a4 <copro_ir_startMeasure>:
    22a4:	78 94       	sei
    22a6:	20 91 36 05 	lds	r18, 0x0536
    22aa:	80 e1       	ldi	r24, 0x10	; 16
    22ac:	97 e2       	ldi	r25, 0x27	; 39
    22ae:	01 97       	sbiw	r24, 0x01	; 1
    22b0:	11 f0       	breq	.+4      	; 0x22b6 <copro_ir_startMeasure+0x12>
    22b2:	2f 3f       	cpi	r18, 0xFF	; 255
    22b4:	e1 f7       	brne	.-8      	; 0x22ae <copro_ir_startMeasure+0xa>
    22b6:	f8 94       	cli
    22b8:	87 e0       	ldi	r24, 0x07	; 7
    22ba:	80 93 36 05 	sts	0x0536, r24
    22be:	78 94       	sei
    22c0:	81 e0       	ldi	r24, 0x01	; 1
    22c2:	08 95       	ret

000022c4 <copro_transmitRC5>:
    22c4:	78 94       	sei
    22c6:	40 91 36 05 	lds	r20, 0x0536
    22ca:	20 e1       	ldi	r18, 0x10	; 16
    22cc:	37 e2       	ldi	r19, 0x27	; 39
    22ce:	21 50       	subi	r18, 0x01	; 1
    22d0:	30 40       	sbci	r19, 0x00	; 0
    22d2:	11 f0       	breq	.+4      	; 0x22d8 <copro_transmitRC5+0x14>
    22d4:	4f 3f       	cpi	r20, 0xFF	; 255
    22d6:	d9 f7       	brne	.-10     	; 0x22ce <copro_transmitRC5+0xa>
    22d8:	f8 94       	cli
    22da:	29 e0       	ldi	r18, 0x09	; 9
    22dc:	20 93 36 05 	sts	0x0536, r18
    22e0:	80 93 37 05 	sts	0x0537, r24
    22e4:	90 93 38 05 	sts	0x0538, r25
    22e8:	78 94       	sei
    22ea:	81 e0       	ldi	r24, 0x01	; 1
    22ec:	08 95       	ret

000022ee <spi_finished_callback>:
    22ee:	90 91 83 05 	lds	r25, 0x0583
    22f2:	9f 5f       	subi	r25, 0xFF	; 255
    22f4:	90 93 83 05 	sts	0x0583, r25
    22f8:	8b 31       	cpi	r24, 0x1B	; 27
    22fa:	41 f4       	brne	.+16     	; 0x230c <spi_finished_callback+0x1e>
    22fc:	a6 e6       	ldi	r26, 0x66	; 102
    22fe:	b5 e0       	ldi	r27, 0x05	; 5
    2300:	ed ef       	ldi	r30, 0xFD	; 253
    2302:	f4 e0       	ldi	r31, 0x04	; 4
    2304:	01 90       	ld	r0, Z+
    2306:	0d 92       	st	X+, r0
    2308:	81 50       	subi	r24, 0x01	; 1
    230a:	e1 f7       	brne	.-8      	; 0x2304 <spi_finished_callback+0x16>
    230c:	8f ef       	ldi	r24, 0xFF	; 255
    230e:	80 93 eb 04 	sts	0x04EB, r24
    2312:	80 93 e4 04 	sts	0x04E4, r24
    2316:	80 93 dd 04 	sts	0x04DD, r24
    231a:	80 91 2f 05 	lds	r24, 0x052F
    231e:	8f 3f       	cpi	r24, 0xFF	; 255
    2320:	11 f4       	brne	.+4      	; 0x2326 <spi_finished_callback+0x38>
    2322:	80 e0       	ldi	r24, 0x00	; 0
    2324:	0d c0       	rjmp	.+26     	; 0x2340 <spi_finished_callback+0x52>
    2326:	ad ed       	ldi	r26, 0xDD	; 221
    2328:	b4 e0       	ldi	r27, 0x04	; 4
    232a:	ef e2       	ldi	r30, 0x2F	; 47
    232c:	f5 e0       	ldi	r31, 0x05	; 5
    232e:	87 e0       	ldi	r24, 0x07	; 7
    2330:	01 90       	ld	r0, Z+
    2332:	0d 92       	st	X+, r0
    2334:	81 50       	subi	r24, 0x01	; 1
    2336:	e1 f7       	brne	.-8      	; 0x2330 <spi_finished_callback+0x42>
    2338:	8f ef       	ldi	r24, 0xFF	; 255
    233a:	80 93 2f 05 	sts	0x052F, r24
    233e:	87 e0       	ldi	r24, 0x07	; 7
    2340:	90 91 36 05 	lds	r25, 0x0536
    2344:	9f 3f       	cpi	r25, 0xFF	; 255
    2346:	79 f0       	breq	.+30     	; 0x2366 <spi_finished_callback+0x78>
    2348:	e8 2f       	mov	r30, r24
    234a:	f0 e0       	ldi	r31, 0x00	; 0
    234c:	e3 52       	subi	r30, 0x23	; 35
    234e:	fb 4f       	sbci	r31, 0xFB	; 251
    2350:	a6 e3       	ldi	r26, 0x36	; 54
    2352:	b5 e0       	ldi	r27, 0x05	; 5
    2354:	97 e0       	ldi	r25, 0x07	; 7
    2356:	0d 90       	ld	r0, X+
    2358:	01 92       	st	Z+, r0
    235a:	91 50       	subi	r25, 0x01	; 1
    235c:	e1 f7       	brne	.-8      	; 0x2356 <spi_finished_callback+0x68>
    235e:	9f ef       	ldi	r25, 0xFF	; 255
    2360:	90 93 36 05 	sts	0x0536, r25
    2364:	89 5f       	subi	r24, 0xF9	; 249
    2366:	90 91 3d 05 	lds	r25, 0x053D
    236a:	9f 3f       	cpi	r25, 0xFF	; 255
    236c:	81 f0       	breq	.+32     	; 0x238e <spi_finished_callback+0xa0>
    236e:	e8 2f       	mov	r30, r24
    2370:	f0 e0       	ldi	r31, 0x00	; 0
    2372:	e3 52       	subi	r30, 0x23	; 35
    2374:	fb 4f       	sbci	r31, 0xFB	; 251
    2376:	ad e3       	ldi	r26, 0x3D	; 61
    2378:	b5 e0       	ldi	r27, 0x05	; 5
    237a:	87 e0       	ldi	r24, 0x07	; 7
    237c:	0d 90       	ld	r0, X+
    237e:	01 92       	st	Z+, r0
    2380:	81 50       	subi	r24, 0x01	; 1
    2382:	e1 f7       	brne	.-8      	; 0x237c <spi_finished_callback+0x8e>
    2384:	8f ef       	ldi	r24, 0xFF	; 255
    2386:	80 93 3d 05 	sts	0x053D, r24
    238a:	85 e1       	ldi	r24, 0x15	; 21
    238c:	08 95       	ret
    238e:	88 23       	and	r24, r24
    2390:	11 f4       	brne	.+4      	; 0x2396 <spi_finished_callback+0xa8>
    2392:	87 e0       	ldi	r24, 0x07	; 7
    2394:	08 95       	ret
    2396:	85 e1       	ldi	r24, 0x15	; 21
    2398:	08 95       	ret

0000239a <floor_calibrateUpdate>:
    239a:	cf 93       	push	r28
    239c:	df 93       	push	r29
    239e:	c6 e8       	ldi	r28, 0x86	; 134
    23a0:	d5 e0       	ldi	r29, 0x05	; 5
    23a2:	20 91 8e 05 	lds	r18, 0x058E
    23a6:	30 91 8f 05 	lds	r19, 0x058F
    23aa:	88 81       	ld	r24, Y
    23ac:	99 81       	ldd	r25, Y+1	; 0x01
    23ae:	28 1b       	sub	r18, r24
    23b0:	39 0b       	sbc	r19, r25
    23b2:	40 e0       	ldi	r20, 0x00	; 0
    23b4:	50 e0       	ldi	r21, 0x00	; 0
    23b6:	60 e0       	ldi	r22, 0x00	; 0
    23b8:	70 e0       	ldi	r23, 0x00	; 0
    23ba:	80 e1       	ldi	r24, 0x10	; 16
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	0e 94 18 1a 	call	0x3430	; 0x3430 <__udivmodsi4>
    23c2:	30 93 9f 04 	sts	0x049F, r19
    23c6:	20 93 9e 04 	sts	0x049E, r18
    23ca:	2a 85       	ldd	r18, Y+10	; 0x0a
    23cc:	3b 85       	ldd	r19, Y+11	; 0x0b
    23ce:	8a 81       	ldd	r24, Y+2	; 0x02
    23d0:	9b 81       	ldd	r25, Y+3	; 0x03
    23d2:	28 1b       	sub	r18, r24
    23d4:	39 0b       	sbc	r19, r25
    23d6:	40 e0       	ldi	r20, 0x00	; 0
    23d8:	50 e0       	ldi	r21, 0x00	; 0
    23da:	60 e0       	ldi	r22, 0x00	; 0
    23dc:	70 e0       	ldi	r23, 0x00	; 0
    23de:	80 e1       	ldi	r24, 0x10	; 16
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	0e 94 18 1a 	call	0x3430	; 0x3430 <__udivmodsi4>
    23e6:	30 93 a1 04 	sts	0x04A1, r19
    23ea:	20 93 a0 04 	sts	0x04A0, r18
    23ee:	2c 85       	ldd	r18, Y+12	; 0x0c
    23f0:	3d 85       	ldd	r19, Y+13	; 0x0d
    23f2:	8c 81       	ldd	r24, Y+4	; 0x04
    23f4:	9d 81       	ldd	r25, Y+5	; 0x05
    23f6:	28 1b       	sub	r18, r24
    23f8:	39 0b       	sbc	r19, r25
    23fa:	40 e0       	ldi	r20, 0x00	; 0
    23fc:	50 e0       	ldi	r21, 0x00	; 0
    23fe:	60 e0       	ldi	r22, 0x00	; 0
    2400:	70 e0       	ldi	r23, 0x00	; 0
    2402:	80 e1       	ldi	r24, 0x10	; 16
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	0e 94 18 1a 	call	0x3430	; 0x3430 <__udivmodsi4>
    240a:	30 93 a3 04 	sts	0x04A3, r19
    240e:	20 93 a2 04 	sts	0x04A2, r18
    2412:	2e 85       	ldd	r18, Y+14	; 0x0e
    2414:	3f 85       	ldd	r19, Y+15	; 0x0f
    2416:	8e 81       	ldd	r24, Y+6	; 0x06
    2418:	9f 81       	ldd	r25, Y+7	; 0x07
    241a:	28 1b       	sub	r18, r24
    241c:	39 0b       	sbc	r19, r25
    241e:	40 e0       	ldi	r20, 0x00	; 0
    2420:	50 e0       	ldi	r21, 0x00	; 0
    2422:	60 e0       	ldi	r22, 0x00	; 0
    2424:	70 e0       	ldi	r23, 0x00	; 0
    2426:	80 e1       	ldi	r24, 0x10	; 16
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	0e 94 18 1a 	call	0x3430	; 0x3430 <__udivmodsi4>
    242e:	30 93 a5 04 	sts	0x04A5, r19
    2432:	20 93 a4 04 	sts	0x04A4, r18
    2436:	df 91       	pop	r29
    2438:	cf 91       	pop	r28
    243a:	08 95       	ret

0000243c <floor_writePersistent>:
    243c:	86 e8       	ldi	r24, 0x86	; 134
    243e:	95 e0       	ldi	r25, 0x05	; 5
    2440:	60 e0       	ldi	r22, 0x00	; 0
    2442:	70 e0       	ldi	r23, 0x00	; 0
    2444:	40 e1       	ldi	r20, 0x10	; 16
    2446:	50 e0       	ldi	r21, 0x00	; 0
    2448:	0e 94 03 1c 	call	0x3806	; 0x3806 <__eewr_block_m128>
    244c:	08 95       	ret

0000244e <floor_readPersistent>:
    244e:	86 e8       	ldi	r24, 0x86	; 134
    2450:	95 e0       	ldi	r25, 0x05	; 5
    2452:	60 e0       	ldi	r22, 0x00	; 0
    2454:	70 e0       	ldi	r23, 0x00	; 0
    2456:	40 e1       	ldi	r20, 0x10	; 16
    2458:	50 e0       	ldi	r21, 0x00	; 0
    245a:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <__eerd_block_m128>
    245e:	80 91 86 05 	lds	r24, 0x0586
    2462:	90 91 87 05 	lds	r25, 0x0587
    2466:	2f ef       	ldi	r18, 0xFF	; 255
    2468:	8f 3f       	cpi	r24, 0xFF	; 255
    246a:	92 07       	cpc	r25, r18
    246c:	11 f5       	brne	.+68     	; 0x24b2 <floor_readPersistent+0x64>
    246e:	10 92 87 05 	sts	0x0587, r1
    2472:	10 92 86 05 	sts	0x0586, r1
    2476:	10 92 89 05 	sts	0x0589, r1
    247a:	10 92 88 05 	sts	0x0588, r1
    247e:	10 92 8b 05 	sts	0x058B, r1
    2482:	10 92 8a 05 	sts	0x058A, r1
    2486:	10 92 8d 05 	sts	0x058D, r1
    248a:	10 92 8c 05 	sts	0x058C, r1
    248e:	80 e0       	ldi	r24, 0x00	; 0
    2490:	91 e0       	ldi	r25, 0x01	; 1
    2492:	90 93 8f 05 	sts	0x058F, r25
    2496:	80 93 8e 05 	sts	0x058E, r24
    249a:	90 93 91 05 	sts	0x0591, r25
    249e:	80 93 90 05 	sts	0x0590, r24
    24a2:	90 93 93 05 	sts	0x0593, r25
    24a6:	80 93 92 05 	sts	0x0592, r24
    24aa:	90 93 95 05 	sts	0x0595, r25
    24ae:	80 93 94 05 	sts	0x0594, r24
    24b2:	0e 94 cd 11 	call	0x239a	; 0x239a <floor_calibrateUpdate>
    24b6:	08 95       	ret

000024b8 <floor_measure>:
    24b8:	cf 93       	push	r28
    24ba:	df 93       	push	r29
    24bc:	82 e0       	ldi	r24, 0x02	; 2
    24be:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <adc_read>
    24c2:	cf ef       	ldi	r28, 0xFF	; 255
    24c4:	d3 e0       	ldi	r29, 0x03	; 3
    24c6:	9e 01       	movw	r18, r28
    24c8:	28 1b       	sub	r18, r24
    24ca:	39 0b       	sbc	r19, r25
    24cc:	30 93 97 05 	sts	0x0597, r19
    24d0:	20 93 96 05 	sts	0x0596, r18
    24d4:	83 e0       	ldi	r24, 0x03	; 3
    24d6:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <adc_read>
    24da:	9e 01       	movw	r18, r28
    24dc:	28 1b       	sub	r18, r24
    24de:	39 0b       	sbc	r19, r25
    24e0:	30 93 99 05 	sts	0x0599, r19
    24e4:	20 93 98 05 	sts	0x0598, r18
    24e8:	81 e0       	ldi	r24, 0x01	; 1
    24ea:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <adc_read>
    24ee:	9e 01       	movw	r18, r28
    24f0:	28 1b       	sub	r18, r24
    24f2:	39 0b       	sbc	r19, r25
    24f4:	30 93 9b 05 	sts	0x059B, r19
    24f8:	20 93 9a 05 	sts	0x059A, r18
    24fc:	80 e0       	ldi	r24, 0x00	; 0
    24fe:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <adc_read>
    2502:	c8 1b       	sub	r28, r24
    2504:	d9 0b       	sbc	r29, r25
    2506:	d0 93 9d 05 	sts	0x059D, r29
    250a:	c0 93 9c 05 	sts	0x059C, r28
    250e:	80 e0       	ldi	r24, 0x00	; 0
    2510:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <adc_read>
    2514:	c8 1b       	sub	r28, r24
    2516:	d9 0b       	sbc	r29, r25
    2518:	c1 50       	subi	r28, 0x01	; 1
    251a:	dc 4f       	sbci	r29, 0xFC	; 252
    251c:	d0 93 9d 05 	sts	0x059D, r29
    2520:	c0 93 9c 05 	sts	0x059C, r28
    2524:	c0 91 9a 05 	lds	r28, 0x059A
    2528:	d0 91 9b 05 	lds	r29, 0x059B
    252c:	81 e0       	ldi	r24, 0x01	; 1
    252e:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <adc_read>
    2532:	c1 50       	subi	r28, 0x01	; 1
    2534:	dc 4f       	sbci	r29, 0xFC	; 252
    2536:	c8 1b       	sub	r28, r24
    2538:	d9 0b       	sbc	r29, r25
    253a:	d0 93 9b 05 	sts	0x059B, r29
    253e:	c0 93 9a 05 	sts	0x059A, r28
    2542:	c0 91 98 05 	lds	r28, 0x0598
    2546:	d0 91 99 05 	lds	r29, 0x0599
    254a:	83 e0       	ldi	r24, 0x03	; 3
    254c:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <adc_read>
    2550:	c1 50       	subi	r28, 0x01	; 1
    2552:	dc 4f       	sbci	r29, 0xFC	; 252
    2554:	c8 1b       	sub	r28, r24
    2556:	d9 0b       	sbc	r29, r25
    2558:	d0 93 99 05 	sts	0x0599, r29
    255c:	c0 93 98 05 	sts	0x0598, r28
    2560:	c0 91 96 05 	lds	r28, 0x0596
    2564:	d0 91 97 05 	lds	r29, 0x0597
    2568:	82 e0       	ldi	r24, 0x02	; 2
    256a:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <adc_read>
    256e:	c1 50       	subi	r28, 0x01	; 1
    2570:	dc 4f       	sbci	r29, 0xFC	; 252
    2572:	c8 1b       	sub	r28, r24
    2574:	d9 0b       	sbc	r29, r25
    2576:	d0 93 97 05 	sts	0x0597, r29
    257a:	c0 93 96 05 	sts	0x0596, r28
    257e:	df 91       	pop	r29
    2580:	cf 91       	pop	r28
    2582:	08 95       	ret

00002584 <floor_measure_diff>:
    2584:	80 91 62 00 	lds	r24, 0x0062
    2588:	8f 7b       	andi	r24, 0xBF	; 191
    258a:	80 93 62 00 	sts	0x0062, r24
    258e:	81 e0       	ldi	r24, 0x01	; 1
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	0e 94 62 09 	call	0x12c4	; 0x12c4 <delay>
    2596:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <floor_measure>
    259a:	80 91 96 05 	lds	r24, 0x0596
    259e:	90 91 97 05 	lds	r25, 0x0597
    25a2:	90 93 9f 05 	sts	0x059F, r25
    25a6:	80 93 9e 05 	sts	0x059E, r24
    25aa:	80 91 98 05 	lds	r24, 0x0598
    25ae:	90 91 99 05 	lds	r25, 0x0599
    25b2:	90 93 a1 05 	sts	0x05A1, r25
    25b6:	80 93 a0 05 	sts	0x05A0, r24
    25ba:	80 91 9a 05 	lds	r24, 0x059A
    25be:	90 91 9b 05 	lds	r25, 0x059B
    25c2:	90 93 a3 05 	sts	0x05A3, r25
    25c6:	80 93 a2 05 	sts	0x05A2, r24
    25ca:	80 91 9c 05 	lds	r24, 0x059C
    25ce:	90 91 9d 05 	lds	r25, 0x059D
    25d2:	90 93 a5 05 	sts	0x05A5, r25
    25d6:	80 93 a4 05 	sts	0x05A4, r24
    25da:	80 91 62 00 	lds	r24, 0x0062
    25de:	80 64       	ori	r24, 0x40	; 64
    25e0:	80 93 62 00 	sts	0x0062, r24
    25e4:	81 e0       	ldi	r24, 0x01	; 1
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	0e 94 62 09 	call	0x12c4	; 0x12c4 <delay>
    25ec:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <floor_measure>
    25f0:	20 91 96 05 	lds	r18, 0x0596
    25f4:	30 91 97 05 	lds	r19, 0x0597
    25f8:	80 91 9e 05 	lds	r24, 0x059E
    25fc:	90 91 9f 05 	lds	r25, 0x059F
    2600:	28 17       	cp	r18, r24
    2602:	39 07       	cpc	r19, r25
    2604:	08 f4       	brcc	.+2      	; 0x2608 <floor_measure_diff+0x84>
    2606:	c9 01       	movw	r24, r18
    2608:	28 1b       	sub	r18, r24
    260a:	39 0b       	sbc	r19, r25
    260c:	30 93 97 05 	sts	0x0597, r19
    2610:	20 93 96 05 	sts	0x0596, r18
    2614:	20 91 98 05 	lds	r18, 0x0598
    2618:	30 91 99 05 	lds	r19, 0x0599
    261c:	80 91 a0 05 	lds	r24, 0x05A0
    2620:	90 91 a1 05 	lds	r25, 0x05A1
    2624:	28 17       	cp	r18, r24
    2626:	39 07       	cpc	r19, r25
    2628:	08 f4       	brcc	.+2      	; 0x262c <floor_measure_diff+0xa8>
    262a:	c9 01       	movw	r24, r18
    262c:	28 1b       	sub	r18, r24
    262e:	39 0b       	sbc	r19, r25
    2630:	30 93 99 05 	sts	0x0599, r19
    2634:	20 93 98 05 	sts	0x0598, r18
    2638:	20 91 9a 05 	lds	r18, 0x059A
    263c:	30 91 9b 05 	lds	r19, 0x059B
    2640:	80 91 a2 05 	lds	r24, 0x05A2
    2644:	90 91 a3 05 	lds	r25, 0x05A3
    2648:	28 17       	cp	r18, r24
    264a:	39 07       	cpc	r19, r25
    264c:	08 f4       	brcc	.+2      	; 0x2650 <floor_measure_diff+0xcc>
    264e:	c9 01       	movw	r24, r18
    2650:	28 1b       	sub	r18, r24
    2652:	39 0b       	sbc	r19, r25
    2654:	30 93 9b 05 	sts	0x059B, r19
    2658:	20 93 9a 05 	sts	0x059A, r18
    265c:	20 91 9c 05 	lds	r18, 0x059C
    2660:	30 91 9d 05 	lds	r19, 0x059D
    2664:	80 91 a4 05 	lds	r24, 0x05A4
    2668:	90 91 a5 05 	lds	r25, 0x05A5
    266c:	28 17       	cp	r18, r24
    266e:	39 07       	cpc	r19, r25
    2670:	08 f4       	brcc	.+2      	; 0x2674 <floor_measure_diff+0xf0>
    2672:	c9 01       	movw	r24, r18
    2674:	28 1b       	sub	r18, r24
    2676:	39 0b       	sbc	r19, r25
    2678:	30 93 9d 05 	sts	0x059D, r19
    267c:	20 93 9c 05 	sts	0x059C, r18
    2680:	08 95       	ret

00002682 <floor_calibrateWhite>:
    2682:	1f 93       	push	r17
    2684:	10 92 8f 05 	sts	0x058F, r1
    2688:	10 92 8e 05 	sts	0x058E, r1
    268c:	10 92 91 05 	sts	0x0591, r1
    2690:	10 92 90 05 	sts	0x0590, r1
    2694:	10 92 93 05 	sts	0x0593, r1
    2698:	10 92 92 05 	sts	0x0592, r1
    269c:	10 92 95 05 	sts	0x0595, r1
    26a0:	10 92 94 05 	sts	0x0594, r1
    26a4:	10 e0       	ldi	r17, 0x00	; 0
    26a6:	0e 94 c2 12 	call	0x2584	; 0x2584 <floor_measure_diff>
    26aa:	80 91 96 05 	lds	r24, 0x0596
    26ae:	90 91 97 05 	lds	r25, 0x0597
    26b2:	20 91 8e 05 	lds	r18, 0x058E
    26b6:	30 91 8f 05 	lds	r19, 0x058F
    26ba:	82 0f       	add	r24, r18
    26bc:	93 1f       	adc	r25, r19
    26be:	90 93 8f 05 	sts	0x058F, r25
    26c2:	80 93 8e 05 	sts	0x058E, r24
    26c6:	80 91 98 05 	lds	r24, 0x0598
    26ca:	90 91 99 05 	lds	r25, 0x0599
    26ce:	20 91 90 05 	lds	r18, 0x0590
    26d2:	30 91 91 05 	lds	r19, 0x0591
    26d6:	82 0f       	add	r24, r18
    26d8:	93 1f       	adc	r25, r19
    26da:	90 93 91 05 	sts	0x0591, r25
    26de:	80 93 90 05 	sts	0x0590, r24
    26e2:	80 91 9a 05 	lds	r24, 0x059A
    26e6:	90 91 9b 05 	lds	r25, 0x059B
    26ea:	20 91 92 05 	lds	r18, 0x0592
    26ee:	30 91 93 05 	lds	r19, 0x0593
    26f2:	82 0f       	add	r24, r18
    26f4:	93 1f       	adc	r25, r19
    26f6:	90 93 93 05 	sts	0x0593, r25
    26fa:	80 93 92 05 	sts	0x0592, r24
    26fe:	80 91 9c 05 	lds	r24, 0x059C
    2702:	90 91 9d 05 	lds	r25, 0x059D
    2706:	20 91 94 05 	lds	r18, 0x0594
    270a:	30 91 95 05 	lds	r19, 0x0595
    270e:	82 0f       	add	r24, r18
    2710:	93 1f       	adc	r25, r19
    2712:	90 93 95 05 	sts	0x0595, r25
    2716:	80 93 94 05 	sts	0x0594, r24
    271a:	1f 5f       	subi	r17, 0xFF	; 255
    271c:	10 31       	cpi	r17, 0x10	; 16
    271e:	19 f6       	brne	.-122    	; 0x26a6 <floor_calibrateWhite+0x24>
    2720:	0e 94 cd 11 	call	0x239a	; 0x239a <floor_calibrateUpdate>
    2724:	1f 91       	pop	r17
    2726:	08 95       	ret

00002728 <floor_calibrateBlack>:
    2728:	1f 93       	push	r17
    272a:	10 92 87 05 	sts	0x0587, r1
    272e:	10 92 86 05 	sts	0x0586, r1
    2732:	10 92 89 05 	sts	0x0589, r1
    2736:	10 92 88 05 	sts	0x0588, r1
    273a:	10 92 8b 05 	sts	0x058B, r1
    273e:	10 92 8a 05 	sts	0x058A, r1
    2742:	10 92 8d 05 	sts	0x058D, r1
    2746:	10 92 8c 05 	sts	0x058C, r1
    274a:	10 e0       	ldi	r17, 0x00	; 0
    274c:	0e 94 c2 12 	call	0x2584	; 0x2584 <floor_measure_diff>
    2750:	80 91 96 05 	lds	r24, 0x0596
    2754:	90 91 97 05 	lds	r25, 0x0597
    2758:	20 91 86 05 	lds	r18, 0x0586
    275c:	30 91 87 05 	lds	r19, 0x0587
    2760:	82 0f       	add	r24, r18
    2762:	93 1f       	adc	r25, r19
    2764:	90 93 87 05 	sts	0x0587, r25
    2768:	80 93 86 05 	sts	0x0586, r24
    276c:	80 91 98 05 	lds	r24, 0x0598
    2770:	90 91 99 05 	lds	r25, 0x0599
    2774:	20 91 88 05 	lds	r18, 0x0588
    2778:	30 91 89 05 	lds	r19, 0x0589
    277c:	82 0f       	add	r24, r18
    277e:	93 1f       	adc	r25, r19
    2780:	90 93 89 05 	sts	0x0589, r25
    2784:	80 93 88 05 	sts	0x0588, r24
    2788:	80 91 9a 05 	lds	r24, 0x059A
    278c:	90 91 9b 05 	lds	r25, 0x059B
    2790:	20 91 8a 05 	lds	r18, 0x058A
    2794:	30 91 8b 05 	lds	r19, 0x058B
    2798:	82 0f       	add	r24, r18
    279a:	93 1f       	adc	r25, r19
    279c:	90 93 8b 05 	sts	0x058B, r25
    27a0:	80 93 8a 05 	sts	0x058A, r24
    27a4:	80 91 9c 05 	lds	r24, 0x059C
    27a8:	90 91 9d 05 	lds	r25, 0x059D
    27ac:	20 91 8c 05 	lds	r18, 0x058C
    27b0:	30 91 8d 05 	lds	r19, 0x058D
    27b4:	82 0f       	add	r24, r18
    27b6:	93 1f       	adc	r25, r19
    27b8:	90 93 8d 05 	sts	0x058D, r25
    27bc:	80 93 8c 05 	sts	0x058C, r24
    27c0:	1f 5f       	subi	r17, 0xFF	; 255
    27c2:	10 31       	cpi	r17, 0x10	; 16
    27c4:	19 f6       	brne	.-122    	; 0x274c <floor_calibrateBlack+0x24>
    27c6:	0e 94 cd 11 	call	0x239a	; 0x239a <floor_calibrateUpdate>
    27ca:	1f 91       	pop	r17
    27cc:	08 95       	ret

000027ce <floor_update>:
    27ce:	2f 92       	push	r2
    27d0:	3f 92       	push	r3
    27d2:	4f 92       	push	r4
    27d4:	5f 92       	push	r5
    27d6:	6f 92       	push	r6
    27d8:	7f 92       	push	r7
    27da:	8f 92       	push	r8
    27dc:	9f 92       	push	r9
    27de:	af 92       	push	r10
    27e0:	bf 92       	push	r11
    27e2:	cf 92       	push	r12
    27e4:	df 92       	push	r13
    27e6:	ef 92       	push	r14
    27e8:	ff 92       	push	r15
    27ea:	0f 93       	push	r16
    27ec:	1f 93       	push	r17
    27ee:	0e 94 c2 12 	call	0x2584	; 0x2584 <floor_measure_diff>
    27f2:	e0 90 9e 04 	lds	r14, 0x049E
    27f6:	f0 90 9f 04 	lds	r15, 0x049F
    27fa:	00 e0       	ldi	r16, 0x00	; 0
    27fc:	10 e0       	ldi	r17, 0x00	; 0
    27fe:	80 91 86 05 	lds	r24, 0x0586
    2802:	90 91 87 05 	lds	r25, 0x0587
    2806:	54 e0       	ldi	r21, 0x04	; 4
    2808:	96 95       	lsr	r25
    280a:	87 95       	ror	r24
    280c:	5a 95       	dec	r21
    280e:	e1 f7       	brne	.-8      	; 0x2808 <floor_update+0x3a>
    2810:	60 91 96 05 	lds	r22, 0x0596
    2814:	70 91 97 05 	lds	r23, 0x0597
    2818:	68 1b       	sub	r22, r24
    281a:	79 0b       	sbc	r23, r25
    281c:	80 e0       	ldi	r24, 0x00	; 0
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	a8 01       	movw	r20, r16
    2822:	97 01       	movw	r18, r14
    2824:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsi3>
    2828:	67 2f       	mov	r22, r23
    282a:	78 2f       	mov	r23, r24
    282c:	89 2f       	mov	r24, r25
    282e:	99 27       	eor	r25, r25
    2830:	70 93 97 05 	sts	0x0597, r23
    2834:	60 93 96 05 	sts	0x0596, r22
    2838:	a0 90 a0 04 	lds	r10, 0x04A0
    283c:	b0 90 a1 04 	lds	r11, 0x04A1
    2840:	cc 24       	eor	r12, r12
    2842:	dd 24       	eor	r13, r13
    2844:	80 91 88 05 	lds	r24, 0x0588
    2848:	90 91 89 05 	lds	r25, 0x0589
    284c:	34 e0       	ldi	r19, 0x04	; 4
    284e:	96 95       	lsr	r25
    2850:	87 95       	ror	r24
    2852:	3a 95       	dec	r19
    2854:	e1 f7       	brne	.-8      	; 0x284e <floor_update+0x80>
    2856:	60 91 98 05 	lds	r22, 0x0598
    285a:	70 91 99 05 	lds	r23, 0x0599
    285e:	68 1b       	sub	r22, r24
    2860:	79 0b       	sbc	r23, r25
    2862:	80 e0       	ldi	r24, 0x00	; 0
    2864:	90 e0       	ldi	r25, 0x00	; 0
    2866:	a6 01       	movw	r20, r12
    2868:	95 01       	movw	r18, r10
    286a:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsi3>
    286e:	67 2f       	mov	r22, r23
    2870:	78 2f       	mov	r23, r24
    2872:	89 2f       	mov	r24, r25
    2874:	99 27       	eor	r25, r25
    2876:	70 93 99 05 	sts	0x0599, r23
    287a:	60 93 98 05 	sts	0x0598, r22
    287e:	60 90 a2 04 	lds	r6, 0x04A2
    2882:	70 90 a3 04 	lds	r7, 0x04A3
    2886:	88 24       	eor	r8, r8
    2888:	99 24       	eor	r9, r9
    288a:	80 91 8a 05 	lds	r24, 0x058A
    288e:	90 91 8b 05 	lds	r25, 0x058B
    2892:	b4 e0       	ldi	r27, 0x04	; 4
    2894:	96 95       	lsr	r25
    2896:	87 95       	ror	r24
    2898:	ba 95       	dec	r27
    289a:	e1 f7       	brne	.-8      	; 0x2894 <floor_update+0xc6>
    289c:	60 91 9a 05 	lds	r22, 0x059A
    28a0:	70 91 9b 05 	lds	r23, 0x059B
    28a4:	68 1b       	sub	r22, r24
    28a6:	79 0b       	sbc	r23, r25
    28a8:	80 e0       	ldi	r24, 0x00	; 0
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	a4 01       	movw	r20, r8
    28ae:	93 01       	movw	r18, r6
    28b0:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsi3>
    28b4:	67 2f       	mov	r22, r23
    28b6:	78 2f       	mov	r23, r24
    28b8:	89 2f       	mov	r24, r25
    28ba:	99 27       	eor	r25, r25
    28bc:	70 93 9b 05 	sts	0x059B, r23
    28c0:	60 93 9a 05 	sts	0x059A, r22
    28c4:	20 90 a4 04 	lds	r2, 0x04A4
    28c8:	30 90 a5 04 	lds	r3, 0x04A5
    28cc:	44 24       	eor	r4, r4
    28ce:	55 24       	eor	r5, r5
    28d0:	80 91 8c 05 	lds	r24, 0x058C
    28d4:	90 91 8d 05 	lds	r25, 0x058D
    28d8:	f4 e0       	ldi	r31, 0x04	; 4
    28da:	96 95       	lsr	r25
    28dc:	87 95       	ror	r24
    28de:	fa 95       	dec	r31
    28e0:	e1 f7       	brne	.-8      	; 0x28da <floor_update+0x10c>
    28e2:	60 91 9c 05 	lds	r22, 0x059C
    28e6:	70 91 9d 05 	lds	r23, 0x059D
    28ea:	68 1b       	sub	r22, r24
    28ec:	79 0b       	sbc	r23, r25
    28ee:	80 e0       	ldi	r24, 0x00	; 0
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	a2 01       	movw	r20, r4
    28f4:	91 01       	movw	r18, r2
    28f6:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsi3>
    28fa:	67 2f       	mov	r22, r23
    28fc:	78 2f       	mov	r23, r24
    28fe:	89 2f       	mov	r24, r25
    2900:	99 27       	eor	r25, r25
    2902:	70 93 9d 05 	sts	0x059D, r23
    2906:	60 93 9c 05 	sts	0x059C, r22
    290a:	60 91 9e 05 	lds	r22, 0x059E
    290e:	70 91 9f 05 	lds	r23, 0x059F
    2912:	80 e0       	ldi	r24, 0x00	; 0
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	a8 01       	movw	r20, r16
    2918:	97 01       	movw	r18, r14
    291a:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsi3>
    291e:	67 2f       	mov	r22, r23
    2920:	78 2f       	mov	r23, r24
    2922:	89 2f       	mov	r24, r25
    2924:	99 27       	eor	r25, r25
    2926:	70 93 9f 05 	sts	0x059F, r23
    292a:	60 93 9e 05 	sts	0x059E, r22
    292e:	60 91 a0 05 	lds	r22, 0x05A0
    2932:	70 91 a1 05 	lds	r23, 0x05A1
    2936:	80 e0       	ldi	r24, 0x00	; 0
    2938:	90 e0       	ldi	r25, 0x00	; 0
    293a:	a6 01       	movw	r20, r12
    293c:	95 01       	movw	r18, r10
    293e:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsi3>
    2942:	67 2f       	mov	r22, r23
    2944:	78 2f       	mov	r23, r24
    2946:	89 2f       	mov	r24, r25
    2948:	99 27       	eor	r25, r25
    294a:	70 93 a1 05 	sts	0x05A1, r23
    294e:	60 93 a0 05 	sts	0x05A0, r22
    2952:	60 91 a2 05 	lds	r22, 0x05A2
    2956:	70 91 a3 05 	lds	r23, 0x05A3
    295a:	80 e0       	ldi	r24, 0x00	; 0
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	a4 01       	movw	r20, r8
    2960:	93 01       	movw	r18, r6
    2962:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsi3>
    2966:	67 2f       	mov	r22, r23
    2968:	78 2f       	mov	r23, r24
    296a:	89 2f       	mov	r24, r25
    296c:	99 27       	eor	r25, r25
    296e:	70 93 a3 05 	sts	0x05A3, r23
    2972:	60 93 a2 05 	sts	0x05A2, r22
    2976:	60 91 a4 05 	lds	r22, 0x05A4
    297a:	70 91 a5 05 	lds	r23, 0x05A5
    297e:	80 e0       	ldi	r24, 0x00	; 0
    2980:	90 e0       	ldi	r25, 0x00	; 0
    2982:	a2 01       	movw	r20, r4
    2984:	91 01       	movw	r18, r2
    2986:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsi3>
    298a:	67 2f       	mov	r22, r23
    298c:	78 2f       	mov	r23, r24
    298e:	89 2f       	mov	r24, r25
    2990:	99 27       	eor	r25, r25
    2992:	70 93 a5 05 	sts	0x05A5, r23
    2996:	60 93 a4 05 	sts	0x05A4, r22
    299a:	1f 91       	pop	r17
    299c:	0f 91       	pop	r16
    299e:	ff 90       	pop	r15
    29a0:	ef 90       	pop	r14
    29a2:	df 90       	pop	r13
    29a4:	cf 90       	pop	r12
    29a6:	bf 90       	pop	r11
    29a8:	af 90       	pop	r10
    29aa:	9f 90       	pop	r9
    29ac:	8f 90       	pop	r8
    29ae:	7f 90       	pop	r7
    29b0:	6f 90       	pop	r6
    29b2:	5f 90       	pop	r5
    29b4:	4f 90       	pop	r4
    29b6:	3f 90       	pop	r3
    29b8:	2f 90       	pop	r2
    29ba:	08 95       	ret

000029bc <floor_init>:
    29bc:	0e 94 27 12 	call	0x244e	; 0x244e <floor_readPersistent>
    29c0:	e2 e6       	ldi	r30, 0x62	; 98
    29c2:	f0 e0       	ldi	r31, 0x00	; 0
    29c4:	80 81       	ld	r24, Z
    29c6:	8f 7b       	andi	r24, 0xBF	; 191
    29c8:	80 83       	st	Z, r24
    29ca:	e1 e6       	ldi	r30, 0x61	; 97
    29cc:	f0 e0       	ldi	r31, 0x00	; 0
    29ce:	80 81       	ld	r24, Z
    29d0:	80 64       	ori	r24, 0x40	; 64
    29d2:	80 83       	st	Z, r24
    29d4:	81 e0       	ldi	r24, 0x01	; 1
    29d6:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <adc_init>
    29da:	80 e0       	ldi	r24, 0x00	; 0
    29dc:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <adc_init>
    29e0:	82 e0       	ldi	r24, 0x02	; 2
    29e2:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <adc_init>
    29e6:	83 e0       	ldi	r24, 0x03	; 3
    29e8:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <adc_init>
    29ec:	08 95       	ret

000029ee <bot_update>:
    29ee:	87 e0       	ldi	r24, 0x07	; 7
    29f0:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <adc_read>
    29f4:	90 93 a7 05 	sts	0x05A7, r25
    29f8:	80 93 a6 05 	sts	0x05A6, r24
    29fc:	08 95       	ret

000029fe <bot_init>:
    29fe:	8f 9a       	sbi	0x11, 7	; 17
    2a00:	97 98       	cbi	0x12, 7	; 18
    2a02:	8a e0       	ldi	r24, 0x0A	; 10
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	0e 94 62 09 	call	0x12c4	; 0x12c4 <delay>
    2a0a:	97 9a       	sbi	0x12, 7	; 18
    2a0c:	84 e6       	ldi	r24, 0x64	; 100
    2a0e:	90 e0       	ldi	r25, 0x00	; 0
    2a10:	0e 94 62 09 	call	0x12c4	; 0x12c4 <delay>
    2a14:	08 95       	ret

00002a16 <leds_init>:
    2a16:	bf 9a       	sbi	0x17, 7	; 23
    2a18:	c7 9a       	sbi	0x18, 7	; 24
    2a1a:	bd 9a       	sbi	0x17, 5	; 23
    2a1c:	be 9a       	sbi	0x17, 6	; 23
    2a1e:	8f ef       	ldi	r24, 0xFF	; 255
    2a20:	82 b9       	out	0x02, r24	; 2
    2a22:	84 bb       	out	0x14, r24	; 20
    2a24:	08 95       	ret

00002a26 <leds_set_status>:
    2a26:	48 2f       	mov	r20, r24
    2a28:	80 ff       	sbrs	r24, 0
    2a2a:	0b c0       	rjmp	.+22     	; 0x2a42 <leds_set_status+0x1c>
    2a2c:	95 b3       	in	r25, 0x15	; 21
    2a2e:	21 e0       	ldi	r18, 0x01	; 1
    2a30:	30 e0       	ldi	r19, 0x00	; 0
    2a32:	06 2e       	mov	r0, r22
    2a34:	02 c0       	rjmp	.+4      	; 0x2a3a <leds_set_status+0x14>
    2a36:	22 0f       	add	r18, r18
    2a38:	33 1f       	adc	r19, r19
    2a3a:	0a 94       	dec	r0
    2a3c:	e2 f7       	brpl	.-8      	; 0x2a36 <leds_set_status+0x10>
    2a3e:	92 2b       	or	r25, r18
    2a40:	0c c0       	rjmp	.+24     	; 0x2a5a <leds_set_status+0x34>
    2a42:	85 b3       	in	r24, 0x15	; 21
    2a44:	21 e0       	ldi	r18, 0x01	; 1
    2a46:	30 e0       	ldi	r19, 0x00	; 0
    2a48:	06 2e       	mov	r0, r22
    2a4a:	02 c0       	rjmp	.+4      	; 0x2a50 <leds_set_status+0x2a>
    2a4c:	22 0f       	add	r18, r18
    2a4e:	33 1f       	adc	r19, r19
    2a50:	0a 94       	dec	r0
    2a52:	e2 f7       	brpl	.-8      	; 0x2a4c <leds_set_status+0x26>
    2a54:	92 2f       	mov	r25, r18
    2a56:	90 95       	com	r25
    2a58:	98 23       	and	r25, r24
    2a5a:	95 bb       	out	0x15, r25	; 21
    2a5c:	41 ff       	sbrs	r20, 1
    2a5e:	0a c0       	rjmp	.+20     	; 0x2a74 <leds_set_status+0x4e>
    2a60:	83 b1       	in	r24, 0x03	; 3
    2a62:	21 e0       	ldi	r18, 0x01	; 1
    2a64:	30 e0       	ldi	r19, 0x00	; 0
    2a66:	02 c0       	rjmp	.+4      	; 0x2a6c <leds_set_status+0x46>
    2a68:	22 0f       	add	r18, r18
    2a6a:	33 1f       	adc	r19, r19
    2a6c:	6a 95       	dec	r22
    2a6e:	e2 f7       	brpl	.-8      	; 0x2a68 <leds_set_status+0x42>
    2a70:	82 2b       	or	r24, r18
    2a72:	0a c0       	rjmp	.+20     	; 0x2a88 <leds_set_status+0x62>
    2a74:	23 b1       	in	r18, 0x03	; 3
    2a76:	81 e0       	ldi	r24, 0x01	; 1
    2a78:	90 e0       	ldi	r25, 0x00	; 0
    2a7a:	02 c0       	rjmp	.+4      	; 0x2a80 <leds_set_status+0x5a>
    2a7c:	88 0f       	add	r24, r24
    2a7e:	99 1f       	adc	r25, r25
    2a80:	6a 95       	dec	r22
    2a82:	e2 f7       	brpl	.-8      	; 0x2a7c <leds_set_status+0x56>
    2a84:	80 95       	com	r24
    2a86:	82 23       	and	r24, r18
    2a88:	83 b9       	out	0x03, r24	; 3
    2a8a:	08 95       	ret

00002a8c <leds_set_status_intensity>:
    2a8c:	90 93 af 05 	sts	0x05AF, r25
    2a90:	80 93 ae 05 	sts	0x05AE, r24
    2a94:	08 95       	ret

00002a96 <leds_get_status_intensity>:
    2a96:	80 91 ae 05 	lds	r24, 0x05AE
    2a9a:	90 91 af 05 	lds	r25, 0x05AF
    2a9e:	08 95       	ret

00002aa0 <leds_set_headlights>:
    2aa0:	90 93 a9 05 	sts	0x05A9, r25
    2aa4:	80 93 a8 05 	sts	0x05A8, r24
    2aa8:	08 95       	ret

00002aaa <leds_get_headlights>:
    2aaa:	80 91 a8 05 	lds	r24, 0x05A8
    2aae:	90 91 a9 05 	lds	r25, 0x05A9
    2ab2:	08 95       	ret

00002ab4 <leds_set_displaylight>:
    2ab4:	90 93 ab 05 	sts	0x05AB, r25
    2ab8:	80 93 aa 05 	sts	0x05AA, r24
    2abc:	08 95       	ret

00002abe <leds_get_displaylight>:
    2abe:	80 91 aa 05 	lds	r24, 0x05AA
    2ac2:	90 91 ab 05 	lds	r25, 0x05AB
    2ac6:	08 95       	ret

00002ac8 <pwm_init>:
    2ac8:	10 92 b1 05 	sts	0x05B1, r1
    2acc:	10 92 b0 05 	sts	0x05B0, r1
    2ad0:	10 92 ad 05 	sts	0x05AD, r1
    2ad4:	10 92 ac 05 	sts	0x05AC, r1
    2ad8:	10 92 b2 05 	sts	0x05B2, r1
    2adc:	10 92 b3 05 	sts	0x05B3, r1
    2ae0:	10 92 b4 05 	sts	0x05B4, r1
    2ae4:	10 92 b5 05 	sts	0x05B5, r1
    2ae8:	10 92 a9 05 	sts	0x05A9, r1
    2aec:	10 92 a8 05 	sts	0x05A8, r1
    2af0:	10 92 ab 05 	sts	0x05AB, r1
    2af4:	10 92 aa 05 	sts	0x05AA, r1
    2af8:	8f ef       	ldi	r24, 0xFF	; 255
    2afa:	93 e0       	ldi	r25, 0x03	; 3
    2afc:	90 93 af 05 	sts	0x05AF, r25
    2b00:	80 93 ae 05 	sts	0x05AE, r24
    2b04:	c5 98       	cbi	0x18, 5	; 24
    2b06:	c6 98       	cbi	0x18, 6	; 24
    2b08:	bd 9a       	sbi	0x17, 5	; 23
    2b0a:	be 9a       	sbi	0x17, 6	; 23
    2b0c:	bf 9a       	sbi	0x17, 7	; 23
    2b0e:	c7 9a       	sbi	0x18, 7	; 24
    2b10:	1d bc       	out	0x2d, r1	; 45
    2b12:	1c bc       	out	0x2c, r1	; 44
    2b14:	8a ea       	ldi	r24, 0xAA	; 170
    2b16:	8f bd       	out	0x2f, r24	; 47
    2b18:	82 e1       	ldi	r24, 0x12	; 18
    2b1a:	8e bd       	out	0x2e, r24	; 46
    2b1c:	80 e0       	ldi	r24, 0x00	; 0
    2b1e:	94 e0       	ldi	r25, 0x04	; 4
    2b20:	97 bd       	out	0x27, r25	; 39
    2b22:	86 bd       	out	0x26, r24	; 38
    2b24:	87 b7       	in	r24, 0x37	; 55
    2b26:	84 60       	ori	r24, 0x04	; 4
    2b28:	87 bf       	out	0x37, r24	; 55
    2b2a:	08 95       	ret

00002b2c <__vector_14>:
    2b2c:	1f 92       	push	r1
    2b2e:	0f 92       	push	r0
    2b30:	0f b6       	in	r0, 0x3f	; 63
    2b32:	0f 92       	push	r0
    2b34:	11 24       	eor	r1, r1
    2b36:	2f 93       	push	r18
    2b38:	3f 93       	push	r19
    2b3a:	4f 93       	push	r20
    2b3c:	8f 93       	push	r24
    2b3e:	9f 93       	push	r25
    2b40:	af 93       	push	r26
    2b42:	bf 93       	push	r27
    2b44:	80 91 b0 05 	lds	r24, 0x05B0
    2b48:	90 91 b1 05 	lds	r25, 0x05B1
    2b4c:	9c 01       	movw	r18, r24
    2b4e:	28 5e       	subi	r18, 0xE8	; 232
    2b50:	3f 4f       	sbci	r19, 0xFF	; 255
    2b52:	30 93 b1 05 	sts	0x05B1, r19
    2b56:	20 93 b0 05 	sts	0x05B0, r18
    2b5a:	43 e0       	ldi	r20, 0x03	; 3
    2b5c:	28 3e       	cpi	r18, 0xE8	; 232
    2b5e:	34 07       	cpc	r19, r20
    2b60:	78 f0       	brcs	.+30     	; 0x2b80 <__vector_14+0x54>
    2b62:	80 5d       	subi	r24, 0xD0	; 208
    2b64:	93 40       	sbci	r25, 0x03	; 3
    2b66:	90 93 b1 05 	sts	0x05B1, r25
    2b6a:	80 93 b0 05 	sts	0x05B0, r24
    2b6e:	80 91 ac 05 	lds	r24, 0x05AC
    2b72:	90 91 ad 05 	lds	r25, 0x05AD
    2b76:	01 96       	adiw	r24, 0x01	; 1
    2b78:	90 93 ad 05 	sts	0x05AD, r25
    2b7c:	80 93 ac 05 	sts	0x05AC, r24
    2b80:	80 91 ac 05 	lds	r24, 0x05AC
    2b84:	90 91 ad 05 	lds	r25, 0x05AD
    2b88:	9c 01       	movw	r18, r24
    2b8a:	2f 5f       	subi	r18, 0xFF	; 255
    2b8c:	3f 4f       	sbci	r19, 0xFF	; 255
    2b8e:	30 93 ad 05 	sts	0x05AD, r19
    2b92:	20 93 ac 05 	sts	0x05AC, r18
    2b96:	43 e0       	ldi	r20, 0x03	; 3
    2b98:	28 3e       	cpi	r18, 0xE8	; 232
    2b9a:	34 07       	cpc	r19, r20
    2b9c:	c8 f0       	brcs	.+50     	; 0x2bd0 <__vector_14+0xa4>
    2b9e:	87 5e       	subi	r24, 0xE7	; 231
    2ba0:	93 40       	sbci	r25, 0x03	; 3
    2ba2:	90 93 ad 05 	sts	0x05AD, r25
    2ba6:	80 93 ac 05 	sts	0x05AC, r24
    2baa:	80 91 b2 05 	lds	r24, 0x05B2
    2bae:	90 91 b3 05 	lds	r25, 0x05B3
    2bb2:	a0 91 b4 05 	lds	r26, 0x05B4
    2bb6:	b0 91 b5 05 	lds	r27, 0x05B5
    2bba:	01 96       	adiw	r24, 0x01	; 1
    2bbc:	a1 1d       	adc	r26, r1
    2bbe:	b1 1d       	adc	r27, r1
    2bc0:	80 93 b2 05 	sts	0x05B2, r24
    2bc4:	90 93 b3 05 	sts	0x05B3, r25
    2bc8:	a0 93 b4 05 	sts	0x05B4, r26
    2bcc:	b0 93 b5 05 	sts	0x05B5, r27
    2bd0:	80 91 a8 05 	lds	r24, 0x05A8
    2bd4:	90 91 a9 05 	lds	r25, 0x05A9
    2bd8:	23 e0       	ldi	r18, 0x03	; 3
    2bda:	8f 3f       	cpi	r24, 0xFF	; 255
    2bdc:	92 07       	cpc	r25, r18
    2bde:	10 f0       	brcs	.+4      	; 0x2be4 <__vector_14+0xb8>
    2be0:	80 e0       	ldi	r24, 0x00	; 0
    2be2:	94 e0       	ldi	r25, 0x04	; 4
    2be4:	9b bd       	out	0x2b, r25	; 43
    2be6:	8a bd       	out	0x2a, r24	; 42
    2be8:	80 91 aa 05 	lds	r24, 0x05AA
    2bec:	90 91 ab 05 	lds	r25, 0x05AB
    2bf0:	43 e0       	ldi	r20, 0x03	; 3
    2bf2:	8f 3f       	cpi	r24, 0xFF	; 255
    2bf4:	94 07       	cpc	r25, r20
    2bf6:	10 f0       	brcs	.+4      	; 0x2bfc <__vector_14+0xd0>
    2bf8:	80 e0       	ldi	r24, 0x00	; 0
    2bfa:	94 e0       	ldi	r25, 0x04	; 4
    2bfc:	99 bd       	out	0x29, r25	; 41
    2bfe:	88 bd       	out	0x28, r24	; 40
    2c00:	80 91 ae 05 	lds	r24, 0x05AE
    2c04:	90 91 af 05 	lds	r25, 0x05AF
    2c08:	23 e0       	ldi	r18, 0x03	; 3
    2c0a:	8f 3f       	cpi	r24, 0xFF	; 255
    2c0c:	92 07       	cpc	r25, r18
    2c0e:	10 f0       	brcs	.+4      	; 0x2c14 <__vector_14+0xe8>
    2c10:	80 e0       	ldi	r24, 0x00	; 0
    2c12:	94 e0       	ldi	r25, 0x04	; 4
    2c14:	90 93 79 00 	sts	0x0079, r25
    2c18:	80 93 78 00 	sts	0x0078, r24
    2c1c:	bf 91       	pop	r27
    2c1e:	af 91       	pop	r26
    2c20:	9f 91       	pop	r25
    2c22:	8f 91       	pop	r24
    2c24:	4f 91       	pop	r20
    2c26:	3f 91       	pop	r19
    2c28:	2f 91       	pop	r18
    2c2a:	0f 90       	pop	r0
    2c2c:	0f be       	out	0x3f, r0	; 63
    2c2e:	0f 90       	pop	r0
    2c30:	1f 90       	pop	r1
    2c32:	18 95       	reti

00002c34 <adc_init>:
    2c34:	e1 e6       	ldi	r30, 0x61	; 97
    2c36:	f0 e0       	ldi	r31, 0x00	; 0
    2c38:	90 81       	ld	r25, Z
    2c3a:	21 e0       	ldi	r18, 0x01	; 1
    2c3c:	30 e0       	ldi	r19, 0x00	; 0
    2c3e:	02 c0       	rjmp	.+4      	; 0x2c44 <adc_init+0x10>
    2c40:	22 0f       	add	r18, r18
    2c42:	33 1f       	adc	r19, r19
    2c44:	8a 95       	dec	r24
    2c46:	e2 f7       	brpl	.-8      	; 0x2c40 <adc_init+0xc>
    2c48:	20 95       	com	r18
    2c4a:	92 23       	and	r25, r18
    2c4c:	90 83       	st	Z, r25
    2c4e:	e2 e6       	ldi	r30, 0x62	; 98
    2c50:	f0 e0       	ldi	r31, 0x00	; 0
    2c52:	80 81       	ld	r24, Z
    2c54:	82 23       	and	r24, r18
    2c56:	80 83       	st	Z, r24
    2c58:	08 95       	ret

00002c5a <adc_read>:
    2c5a:	90 e4       	ldi	r25, 0x40	; 64
    2c5c:	97 b9       	out	0x07, r25	; 7
    2c5e:	97 b1       	in	r25, 0x07	; 7
    2c60:	87 70       	andi	r24, 0x07	; 7
    2c62:	89 2b       	or	r24, r25
    2c64:	87 b9       	out	0x07, r24	; 7
    2c66:	87 ec       	ldi	r24, 0xC7	; 199
    2c68:	86 b9       	out	0x06, r24	; 6
    2c6a:	01 c0       	rjmp	.+2      	; 0x2c6e <adc_read+0x14>
    2c6c:	00 00       	nop
    2c6e:	36 99       	sbic	0x06, 6	; 6
    2c70:	fd cf       	rjmp	.-6      	; 0x2c6c <adc_read+0x12>
    2c72:	84 b1       	in	r24, 0x04	; 4
    2c74:	95 b1       	in	r25, 0x05	; 5
    2c76:	39 2f       	mov	r19, r25
    2c78:	20 e0       	ldi	r18, 0x00	; 0
    2c7a:	28 0f       	add	r18, r24
    2c7c:	31 1d       	adc	r19, r1
    2c7e:	80 91 b6 05 	lds	r24, 0x05B6
    2c82:	90 91 b7 05 	lds	r25, 0x05B7
    2c86:	82 0f       	add	r24, r18
    2c88:	93 1f       	adc	r25, r19
    2c8a:	90 93 b7 05 	sts	0x05B7, r25
    2c8e:	80 93 b6 05 	sts	0x05B6, r24
    2c92:	c9 01       	movw	r24, r18
    2c94:	08 95       	ret

00002c96 <adc_get_random_seed>:
    2c96:	80 91 b6 05 	lds	r24, 0x05B6
    2c9a:	90 91 b7 05 	lds	r25, 0x05B7
    2c9e:	08 95       	ret

00002ca0 <vfprintf>:
    2ca0:	2f 92       	push	r2
    2ca2:	3f 92       	push	r3
    2ca4:	4f 92       	push	r4
    2ca6:	5f 92       	push	r5
    2ca8:	6f 92       	push	r6
    2caa:	7f 92       	push	r7
    2cac:	8f 92       	push	r8
    2cae:	9f 92       	push	r9
    2cb0:	af 92       	push	r10
    2cb2:	bf 92       	push	r11
    2cb4:	cf 92       	push	r12
    2cb6:	df 92       	push	r13
    2cb8:	ef 92       	push	r14
    2cba:	ff 92       	push	r15
    2cbc:	0f 93       	push	r16
    2cbe:	1f 93       	push	r17
    2cc0:	cf 93       	push	r28
    2cc2:	df 93       	push	r29
    2cc4:	cd b7       	in	r28, 0x3d	; 61
    2cc6:	de b7       	in	r29, 0x3e	; 62
    2cc8:	63 97       	sbiw	r28, 0x13	; 19
    2cca:	0f b6       	in	r0, 0x3f	; 63
    2ccc:	f8 94       	cli
    2cce:	de bf       	out	0x3e, r29	; 62
    2cd0:	0f be       	out	0x3f, r0	; 63
    2cd2:	cd bf       	out	0x3d, r28	; 61
    2cd4:	7c 01       	movw	r14, r24
    2cd6:	1b 01       	movw	r2, r22
    2cd8:	6a 01       	movw	r12, r20
    2cda:	fc 01       	movw	r30, r24
    2cdc:	17 82       	std	Z+7, r1	; 0x07
    2cde:	16 82       	std	Z+6, r1	; 0x06
    2ce0:	83 81       	ldd	r24, Z+3	; 0x03
    2ce2:	81 ff       	sbrs	r24, 1
    2ce4:	66 c3       	rjmp	.+1740   	; 0x33b2 <vfprintf+0x712>
    2ce6:	be 01       	movw	r22, r28
    2ce8:	6f 5f       	subi	r22, 0xFF	; 255
    2cea:	7f 4f       	sbci	r23, 0xFF	; 255
    2cec:	4b 01       	movw	r8, r22
    2cee:	f7 01       	movw	r30, r14
    2cf0:	93 81       	ldd	r25, Z+3	; 0x03
    2cf2:	f1 01       	movw	r30, r2
    2cf4:	93 fd       	sbrc	r25, 3
    2cf6:	85 91       	lpm	r24, Z+
    2cf8:	93 ff       	sbrs	r25, 3
    2cfa:	81 91       	ld	r24, Z+
    2cfc:	1f 01       	movw	r2, r30
    2cfe:	88 23       	and	r24, r24
    2d00:	09 f4       	brne	.+2      	; 0x2d04 <vfprintf+0x64>
    2d02:	53 c3       	rjmp	.+1702   	; 0x33aa <vfprintf+0x70a>
    2d04:	85 32       	cpi	r24, 0x25	; 37
    2d06:	39 f4       	brne	.+14     	; 0x2d16 <vfprintf+0x76>
    2d08:	93 fd       	sbrc	r25, 3
    2d0a:	85 91       	lpm	r24, Z+
    2d0c:	93 ff       	sbrs	r25, 3
    2d0e:	81 91       	ld	r24, Z+
    2d10:	1f 01       	movw	r2, r30
    2d12:	85 32       	cpi	r24, 0x25	; 37
    2d14:	39 f4       	brne	.+14     	; 0x2d24 <vfprintf+0x84>
    2d16:	b7 01       	movw	r22, r14
    2d18:	90 e0       	ldi	r25, 0x00	; 0
    2d1a:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <fputc>
    2d1e:	56 01       	movw	r10, r12
    2d20:	65 01       	movw	r12, r10
    2d22:	e5 cf       	rjmp	.-54     	; 0x2cee <vfprintf+0x4e>
    2d24:	10 e0       	ldi	r17, 0x00	; 0
    2d26:	51 2c       	mov	r5, r1
    2d28:	20 e0       	ldi	r18, 0x00	; 0
    2d2a:	20 32       	cpi	r18, 0x20	; 32
    2d2c:	a0 f4       	brcc	.+40     	; 0x2d56 <vfprintf+0xb6>
    2d2e:	8b 32       	cpi	r24, 0x2B	; 43
    2d30:	69 f0       	breq	.+26     	; 0x2d4c <vfprintf+0xac>
    2d32:	30 f4       	brcc	.+12     	; 0x2d40 <vfprintf+0xa0>
    2d34:	80 32       	cpi	r24, 0x20	; 32
    2d36:	59 f0       	breq	.+22     	; 0x2d4e <vfprintf+0xae>
    2d38:	83 32       	cpi	r24, 0x23	; 35
    2d3a:	69 f4       	brne	.+26     	; 0x2d56 <vfprintf+0xb6>
    2d3c:	20 61       	ori	r18, 0x10	; 16
    2d3e:	2c c0       	rjmp	.+88     	; 0x2d98 <vfprintf+0xf8>
    2d40:	8d 32       	cpi	r24, 0x2D	; 45
    2d42:	39 f0       	breq	.+14     	; 0x2d52 <vfprintf+0xb2>
    2d44:	80 33       	cpi	r24, 0x30	; 48
    2d46:	39 f4       	brne	.+14     	; 0x2d56 <vfprintf+0xb6>
    2d48:	21 60       	ori	r18, 0x01	; 1
    2d4a:	26 c0       	rjmp	.+76     	; 0x2d98 <vfprintf+0xf8>
    2d4c:	22 60       	ori	r18, 0x02	; 2
    2d4e:	24 60       	ori	r18, 0x04	; 4
    2d50:	23 c0       	rjmp	.+70     	; 0x2d98 <vfprintf+0xf8>
    2d52:	28 60       	ori	r18, 0x08	; 8
    2d54:	21 c0       	rjmp	.+66     	; 0x2d98 <vfprintf+0xf8>
    2d56:	27 fd       	sbrc	r18, 7
    2d58:	27 c0       	rjmp	.+78     	; 0x2da8 <vfprintf+0x108>
    2d5a:	30 ed       	ldi	r19, 0xD0	; 208
    2d5c:	38 0f       	add	r19, r24
    2d5e:	3a 30       	cpi	r19, 0x0A	; 10
    2d60:	78 f4       	brcc	.+30     	; 0x2d80 <vfprintf+0xe0>
    2d62:	26 ff       	sbrs	r18, 6
    2d64:	06 c0       	rjmp	.+12     	; 0x2d72 <vfprintf+0xd2>
    2d66:	fa e0       	ldi	r31, 0x0A	; 10
    2d68:	1f 9f       	mul	r17, r31
    2d6a:	30 0d       	add	r19, r0
    2d6c:	11 24       	eor	r1, r1
    2d6e:	13 2f       	mov	r17, r19
    2d70:	13 c0       	rjmp	.+38     	; 0x2d98 <vfprintf+0xf8>
    2d72:	6a e0       	ldi	r22, 0x0A	; 10
    2d74:	56 9e       	mul	r5, r22
    2d76:	30 0d       	add	r19, r0
    2d78:	11 24       	eor	r1, r1
    2d7a:	53 2e       	mov	r5, r19
    2d7c:	20 62       	ori	r18, 0x20	; 32
    2d7e:	0c c0       	rjmp	.+24     	; 0x2d98 <vfprintf+0xf8>
    2d80:	8e 32       	cpi	r24, 0x2E	; 46
    2d82:	21 f4       	brne	.+8      	; 0x2d8c <vfprintf+0xec>
    2d84:	26 fd       	sbrc	r18, 6
    2d86:	11 c3       	rjmp	.+1570   	; 0x33aa <vfprintf+0x70a>
    2d88:	20 64       	ori	r18, 0x40	; 64
    2d8a:	06 c0       	rjmp	.+12     	; 0x2d98 <vfprintf+0xf8>
    2d8c:	8c 36       	cpi	r24, 0x6C	; 108
    2d8e:	11 f4       	brne	.+4      	; 0x2d94 <vfprintf+0xf4>
    2d90:	20 68       	ori	r18, 0x80	; 128
    2d92:	02 c0       	rjmp	.+4      	; 0x2d98 <vfprintf+0xf8>
    2d94:	88 36       	cpi	r24, 0x68	; 104
    2d96:	41 f4       	brne	.+16     	; 0x2da8 <vfprintf+0x108>
    2d98:	f1 01       	movw	r30, r2
    2d9a:	93 fd       	sbrc	r25, 3
    2d9c:	85 91       	lpm	r24, Z+
    2d9e:	93 ff       	sbrs	r25, 3
    2da0:	81 91       	ld	r24, Z+
    2da2:	1f 01       	movw	r2, r30
    2da4:	81 11       	cpse	r24, r1
    2da6:	c1 cf       	rjmp	.-126    	; 0x2d2a <vfprintf+0x8a>
    2da8:	9b eb       	ldi	r25, 0xBB	; 187
    2daa:	98 0f       	add	r25, r24
    2dac:	93 30       	cpi	r25, 0x03	; 3
    2dae:	18 f4       	brcc	.+6      	; 0x2db6 <vfprintf+0x116>
    2db0:	20 61       	ori	r18, 0x10	; 16
    2db2:	80 5e       	subi	r24, 0xE0	; 224
    2db4:	06 c0       	rjmp	.+12     	; 0x2dc2 <vfprintf+0x122>
    2db6:	9b e9       	ldi	r25, 0x9B	; 155
    2db8:	98 0f       	add	r25, r24
    2dba:	93 30       	cpi	r25, 0x03	; 3
    2dbc:	08 f0       	brcs	.+2      	; 0x2dc0 <vfprintf+0x120>
    2dbe:	aa c1       	rjmp	.+852    	; 0x3114 <vfprintf+0x474>
    2dc0:	2f 7e       	andi	r18, 0xEF	; 239
    2dc2:	26 ff       	sbrs	r18, 6
    2dc4:	16 e0       	ldi	r17, 0x06	; 6
    2dc6:	2f 73       	andi	r18, 0x3F	; 63
    2dc8:	72 2e       	mov	r7, r18
    2dca:	85 36       	cpi	r24, 0x65	; 101
    2dcc:	21 f4       	brne	.+8      	; 0x2dd6 <vfprintf+0x136>
    2dce:	f2 2f       	mov	r31, r18
    2dd0:	f0 64       	ori	r31, 0x40	; 64
    2dd2:	7f 2e       	mov	r7, r31
    2dd4:	08 c0       	rjmp	.+16     	; 0x2de6 <vfprintf+0x146>
    2dd6:	86 36       	cpi	r24, 0x66	; 102
    2dd8:	21 f4       	brne	.+8      	; 0x2de2 <vfprintf+0x142>
    2dda:	62 2f       	mov	r22, r18
    2ddc:	60 68       	ori	r22, 0x80	; 128
    2dde:	76 2e       	mov	r7, r22
    2de0:	02 c0       	rjmp	.+4      	; 0x2de6 <vfprintf+0x146>
    2de2:	11 11       	cpse	r17, r1
    2de4:	11 50       	subi	r17, 0x01	; 1
    2de6:	77 fe       	sbrs	r7, 7
    2de8:	07 c0       	rjmp	.+14     	; 0x2df8 <vfprintf+0x158>
    2dea:	1c 33       	cpi	r17, 0x3C	; 60
    2dec:	48 f4       	brcc	.+18     	; 0x2e00 <vfprintf+0x160>
    2dee:	44 24       	eor	r4, r4
    2df0:	43 94       	inc	r4
    2df2:	41 0e       	add	r4, r17
    2df4:	27 e0       	ldi	r18, 0x07	; 7
    2df6:	0b c0       	rjmp	.+22     	; 0x2e0e <vfprintf+0x16e>
    2df8:	18 30       	cpi	r17, 0x08	; 8
    2dfa:	30 f4       	brcc	.+12     	; 0x2e08 <vfprintf+0x168>
    2dfc:	21 2f       	mov	r18, r17
    2dfe:	06 c0       	rjmp	.+12     	; 0x2e0c <vfprintf+0x16c>
    2e00:	27 e0       	ldi	r18, 0x07	; 7
    2e02:	4c e3       	ldi	r20, 0x3C	; 60
    2e04:	44 2e       	mov	r4, r20
    2e06:	03 c0       	rjmp	.+6      	; 0x2e0e <vfprintf+0x16e>
    2e08:	27 e0       	ldi	r18, 0x07	; 7
    2e0a:	17 e0       	ldi	r17, 0x07	; 7
    2e0c:	41 2c       	mov	r4, r1
    2e0e:	56 01       	movw	r10, r12
    2e10:	74 e0       	ldi	r23, 0x04	; 4
    2e12:	a7 0e       	add	r10, r23
    2e14:	b1 1c       	adc	r11, r1
    2e16:	f6 01       	movw	r30, r12
    2e18:	60 81       	ld	r22, Z
    2e1a:	71 81       	ldd	r23, Z+1	; 0x01
    2e1c:	82 81       	ldd	r24, Z+2	; 0x02
    2e1e:	93 81       	ldd	r25, Z+3	; 0x03
    2e20:	04 2d       	mov	r16, r4
    2e22:	a4 01       	movw	r20, r8
    2e24:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <__ftoa_engine>
    2e28:	6c 01       	movw	r12, r24
    2e2a:	09 81       	ldd	r16, Y+1	; 0x01
    2e2c:	00 ff       	sbrs	r16, 0
    2e2e:	02 c0       	rjmp	.+4      	; 0x2e34 <vfprintf+0x194>
    2e30:	03 ff       	sbrs	r16, 3
    2e32:	06 c0       	rjmp	.+12     	; 0x2e40 <vfprintf+0x1a0>
    2e34:	71 fc       	sbrc	r7, 1
    2e36:	07 c0       	rjmp	.+14     	; 0x2e46 <vfprintf+0x1a6>
    2e38:	72 fc       	sbrc	r7, 2
    2e3a:	08 c0       	rjmp	.+16     	; 0x2e4c <vfprintf+0x1ac>
    2e3c:	61 2c       	mov	r6, r1
    2e3e:	08 c0       	rjmp	.+16     	; 0x2e50 <vfprintf+0x1b0>
    2e40:	3d e2       	ldi	r19, 0x2D	; 45
    2e42:	63 2e       	mov	r6, r19
    2e44:	05 c0       	rjmp	.+10     	; 0x2e50 <vfprintf+0x1b0>
    2e46:	2b e2       	ldi	r18, 0x2B	; 43
    2e48:	62 2e       	mov	r6, r18
    2e4a:	02 c0       	rjmp	.+4      	; 0x2e50 <vfprintf+0x1b0>
    2e4c:	90 e2       	ldi	r25, 0x20	; 32
    2e4e:	69 2e       	mov	r6, r25
    2e50:	80 2f       	mov	r24, r16
    2e52:	8c 70       	andi	r24, 0x0C	; 12
    2e54:	99 f1       	breq	.+102    	; 0x2ebc <vfprintf+0x21c>
    2e56:	66 20       	and	r6, r6
    2e58:	11 f0       	breq	.+4      	; 0x2e5e <vfprintf+0x1be>
    2e5a:	84 e0       	ldi	r24, 0x04	; 4
    2e5c:	01 c0       	rjmp	.+2      	; 0x2e60 <vfprintf+0x1c0>
    2e5e:	83 e0       	ldi	r24, 0x03	; 3
    2e60:	85 15       	cp	r24, r5
    2e62:	10 f0       	brcs	.+4      	; 0x2e68 <vfprintf+0x1c8>
    2e64:	51 2c       	mov	r5, r1
    2e66:	0b c0       	rjmp	.+22     	; 0x2e7e <vfprintf+0x1de>
    2e68:	58 1a       	sub	r5, r24
    2e6a:	73 fc       	sbrc	r7, 3
    2e6c:	08 c0       	rjmp	.+16     	; 0x2e7e <vfprintf+0x1de>
    2e6e:	b7 01       	movw	r22, r14
    2e70:	80 e2       	ldi	r24, 0x20	; 32
    2e72:	90 e0       	ldi	r25, 0x00	; 0
    2e74:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <fputc>
    2e78:	5a 94       	dec	r5
    2e7a:	c9 f7       	brne	.-14     	; 0x2e6e <vfprintf+0x1ce>
    2e7c:	f3 cf       	rjmp	.-26     	; 0x2e64 <vfprintf+0x1c4>
    2e7e:	66 20       	and	r6, r6
    2e80:	29 f0       	breq	.+10     	; 0x2e8c <vfprintf+0x1ec>
    2e82:	b7 01       	movw	r22, r14
    2e84:	86 2d       	mov	r24, r6
    2e86:	90 e0       	ldi	r25, 0x00	; 0
    2e88:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <fputc>
    2e8c:	03 fd       	sbrc	r16, 3
    2e8e:	03 c0       	rjmp	.+6      	; 0x2e96 <vfprintf+0x1f6>
    2e90:	09 eb       	ldi	r16, 0xB9	; 185
    2e92:	10 e0       	ldi	r17, 0x00	; 0
    2e94:	02 c0       	rjmp	.+4      	; 0x2e9a <vfprintf+0x1fa>
    2e96:	05 eb       	ldi	r16, 0xB5	; 181
    2e98:	10 e0       	ldi	r17, 0x00	; 0
    2e9a:	f7 2d       	mov	r31, r7
    2e9c:	f0 71       	andi	r31, 0x10	; 16
    2e9e:	7f 2e       	mov	r7, r31
    2ea0:	f8 01       	movw	r30, r16
    2ea2:	84 91       	lpm	r24, Z
    2ea4:	88 23       	and	r24, r24
    2ea6:	09 f4       	brne	.+2      	; 0x2eaa <vfprintf+0x20a>
    2ea8:	76 c2       	rjmp	.+1260   	; 0x3396 <vfprintf+0x6f6>
    2eaa:	71 10       	cpse	r7, r1
    2eac:	80 52       	subi	r24, 0x20	; 32
    2eae:	b7 01       	movw	r22, r14
    2eb0:	90 e0       	ldi	r25, 0x00	; 0
    2eb2:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <fputc>
    2eb6:	0f 5f       	subi	r16, 0xFF	; 255
    2eb8:	1f 4f       	sbci	r17, 0xFF	; 255
    2eba:	f2 cf       	rjmp	.-28     	; 0x2ea0 <vfprintf+0x200>
    2ebc:	77 fe       	sbrs	r7, 7
    2ebe:	0f c0       	rjmp	.+30     	; 0x2ede <vfprintf+0x23e>
    2ec0:	4c 0c       	add	r4, r12
    2ec2:	04 ff       	sbrs	r16, 4
    2ec4:	04 c0       	rjmp	.+8      	; 0x2ece <vfprintf+0x22e>
    2ec6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ec8:	81 33       	cpi	r24, 0x31	; 49
    2eca:	09 f4       	brne	.+2      	; 0x2ece <vfprintf+0x22e>
    2ecc:	4a 94       	dec	r4
    2ece:	14 14       	cp	r1, r4
    2ed0:	74 f5       	brge	.+92     	; 0x2f2e <vfprintf+0x28e>
    2ed2:	f8 e0       	ldi	r31, 0x08	; 8
    2ed4:	f4 15       	cp	r31, r4
    2ed6:	78 f5       	brcc	.+94     	; 0x2f36 <vfprintf+0x296>
    2ed8:	88 e0       	ldi	r24, 0x08	; 8
    2eda:	48 2e       	mov	r4, r24
    2edc:	2c c0       	rjmp	.+88     	; 0x2f36 <vfprintf+0x296>
    2ede:	76 fc       	sbrc	r7, 6
    2ee0:	2a c0       	rjmp	.+84     	; 0x2f36 <vfprintf+0x296>
    2ee2:	81 2f       	mov	r24, r17
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	8c 15       	cp	r24, r12
    2ee8:	9d 05       	cpc	r25, r13
    2eea:	9c f0       	brlt	.+38     	; 0x2f12 <vfprintf+0x272>
    2eec:	6c ef       	ldi	r22, 0xFC	; 252
    2eee:	c6 16       	cp	r12, r22
    2ef0:	6f ef       	ldi	r22, 0xFF	; 255
    2ef2:	d6 06       	cpc	r13, r22
    2ef4:	74 f0       	brlt	.+28     	; 0x2f12 <vfprintf+0x272>
    2ef6:	77 2d       	mov	r23, r7
    2ef8:	70 68       	ori	r23, 0x80	; 128
    2efa:	77 2e       	mov	r7, r23
    2efc:	0a c0       	rjmp	.+20     	; 0x2f12 <vfprintf+0x272>
    2efe:	e2 e0       	ldi	r30, 0x02	; 2
    2f00:	f0 e0       	ldi	r31, 0x00	; 0
    2f02:	ec 0f       	add	r30, r28
    2f04:	fd 1f       	adc	r31, r29
    2f06:	e1 0f       	add	r30, r17
    2f08:	f1 1d       	adc	r31, r1
    2f0a:	80 81       	ld	r24, Z
    2f0c:	80 33       	cpi	r24, 0x30	; 48
    2f0e:	19 f4       	brne	.+6      	; 0x2f16 <vfprintf+0x276>
    2f10:	11 50       	subi	r17, 0x01	; 1
    2f12:	11 11       	cpse	r17, r1
    2f14:	f4 cf       	rjmp	.-24     	; 0x2efe <vfprintf+0x25e>
    2f16:	77 fe       	sbrs	r7, 7
    2f18:	0e c0       	rjmp	.+28     	; 0x2f36 <vfprintf+0x296>
    2f1a:	44 24       	eor	r4, r4
    2f1c:	43 94       	inc	r4
    2f1e:	41 0e       	add	r4, r17
    2f20:	81 2f       	mov	r24, r17
    2f22:	90 e0       	ldi	r25, 0x00	; 0
    2f24:	c8 16       	cp	r12, r24
    2f26:	d9 06       	cpc	r13, r25
    2f28:	2c f4       	brge	.+10     	; 0x2f34 <vfprintf+0x294>
    2f2a:	1c 19       	sub	r17, r12
    2f2c:	04 c0       	rjmp	.+8      	; 0x2f36 <vfprintf+0x296>
    2f2e:	44 24       	eor	r4, r4
    2f30:	43 94       	inc	r4
    2f32:	01 c0       	rjmp	.+2      	; 0x2f36 <vfprintf+0x296>
    2f34:	10 e0       	ldi	r17, 0x00	; 0
    2f36:	77 fe       	sbrs	r7, 7
    2f38:	07 c0       	rjmp	.+14     	; 0x2f48 <vfprintf+0x2a8>
    2f3a:	1c 14       	cp	r1, r12
    2f3c:	1d 04       	cpc	r1, r13
    2f3e:	3c f4       	brge	.+14     	; 0x2f4e <vfprintf+0x2ae>
    2f40:	96 01       	movw	r18, r12
    2f42:	2f 5f       	subi	r18, 0xFF	; 255
    2f44:	3f 4f       	sbci	r19, 0xFF	; 255
    2f46:	05 c0       	rjmp	.+10     	; 0x2f52 <vfprintf+0x2b2>
    2f48:	25 e0       	ldi	r18, 0x05	; 5
    2f4a:	30 e0       	ldi	r19, 0x00	; 0
    2f4c:	02 c0       	rjmp	.+4      	; 0x2f52 <vfprintf+0x2b2>
    2f4e:	21 e0       	ldi	r18, 0x01	; 1
    2f50:	30 e0       	ldi	r19, 0x00	; 0
    2f52:	66 20       	and	r6, r6
    2f54:	11 f0       	breq	.+4      	; 0x2f5a <vfprintf+0x2ba>
    2f56:	2f 5f       	subi	r18, 0xFF	; 255
    2f58:	3f 4f       	sbci	r19, 0xFF	; 255
    2f5a:	11 23       	and	r17, r17
    2f5c:	31 f0       	breq	.+12     	; 0x2f6a <vfprintf+0x2ca>
    2f5e:	41 2f       	mov	r20, r17
    2f60:	50 e0       	ldi	r21, 0x00	; 0
    2f62:	4f 5f       	subi	r20, 0xFF	; 255
    2f64:	5f 4f       	sbci	r21, 0xFF	; 255
    2f66:	24 0f       	add	r18, r20
    2f68:	35 1f       	adc	r19, r21
    2f6a:	45 2d       	mov	r20, r5
    2f6c:	50 e0       	ldi	r21, 0x00	; 0
    2f6e:	24 17       	cp	r18, r20
    2f70:	35 07       	cpc	r19, r21
    2f72:	14 f4       	brge	.+4      	; 0x2f78 <vfprintf+0x2d8>
    2f74:	52 1a       	sub	r5, r18
    2f76:	01 c0       	rjmp	.+2      	; 0x2f7a <vfprintf+0x2da>
    2f78:	51 2c       	mov	r5, r1
    2f7a:	87 2d       	mov	r24, r7
    2f7c:	89 70       	andi	r24, 0x09	; 9
    2f7e:	49 f4       	brne	.+18     	; 0x2f92 <vfprintf+0x2f2>
    2f80:	55 20       	and	r5, r5
    2f82:	39 f0       	breq	.+14     	; 0x2f92 <vfprintf+0x2f2>
    2f84:	b7 01       	movw	r22, r14
    2f86:	80 e2       	ldi	r24, 0x20	; 32
    2f88:	90 e0       	ldi	r25, 0x00	; 0
    2f8a:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <fputc>
    2f8e:	5a 94       	dec	r5
    2f90:	f7 cf       	rjmp	.-18     	; 0x2f80 <vfprintf+0x2e0>
    2f92:	66 20       	and	r6, r6
    2f94:	29 f0       	breq	.+10     	; 0x2fa0 <vfprintf+0x300>
    2f96:	b7 01       	movw	r22, r14
    2f98:	86 2d       	mov	r24, r6
    2f9a:	90 e0       	ldi	r25, 0x00	; 0
    2f9c:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <fputc>
    2fa0:	73 fc       	sbrc	r7, 3
    2fa2:	09 c0       	rjmp	.+18     	; 0x2fb6 <vfprintf+0x316>
    2fa4:	55 20       	and	r5, r5
    2fa6:	39 f0       	breq	.+14     	; 0x2fb6 <vfprintf+0x316>
    2fa8:	b7 01       	movw	r22, r14
    2faa:	80 e3       	ldi	r24, 0x30	; 48
    2fac:	90 e0       	ldi	r25, 0x00	; 0
    2fae:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <fputc>
    2fb2:	5a 94       	dec	r5
    2fb4:	f7 cf       	rjmp	.-18     	; 0x2fa4 <vfprintf+0x304>
    2fb6:	77 fe       	sbrs	r7, 7
    2fb8:	5f c0       	rjmp	.+190    	; 0x3078 <vfprintf+0x3d8>
    2fba:	9c 2d       	mov	r25, r12
    2fbc:	8d 2d       	mov	r24, r13
    2fbe:	d7 fe       	sbrs	r13, 7
    2fc0:	02 c0       	rjmp	.+4      	; 0x2fc6 <vfprintf+0x326>
    2fc2:	90 e0       	ldi	r25, 0x00	; 0
    2fc4:	80 e0       	ldi	r24, 0x00	; 0
    2fc6:	69 2e       	mov	r6, r25
    2fc8:	78 2e       	mov	r7, r24
    2fca:	40 e0       	ldi	r20, 0x00	; 0
    2fcc:	50 e0       	ldi	r21, 0x00	; 0
    2fce:	c6 01       	movw	r24, r12
    2fd0:	84 19       	sub	r24, r4
    2fd2:	91 09       	sbc	r25, r1
    2fd4:	9d 87       	std	Y+13, r25	; 0x0d
    2fd6:	8c 87       	std	Y+12, r24	; 0x0c
    2fd8:	96 01       	movw	r18, r12
    2fda:	26 19       	sub	r18, r6
    2fdc:	37 09       	sbc	r19, r7
    2fde:	28 0d       	add	r18, r8
    2fe0:	39 1d       	adc	r19, r9
    2fe2:	81 2f       	mov	r24, r17
    2fe4:	90 e0       	ldi	r25, 0x00	; 0
    2fe6:	ee 27       	eor	r30, r30
    2fe8:	ff 27       	eor	r31, r31
    2fea:	e8 1b       	sub	r30, r24
    2fec:	f9 0b       	sbc	r31, r25
    2fee:	ff 87       	std	Y+15, r31	; 0x0f
    2ff0:	ee 87       	std	Y+14, r30	; 0x0e
    2ff2:	ff ef       	ldi	r31, 0xFF	; 255
    2ff4:	6f 16       	cp	r6, r31
    2ff6:	7f 06       	cpc	r7, r31
    2ff8:	69 f4       	brne	.+26     	; 0x3014 <vfprintf+0x374>
    2ffa:	b7 01       	movw	r22, r14
    2ffc:	8e e2       	ldi	r24, 0x2E	; 46
    2ffe:	90 e0       	ldi	r25, 0x00	; 0
    3000:	2b 8b       	std	Y+19, r18	; 0x13
    3002:	3a 8b       	std	Y+18, r19	; 0x12
    3004:	48 8b       	std	Y+16, r20	; 0x10
    3006:	59 8b       	std	Y+17, r21	; 0x11
    3008:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <fputc>
    300c:	59 89       	ldd	r21, Y+17	; 0x11
    300e:	48 89       	ldd	r20, Y+16	; 0x10
    3010:	3a 89       	ldd	r19, Y+18	; 0x12
    3012:	2b 89       	ldd	r18, Y+19	; 0x13
    3014:	c6 14       	cp	r12, r6
    3016:	d7 04       	cpc	r13, r7
    3018:	54 f0       	brlt	.+20     	; 0x302e <vfprintf+0x38e>
    301a:	6c 85       	ldd	r22, Y+12	; 0x0c
    301c:	7d 85       	ldd	r23, Y+13	; 0x0d
    301e:	66 15       	cp	r22, r6
    3020:	77 05       	cpc	r23, r7
    3022:	2c f4       	brge	.+10     	; 0x302e <vfprintf+0x38e>
    3024:	f9 01       	movw	r30, r18
    3026:	e4 0f       	add	r30, r20
    3028:	f5 1f       	adc	r31, r21
    302a:	81 81       	ldd	r24, Z+1	; 0x01
    302c:	01 c0       	rjmp	.+2      	; 0x3030 <vfprintf+0x390>
    302e:	80 e3       	ldi	r24, 0x30	; 48
    3030:	71 e0       	ldi	r23, 0x01	; 1
    3032:	67 1a       	sub	r6, r23
    3034:	71 08       	sbc	r7, r1
    3036:	4f 5f       	subi	r20, 0xFF	; 255
    3038:	5f 4f       	sbci	r21, 0xFF	; 255
    303a:	ee 85       	ldd	r30, Y+14	; 0x0e
    303c:	ff 85       	ldd	r31, Y+15	; 0x0f
    303e:	6e 16       	cp	r6, r30
    3040:	7f 06       	cpc	r7, r31
    3042:	6c f0       	brlt	.+26     	; 0x305e <vfprintf+0x3be>
    3044:	b7 01       	movw	r22, r14
    3046:	90 e0       	ldi	r25, 0x00	; 0
    3048:	2b 8b       	std	Y+19, r18	; 0x13
    304a:	3a 8b       	std	Y+18, r19	; 0x12
    304c:	48 8b       	std	Y+16, r20	; 0x10
    304e:	59 8b       	std	Y+17, r21	; 0x11
    3050:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <fputc>
    3054:	2b 89       	ldd	r18, Y+19	; 0x13
    3056:	3a 89       	ldd	r19, Y+18	; 0x12
    3058:	48 89       	ldd	r20, Y+16	; 0x10
    305a:	59 89       	ldd	r21, Y+17	; 0x11
    305c:	ca cf       	rjmp	.-108    	; 0x2ff2 <vfprintf+0x352>
    305e:	6c 14       	cp	r6, r12
    3060:	7d 04       	cpc	r7, r13
    3062:	39 f4       	brne	.+14     	; 0x3072 <vfprintf+0x3d2>
    3064:	9a 81       	ldd	r25, Y+2	; 0x02
    3066:	96 33       	cpi	r25, 0x36	; 54
    3068:	18 f4       	brcc	.+6      	; 0x3070 <vfprintf+0x3d0>
    306a:	95 33       	cpi	r25, 0x35	; 53
    306c:	11 f4       	brne	.+4      	; 0x3072 <vfprintf+0x3d2>
    306e:	04 ff       	sbrs	r16, 4
    3070:	81 e3       	ldi	r24, 0x31	; 49
    3072:	b7 01       	movw	r22, r14
    3074:	90 e0       	ldi	r25, 0x00	; 0
    3076:	4b c0       	rjmp	.+150    	; 0x310e <vfprintf+0x46e>
    3078:	8a 81       	ldd	r24, Y+2	; 0x02
    307a:	81 33       	cpi	r24, 0x31	; 49
    307c:	09 f0       	breq	.+2      	; 0x3080 <vfprintf+0x3e0>
    307e:	0f 7e       	andi	r16, 0xEF	; 239
    3080:	b7 01       	movw	r22, r14
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <fputc>
    3088:	11 11       	cpse	r17, r1
    308a:	05 c0       	rjmp	.+10     	; 0x3096 <vfprintf+0x3f6>
    308c:	74 fe       	sbrs	r7, 4
    308e:	18 c0       	rjmp	.+48     	; 0x30c0 <vfprintf+0x420>
    3090:	85 e4       	ldi	r24, 0x45	; 69
    3092:	90 e0       	ldi	r25, 0x00	; 0
    3094:	17 c0       	rjmp	.+46     	; 0x30c4 <vfprintf+0x424>
    3096:	b7 01       	movw	r22, r14
    3098:	8e e2       	ldi	r24, 0x2E	; 46
    309a:	90 e0       	ldi	r25, 0x00	; 0
    309c:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <fputc>
    30a0:	82 e0       	ldi	r24, 0x02	; 2
    30a2:	66 24       	eor	r6, r6
    30a4:	63 94       	inc	r6
    30a6:	68 0e       	add	r6, r24
    30a8:	f4 01       	movw	r30, r8
    30aa:	e8 0f       	add	r30, r24
    30ac:	f1 1d       	adc	r31, r1
    30ae:	80 81       	ld	r24, Z
    30b0:	b7 01       	movw	r22, r14
    30b2:	90 e0       	ldi	r25, 0x00	; 0
    30b4:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <fputc>
    30b8:	11 50       	subi	r17, 0x01	; 1
    30ba:	41 f3       	breq	.-48     	; 0x308c <vfprintf+0x3ec>
    30bc:	86 2d       	mov	r24, r6
    30be:	f1 cf       	rjmp	.-30     	; 0x30a2 <vfprintf+0x402>
    30c0:	85 e6       	ldi	r24, 0x65	; 101
    30c2:	90 e0       	ldi	r25, 0x00	; 0
    30c4:	b7 01       	movw	r22, r14
    30c6:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <fputc>
    30ca:	d7 fc       	sbrc	r13, 7
    30cc:	05 c0       	rjmp	.+10     	; 0x30d8 <vfprintf+0x438>
    30ce:	c1 14       	cp	r12, r1
    30d0:	d1 04       	cpc	r13, r1
    30d2:	39 f4       	brne	.+14     	; 0x30e2 <vfprintf+0x442>
    30d4:	04 ff       	sbrs	r16, 4
    30d6:	05 c0       	rjmp	.+10     	; 0x30e2 <vfprintf+0x442>
    30d8:	d1 94       	neg	r13
    30da:	c1 94       	neg	r12
    30dc:	d1 08       	sbc	r13, r1
    30de:	8d e2       	ldi	r24, 0x2D	; 45
    30e0:	01 c0       	rjmp	.+2      	; 0x30e4 <vfprintf+0x444>
    30e2:	8b e2       	ldi	r24, 0x2B	; 43
    30e4:	b7 01       	movw	r22, r14
    30e6:	90 e0       	ldi	r25, 0x00	; 0
    30e8:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <fputc>
    30ec:	80 e3       	ldi	r24, 0x30	; 48
    30ee:	6a e0       	ldi	r22, 0x0A	; 10
    30f0:	c6 16       	cp	r12, r22
    30f2:	d1 04       	cpc	r13, r1
    30f4:	2c f0       	brlt	.+10     	; 0x3100 <vfprintf+0x460>
    30f6:	8f 5f       	subi	r24, 0xFF	; 255
    30f8:	fa e0       	ldi	r31, 0x0A	; 10
    30fa:	cf 1a       	sub	r12, r31
    30fc:	d1 08       	sbc	r13, r1
    30fe:	f7 cf       	rjmp	.-18     	; 0x30ee <vfprintf+0x44e>
    3100:	b7 01       	movw	r22, r14
    3102:	90 e0       	ldi	r25, 0x00	; 0
    3104:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <fputc>
    3108:	b7 01       	movw	r22, r14
    310a:	c6 01       	movw	r24, r12
    310c:	c0 96       	adiw	r24, 0x30	; 48
    310e:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <fputc>
    3112:	41 c1       	rjmp	.+642    	; 0x3396 <vfprintf+0x6f6>
    3114:	83 36       	cpi	r24, 0x63	; 99
    3116:	31 f0       	breq	.+12     	; 0x3124 <vfprintf+0x484>
    3118:	83 37       	cpi	r24, 0x73	; 115
    311a:	79 f0       	breq	.+30     	; 0x313a <vfprintf+0x49a>
    311c:	83 35       	cpi	r24, 0x53	; 83
    311e:	09 f0       	breq	.+2      	; 0x3122 <vfprintf+0x482>
    3120:	58 c0       	rjmp	.+176    	; 0x31d2 <vfprintf+0x532>
    3122:	21 c0       	rjmp	.+66     	; 0x3166 <vfprintf+0x4c6>
    3124:	56 01       	movw	r10, r12
    3126:	72 e0       	ldi	r23, 0x02	; 2
    3128:	a7 0e       	add	r10, r23
    312a:	b1 1c       	adc	r11, r1
    312c:	f6 01       	movw	r30, r12
    312e:	80 81       	ld	r24, Z
    3130:	89 83       	std	Y+1, r24	; 0x01
    3132:	01 e0       	ldi	r16, 0x01	; 1
    3134:	10 e0       	ldi	r17, 0x00	; 0
    3136:	64 01       	movw	r12, r8
    3138:	14 c0       	rjmp	.+40     	; 0x3162 <vfprintf+0x4c2>
    313a:	56 01       	movw	r10, r12
    313c:	f2 e0       	ldi	r31, 0x02	; 2
    313e:	af 0e       	add	r10, r31
    3140:	b1 1c       	adc	r11, r1
    3142:	f6 01       	movw	r30, r12
    3144:	c0 80       	ld	r12, Z
    3146:	d1 80       	ldd	r13, Z+1	; 0x01
    3148:	26 ff       	sbrs	r18, 6
    314a:	03 c0       	rjmp	.+6      	; 0x3152 <vfprintf+0x4b2>
    314c:	61 2f       	mov	r22, r17
    314e:	70 e0       	ldi	r23, 0x00	; 0
    3150:	02 c0       	rjmp	.+4      	; 0x3156 <vfprintf+0x4b6>
    3152:	6f ef       	ldi	r22, 0xFF	; 255
    3154:	7f ef       	ldi	r23, 0xFF	; 255
    3156:	c6 01       	movw	r24, r12
    3158:	2b 8b       	std	Y+19, r18	; 0x13
    315a:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <strnlen>
    315e:	8c 01       	movw	r16, r24
    3160:	2b 89       	ldd	r18, Y+19	; 0x13
    3162:	2f 77       	andi	r18, 0x7F	; 127
    3164:	15 c0       	rjmp	.+42     	; 0x3190 <vfprintf+0x4f0>
    3166:	56 01       	movw	r10, r12
    3168:	f2 e0       	ldi	r31, 0x02	; 2
    316a:	af 0e       	add	r10, r31
    316c:	b1 1c       	adc	r11, r1
    316e:	f6 01       	movw	r30, r12
    3170:	c0 80       	ld	r12, Z
    3172:	d1 80       	ldd	r13, Z+1	; 0x01
    3174:	26 ff       	sbrs	r18, 6
    3176:	03 c0       	rjmp	.+6      	; 0x317e <vfprintf+0x4de>
    3178:	61 2f       	mov	r22, r17
    317a:	70 e0       	ldi	r23, 0x00	; 0
    317c:	02 c0       	rjmp	.+4      	; 0x3182 <vfprintf+0x4e2>
    317e:	6f ef       	ldi	r22, 0xFF	; 255
    3180:	7f ef       	ldi	r23, 0xFF	; 255
    3182:	c6 01       	movw	r24, r12
    3184:	2b 8b       	std	Y+19, r18	; 0x13
    3186:	0e 94 46 1b 	call	0x368c	; 0x368c <strnlen_P>
    318a:	8c 01       	movw	r16, r24
    318c:	2b 89       	ldd	r18, Y+19	; 0x13
    318e:	20 68       	ori	r18, 0x80	; 128
    3190:	72 2e       	mov	r7, r18
    3192:	23 fd       	sbrc	r18, 3
    3194:	1a c0       	rjmp	.+52     	; 0x31ca <vfprintf+0x52a>
    3196:	85 2d       	mov	r24, r5
    3198:	90 e0       	ldi	r25, 0x00	; 0
    319a:	08 17       	cp	r16, r24
    319c:	19 07       	cpc	r17, r25
    319e:	a8 f4       	brcc	.+42     	; 0x31ca <vfprintf+0x52a>
    31a0:	b7 01       	movw	r22, r14
    31a2:	80 e2       	ldi	r24, 0x20	; 32
    31a4:	90 e0       	ldi	r25, 0x00	; 0
    31a6:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <fputc>
    31aa:	5a 94       	dec	r5
    31ac:	f4 cf       	rjmp	.-24     	; 0x3196 <vfprintf+0x4f6>
    31ae:	f6 01       	movw	r30, r12
    31b0:	77 fc       	sbrc	r7, 7
    31b2:	85 91       	lpm	r24, Z+
    31b4:	77 fe       	sbrs	r7, 7
    31b6:	81 91       	ld	r24, Z+
    31b8:	6f 01       	movw	r12, r30
    31ba:	b7 01       	movw	r22, r14
    31bc:	90 e0       	ldi	r25, 0x00	; 0
    31be:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <fputc>
    31c2:	51 10       	cpse	r5, r1
    31c4:	5a 94       	dec	r5
    31c6:	01 50       	subi	r16, 0x01	; 1
    31c8:	11 09       	sbc	r17, r1
    31ca:	01 15       	cp	r16, r1
    31cc:	11 05       	cpc	r17, r1
    31ce:	79 f7       	brne	.-34     	; 0x31ae <vfprintf+0x50e>
    31d0:	e2 c0       	rjmp	.+452    	; 0x3396 <vfprintf+0x6f6>
    31d2:	84 36       	cpi	r24, 0x64	; 100
    31d4:	11 f0       	breq	.+4      	; 0x31da <vfprintf+0x53a>
    31d6:	89 36       	cpi	r24, 0x69	; 105
    31d8:	51 f5       	brne	.+84     	; 0x322e <vfprintf+0x58e>
    31da:	56 01       	movw	r10, r12
    31dc:	27 ff       	sbrs	r18, 7
    31de:	09 c0       	rjmp	.+18     	; 0x31f2 <vfprintf+0x552>
    31e0:	f4 e0       	ldi	r31, 0x04	; 4
    31e2:	af 0e       	add	r10, r31
    31e4:	b1 1c       	adc	r11, r1
    31e6:	f6 01       	movw	r30, r12
    31e8:	60 81       	ld	r22, Z
    31ea:	71 81       	ldd	r23, Z+1	; 0x01
    31ec:	82 81       	ldd	r24, Z+2	; 0x02
    31ee:	93 81       	ldd	r25, Z+3	; 0x03
    31f0:	0a c0       	rjmp	.+20     	; 0x3206 <vfprintf+0x566>
    31f2:	f2 e0       	ldi	r31, 0x02	; 2
    31f4:	af 0e       	add	r10, r31
    31f6:	b1 1c       	adc	r11, r1
    31f8:	f6 01       	movw	r30, r12
    31fa:	60 81       	ld	r22, Z
    31fc:	71 81       	ldd	r23, Z+1	; 0x01
    31fe:	88 27       	eor	r24, r24
    3200:	77 fd       	sbrc	r23, 7
    3202:	80 95       	com	r24
    3204:	98 2f       	mov	r25, r24
    3206:	02 2f       	mov	r16, r18
    3208:	0f 76       	andi	r16, 0x6F	; 111
    320a:	97 ff       	sbrs	r25, 7
    320c:	08 c0       	rjmp	.+16     	; 0x321e <vfprintf+0x57e>
    320e:	90 95       	com	r25
    3210:	80 95       	com	r24
    3212:	70 95       	com	r23
    3214:	61 95       	neg	r22
    3216:	7f 4f       	sbci	r23, 0xFF	; 255
    3218:	8f 4f       	sbci	r24, 0xFF	; 255
    321a:	9f 4f       	sbci	r25, 0xFF	; 255
    321c:	00 68       	ori	r16, 0x80	; 128
    321e:	2a e0       	ldi	r18, 0x0A	; 10
    3220:	30 e0       	ldi	r19, 0x00	; 0
    3222:	a4 01       	movw	r20, r8
    3224:	0e 94 95 1b 	call	0x372a	; 0x372a <__ultoa_invert>
    3228:	c8 2e       	mov	r12, r24
    322a:	c8 18       	sub	r12, r8
    322c:	3e c0       	rjmp	.+124    	; 0x32aa <vfprintf+0x60a>
    322e:	02 2f       	mov	r16, r18
    3230:	85 37       	cpi	r24, 0x75	; 117
    3232:	21 f4       	brne	.+8      	; 0x323c <vfprintf+0x59c>
    3234:	0f 7e       	andi	r16, 0xEF	; 239
    3236:	2a e0       	ldi	r18, 0x0A	; 10
    3238:	30 e0       	ldi	r19, 0x00	; 0
    323a:	1d c0       	rjmp	.+58     	; 0x3276 <vfprintf+0x5d6>
    323c:	09 7f       	andi	r16, 0xF9	; 249
    323e:	8f 36       	cpi	r24, 0x6F	; 111
    3240:	91 f0       	breq	.+36     	; 0x3266 <vfprintf+0x5c6>
    3242:	18 f4       	brcc	.+6      	; 0x324a <vfprintf+0x5aa>
    3244:	88 35       	cpi	r24, 0x58	; 88
    3246:	59 f0       	breq	.+22     	; 0x325e <vfprintf+0x5be>
    3248:	b0 c0       	rjmp	.+352    	; 0x33aa <vfprintf+0x70a>
    324a:	80 37       	cpi	r24, 0x70	; 112
    324c:	19 f0       	breq	.+6      	; 0x3254 <vfprintf+0x5b4>
    324e:	88 37       	cpi	r24, 0x78	; 120
    3250:	11 f0       	breq	.+4      	; 0x3256 <vfprintf+0x5b6>
    3252:	ab c0       	rjmp	.+342    	; 0x33aa <vfprintf+0x70a>
    3254:	00 61       	ori	r16, 0x10	; 16
    3256:	04 ff       	sbrs	r16, 4
    3258:	09 c0       	rjmp	.+18     	; 0x326c <vfprintf+0x5cc>
    325a:	04 60       	ori	r16, 0x04	; 4
    325c:	07 c0       	rjmp	.+14     	; 0x326c <vfprintf+0x5cc>
    325e:	24 ff       	sbrs	r18, 4
    3260:	08 c0       	rjmp	.+16     	; 0x3272 <vfprintf+0x5d2>
    3262:	06 60       	ori	r16, 0x06	; 6
    3264:	06 c0       	rjmp	.+12     	; 0x3272 <vfprintf+0x5d2>
    3266:	28 e0       	ldi	r18, 0x08	; 8
    3268:	30 e0       	ldi	r19, 0x00	; 0
    326a:	05 c0       	rjmp	.+10     	; 0x3276 <vfprintf+0x5d6>
    326c:	20 e1       	ldi	r18, 0x10	; 16
    326e:	30 e0       	ldi	r19, 0x00	; 0
    3270:	02 c0       	rjmp	.+4      	; 0x3276 <vfprintf+0x5d6>
    3272:	20 e1       	ldi	r18, 0x10	; 16
    3274:	32 e0       	ldi	r19, 0x02	; 2
    3276:	56 01       	movw	r10, r12
    3278:	07 ff       	sbrs	r16, 7
    327a:	09 c0       	rjmp	.+18     	; 0x328e <vfprintf+0x5ee>
    327c:	f4 e0       	ldi	r31, 0x04	; 4
    327e:	af 0e       	add	r10, r31
    3280:	b1 1c       	adc	r11, r1
    3282:	f6 01       	movw	r30, r12
    3284:	60 81       	ld	r22, Z
    3286:	71 81       	ldd	r23, Z+1	; 0x01
    3288:	82 81       	ldd	r24, Z+2	; 0x02
    328a:	93 81       	ldd	r25, Z+3	; 0x03
    328c:	08 c0       	rjmp	.+16     	; 0x329e <vfprintf+0x5fe>
    328e:	f2 e0       	ldi	r31, 0x02	; 2
    3290:	af 0e       	add	r10, r31
    3292:	b1 1c       	adc	r11, r1
    3294:	f6 01       	movw	r30, r12
    3296:	60 81       	ld	r22, Z
    3298:	71 81       	ldd	r23, Z+1	; 0x01
    329a:	80 e0       	ldi	r24, 0x00	; 0
    329c:	90 e0       	ldi	r25, 0x00	; 0
    329e:	a4 01       	movw	r20, r8
    32a0:	0e 94 95 1b 	call	0x372a	; 0x372a <__ultoa_invert>
    32a4:	c8 2e       	mov	r12, r24
    32a6:	c8 18       	sub	r12, r8
    32a8:	0f 77       	andi	r16, 0x7F	; 127
    32aa:	06 ff       	sbrs	r16, 6
    32ac:	0b c0       	rjmp	.+22     	; 0x32c4 <vfprintf+0x624>
    32ae:	20 2f       	mov	r18, r16
    32b0:	2e 7f       	andi	r18, 0xFE	; 254
    32b2:	c1 16       	cp	r12, r17
    32b4:	50 f4       	brcc	.+20     	; 0x32ca <vfprintf+0x62a>
    32b6:	04 ff       	sbrs	r16, 4
    32b8:	0a c0       	rjmp	.+20     	; 0x32ce <vfprintf+0x62e>
    32ba:	02 fd       	sbrc	r16, 2
    32bc:	08 c0       	rjmp	.+16     	; 0x32ce <vfprintf+0x62e>
    32be:	20 2f       	mov	r18, r16
    32c0:	2e 7e       	andi	r18, 0xEE	; 238
    32c2:	05 c0       	rjmp	.+10     	; 0x32ce <vfprintf+0x62e>
    32c4:	dc 2c       	mov	r13, r12
    32c6:	20 2f       	mov	r18, r16
    32c8:	03 c0       	rjmp	.+6      	; 0x32d0 <vfprintf+0x630>
    32ca:	dc 2c       	mov	r13, r12
    32cc:	01 c0       	rjmp	.+2      	; 0x32d0 <vfprintf+0x630>
    32ce:	d1 2e       	mov	r13, r17
    32d0:	24 ff       	sbrs	r18, 4
    32d2:	0d c0       	rjmp	.+26     	; 0x32ee <vfprintf+0x64e>
    32d4:	fe 01       	movw	r30, r28
    32d6:	ec 0d       	add	r30, r12
    32d8:	f1 1d       	adc	r31, r1
    32da:	80 81       	ld	r24, Z
    32dc:	80 33       	cpi	r24, 0x30	; 48
    32de:	11 f4       	brne	.+4      	; 0x32e4 <vfprintf+0x644>
    32e0:	29 7e       	andi	r18, 0xE9	; 233
    32e2:	09 c0       	rjmp	.+18     	; 0x32f6 <vfprintf+0x656>
    32e4:	22 ff       	sbrs	r18, 2
    32e6:	06 c0       	rjmp	.+12     	; 0x32f4 <vfprintf+0x654>
    32e8:	d3 94       	inc	r13
    32ea:	d3 94       	inc	r13
    32ec:	04 c0       	rjmp	.+8      	; 0x32f6 <vfprintf+0x656>
    32ee:	82 2f       	mov	r24, r18
    32f0:	86 78       	andi	r24, 0x86	; 134
    32f2:	09 f0       	breq	.+2      	; 0x32f6 <vfprintf+0x656>
    32f4:	d3 94       	inc	r13
    32f6:	23 fd       	sbrc	r18, 3
    32f8:	13 c0       	rjmp	.+38     	; 0x3320 <vfprintf+0x680>
    32fa:	20 ff       	sbrs	r18, 0
    32fc:	06 c0       	rjmp	.+12     	; 0x330a <vfprintf+0x66a>
    32fe:	1c 2d       	mov	r17, r12
    3300:	d5 14       	cp	r13, r5
    3302:	18 f4       	brcc	.+6      	; 0x330a <vfprintf+0x66a>
    3304:	15 0d       	add	r17, r5
    3306:	1d 19       	sub	r17, r13
    3308:	d5 2c       	mov	r13, r5
    330a:	d5 14       	cp	r13, r5
    330c:	68 f4       	brcc	.+26     	; 0x3328 <vfprintf+0x688>
    330e:	b7 01       	movw	r22, r14
    3310:	80 e2       	ldi	r24, 0x20	; 32
    3312:	90 e0       	ldi	r25, 0x00	; 0
    3314:	2b 8b       	std	Y+19, r18	; 0x13
    3316:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <fputc>
    331a:	d3 94       	inc	r13
    331c:	2b 89       	ldd	r18, Y+19	; 0x13
    331e:	f5 cf       	rjmp	.-22     	; 0x330a <vfprintf+0x66a>
    3320:	d5 14       	cp	r13, r5
    3322:	10 f4       	brcc	.+4      	; 0x3328 <vfprintf+0x688>
    3324:	5d 18       	sub	r5, r13
    3326:	01 c0       	rjmp	.+2      	; 0x332a <vfprintf+0x68a>
    3328:	51 2c       	mov	r5, r1
    332a:	24 ff       	sbrs	r18, 4
    332c:	12 c0       	rjmp	.+36     	; 0x3352 <vfprintf+0x6b2>
    332e:	b7 01       	movw	r22, r14
    3330:	80 e3       	ldi	r24, 0x30	; 48
    3332:	90 e0       	ldi	r25, 0x00	; 0
    3334:	2b 8b       	std	Y+19, r18	; 0x13
    3336:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <fputc>
    333a:	2b 89       	ldd	r18, Y+19	; 0x13
    333c:	22 ff       	sbrs	r18, 2
    333e:	17 c0       	rjmp	.+46     	; 0x336e <vfprintf+0x6ce>
    3340:	21 ff       	sbrs	r18, 1
    3342:	03 c0       	rjmp	.+6      	; 0x334a <vfprintf+0x6aa>
    3344:	88 e5       	ldi	r24, 0x58	; 88
    3346:	90 e0       	ldi	r25, 0x00	; 0
    3348:	02 c0       	rjmp	.+4      	; 0x334e <vfprintf+0x6ae>
    334a:	88 e7       	ldi	r24, 0x78	; 120
    334c:	90 e0       	ldi	r25, 0x00	; 0
    334e:	b7 01       	movw	r22, r14
    3350:	0c c0       	rjmp	.+24     	; 0x336a <vfprintf+0x6ca>
    3352:	82 2f       	mov	r24, r18
    3354:	86 78       	andi	r24, 0x86	; 134
    3356:	59 f0       	breq	.+22     	; 0x336e <vfprintf+0x6ce>
    3358:	21 fd       	sbrc	r18, 1
    335a:	02 c0       	rjmp	.+4      	; 0x3360 <vfprintf+0x6c0>
    335c:	80 e2       	ldi	r24, 0x20	; 32
    335e:	01 c0       	rjmp	.+2      	; 0x3362 <vfprintf+0x6c2>
    3360:	8b e2       	ldi	r24, 0x2B	; 43
    3362:	27 fd       	sbrc	r18, 7
    3364:	8d e2       	ldi	r24, 0x2D	; 45
    3366:	b7 01       	movw	r22, r14
    3368:	90 e0       	ldi	r25, 0x00	; 0
    336a:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <fputc>
    336e:	c1 16       	cp	r12, r17
    3370:	38 f4       	brcc	.+14     	; 0x3380 <vfprintf+0x6e0>
    3372:	b7 01       	movw	r22, r14
    3374:	80 e3       	ldi	r24, 0x30	; 48
    3376:	90 e0       	ldi	r25, 0x00	; 0
    3378:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <fputc>
    337c:	11 50       	subi	r17, 0x01	; 1
    337e:	f7 cf       	rjmp	.-18     	; 0x336e <vfprintf+0x6ce>
    3380:	ca 94       	dec	r12
    3382:	f4 01       	movw	r30, r8
    3384:	ec 0d       	add	r30, r12
    3386:	f1 1d       	adc	r31, r1
    3388:	80 81       	ld	r24, Z
    338a:	b7 01       	movw	r22, r14
    338c:	90 e0       	ldi	r25, 0x00	; 0
    338e:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <fputc>
    3392:	c1 10       	cpse	r12, r1
    3394:	f5 cf       	rjmp	.-22     	; 0x3380 <vfprintf+0x6e0>
    3396:	55 20       	and	r5, r5
    3398:	09 f4       	brne	.+2      	; 0x339c <vfprintf+0x6fc>
    339a:	c2 cc       	rjmp	.-1660   	; 0x2d20 <vfprintf+0x80>
    339c:	b7 01       	movw	r22, r14
    339e:	80 e2       	ldi	r24, 0x20	; 32
    33a0:	90 e0       	ldi	r25, 0x00	; 0
    33a2:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <fputc>
    33a6:	5a 94       	dec	r5
    33a8:	f6 cf       	rjmp	.-20     	; 0x3396 <vfprintf+0x6f6>
    33aa:	f7 01       	movw	r30, r14
    33ac:	86 81       	ldd	r24, Z+6	; 0x06
    33ae:	97 81       	ldd	r25, Z+7	; 0x07
    33b0:	02 c0       	rjmp	.+4      	; 0x33b6 <vfprintf+0x716>
    33b2:	8f ef       	ldi	r24, 0xFF	; 255
    33b4:	9f ef       	ldi	r25, 0xFF	; 255
    33b6:	63 96       	adiw	r28, 0x13	; 19
    33b8:	0f b6       	in	r0, 0x3f	; 63
    33ba:	f8 94       	cli
    33bc:	de bf       	out	0x3e, r29	; 62
    33be:	0f be       	out	0x3f, r0	; 63
    33c0:	cd bf       	out	0x3d, r28	; 61
    33c2:	df 91       	pop	r29
    33c4:	cf 91       	pop	r28
    33c6:	1f 91       	pop	r17
    33c8:	0f 91       	pop	r16
    33ca:	ff 90       	pop	r15
    33cc:	ef 90       	pop	r14
    33ce:	df 90       	pop	r13
    33d0:	cf 90       	pop	r12
    33d2:	bf 90       	pop	r11
    33d4:	af 90       	pop	r10
    33d6:	9f 90       	pop	r9
    33d8:	8f 90       	pop	r8
    33da:	7f 90       	pop	r7
    33dc:	6f 90       	pop	r6
    33de:	5f 90       	pop	r5
    33e0:	4f 90       	pop	r4
    33e2:	3f 90       	pop	r3
    33e4:	2f 90       	pop	r2
    33e6:	08 95       	ret

000033e8 <__mulsi3>:
    33e8:	db 01       	movw	r26, r22
    33ea:	8f 93       	push	r24
    33ec:	9f 93       	push	r25
    33ee:	0e 94 40 1a 	call	0x3480	; 0x3480 <__muluhisi3>
    33f2:	bf 91       	pop	r27
    33f4:	af 91       	pop	r26
    33f6:	a2 9f       	mul	r26, r18
    33f8:	80 0d       	add	r24, r0
    33fa:	91 1d       	adc	r25, r1
    33fc:	a3 9f       	mul	r26, r19
    33fe:	90 0d       	add	r25, r0
    3400:	b2 9f       	mul	r27, r18
    3402:	90 0d       	add	r25, r0
    3404:	11 24       	eor	r1, r1
    3406:	08 95       	ret

00003408 <__divmodhi4>:
    3408:	97 fb       	bst	r25, 7
    340a:	07 2e       	mov	r0, r23
    340c:	16 f4       	brtc	.+4      	; 0x3412 <__divmodhi4+0xa>
    340e:	00 94       	com	r0
    3410:	07 d0       	rcall	.+14     	; 0x3420 <__divmodhi4_neg1>
    3412:	77 fd       	sbrc	r23, 7
    3414:	09 d0       	rcall	.+18     	; 0x3428 <__divmodhi4_neg2>
    3416:	0e 94 4b 1a 	call	0x3496	; 0x3496 <__udivmodhi4>
    341a:	07 fc       	sbrc	r0, 7
    341c:	05 d0       	rcall	.+10     	; 0x3428 <__divmodhi4_neg2>
    341e:	3e f4       	brtc	.+14     	; 0x342e <__divmodhi4_exit>

00003420 <__divmodhi4_neg1>:
    3420:	90 95       	com	r25
    3422:	81 95       	neg	r24
    3424:	9f 4f       	sbci	r25, 0xFF	; 255
    3426:	08 95       	ret

00003428 <__divmodhi4_neg2>:
    3428:	70 95       	com	r23
    342a:	61 95       	neg	r22
    342c:	7f 4f       	sbci	r23, 0xFF	; 255

0000342e <__divmodhi4_exit>:
    342e:	08 95       	ret

00003430 <__udivmodsi4>:
    3430:	a1 e2       	ldi	r26, 0x21	; 33
    3432:	1a 2e       	mov	r1, r26
    3434:	aa 1b       	sub	r26, r26
    3436:	bb 1b       	sub	r27, r27
    3438:	fd 01       	movw	r30, r26
    343a:	0d c0       	rjmp	.+26     	; 0x3456 <__udivmodsi4_ep>

0000343c <__udivmodsi4_loop>:
    343c:	aa 1f       	adc	r26, r26
    343e:	bb 1f       	adc	r27, r27
    3440:	ee 1f       	adc	r30, r30
    3442:	ff 1f       	adc	r31, r31
    3444:	a2 17       	cp	r26, r18
    3446:	b3 07       	cpc	r27, r19
    3448:	e4 07       	cpc	r30, r20
    344a:	f5 07       	cpc	r31, r21
    344c:	20 f0       	brcs	.+8      	; 0x3456 <__udivmodsi4_ep>
    344e:	a2 1b       	sub	r26, r18
    3450:	b3 0b       	sbc	r27, r19
    3452:	e4 0b       	sbc	r30, r20
    3454:	f5 0b       	sbc	r31, r21

00003456 <__udivmodsi4_ep>:
    3456:	66 1f       	adc	r22, r22
    3458:	77 1f       	adc	r23, r23
    345a:	88 1f       	adc	r24, r24
    345c:	99 1f       	adc	r25, r25
    345e:	1a 94       	dec	r1
    3460:	69 f7       	brne	.-38     	; 0x343c <__udivmodsi4_loop>
    3462:	60 95       	com	r22
    3464:	70 95       	com	r23
    3466:	80 95       	com	r24
    3468:	90 95       	com	r25
    346a:	9b 01       	movw	r18, r22
    346c:	ac 01       	movw	r20, r24
    346e:	bd 01       	movw	r22, r26
    3470:	cf 01       	movw	r24, r30
    3472:	08 95       	ret

00003474 <__tablejump2__>:
    3474:	ee 0f       	add	r30, r30
    3476:	ff 1f       	adc	r31, r31

00003478 <__tablejump__>:
    3478:	05 90       	lpm	r0, Z+
    347a:	f4 91       	lpm	r31, Z
    347c:	e0 2d       	mov	r30, r0
    347e:	09 94       	ijmp

00003480 <__muluhisi3>:
    3480:	0e 94 5f 1a 	call	0x34be	; 0x34be <__umulhisi3>
    3484:	a5 9f       	mul	r26, r21
    3486:	90 0d       	add	r25, r0
    3488:	b4 9f       	mul	r27, r20
    348a:	90 0d       	add	r25, r0
    348c:	a4 9f       	mul	r26, r20
    348e:	80 0d       	add	r24, r0
    3490:	91 1d       	adc	r25, r1
    3492:	11 24       	eor	r1, r1
    3494:	08 95       	ret

00003496 <__udivmodhi4>:
    3496:	aa 1b       	sub	r26, r26
    3498:	bb 1b       	sub	r27, r27
    349a:	51 e1       	ldi	r21, 0x11	; 17
    349c:	07 c0       	rjmp	.+14     	; 0x34ac <__udivmodhi4_ep>

0000349e <__udivmodhi4_loop>:
    349e:	aa 1f       	adc	r26, r26
    34a0:	bb 1f       	adc	r27, r27
    34a2:	a6 17       	cp	r26, r22
    34a4:	b7 07       	cpc	r27, r23
    34a6:	10 f0       	brcs	.+4      	; 0x34ac <__udivmodhi4_ep>
    34a8:	a6 1b       	sub	r26, r22
    34aa:	b7 0b       	sbc	r27, r23

000034ac <__udivmodhi4_ep>:
    34ac:	88 1f       	adc	r24, r24
    34ae:	99 1f       	adc	r25, r25
    34b0:	5a 95       	dec	r21
    34b2:	a9 f7       	brne	.-22     	; 0x349e <__udivmodhi4_loop>
    34b4:	80 95       	com	r24
    34b6:	90 95       	com	r25
    34b8:	bc 01       	movw	r22, r24
    34ba:	cd 01       	movw	r24, r26
    34bc:	08 95       	ret

000034be <__umulhisi3>:
    34be:	a2 9f       	mul	r26, r18
    34c0:	b0 01       	movw	r22, r0
    34c2:	b3 9f       	mul	r27, r19
    34c4:	c0 01       	movw	r24, r0
    34c6:	a3 9f       	mul	r26, r19
    34c8:	70 0d       	add	r23, r0
    34ca:	81 1d       	adc	r24, r1
    34cc:	11 24       	eor	r1, r1
    34ce:	91 1d       	adc	r25, r1
    34d0:	b2 9f       	mul	r27, r18
    34d2:	70 0d       	add	r23, r0
    34d4:	81 1d       	adc	r24, r1
    34d6:	11 24       	eor	r1, r1
    34d8:	91 1d       	adc	r25, r1
    34da:	08 95       	ret

000034dc <__ftoa_engine>:
    34dc:	28 30       	cpi	r18, 0x08	; 8
    34de:	08 f0       	brcs	.+2      	; 0x34e2 <__ftoa_engine+0x6>
    34e0:	27 e0       	ldi	r18, 0x07	; 7
    34e2:	33 27       	eor	r19, r19
    34e4:	da 01       	movw	r26, r20
    34e6:	99 0f       	add	r25, r25
    34e8:	31 1d       	adc	r19, r1
    34ea:	87 fd       	sbrc	r24, 7
    34ec:	91 60       	ori	r25, 0x01	; 1
    34ee:	00 96       	adiw	r24, 0x00	; 0
    34f0:	61 05       	cpc	r22, r1
    34f2:	71 05       	cpc	r23, r1
    34f4:	39 f4       	brne	.+14     	; 0x3504 <__ftoa_engine+0x28>
    34f6:	32 60       	ori	r19, 0x02	; 2
    34f8:	2e 5f       	subi	r18, 0xFE	; 254
    34fa:	3d 93       	st	X+, r19
    34fc:	30 e3       	ldi	r19, 0x30	; 48
    34fe:	2a 95       	dec	r18
    3500:	e1 f7       	brne	.-8      	; 0x34fa <__ftoa_engine+0x1e>
    3502:	08 95       	ret
    3504:	9f 3f       	cpi	r25, 0xFF	; 255
    3506:	30 f0       	brcs	.+12     	; 0x3514 <__ftoa_engine+0x38>
    3508:	80 38       	cpi	r24, 0x80	; 128
    350a:	71 05       	cpc	r23, r1
    350c:	61 05       	cpc	r22, r1
    350e:	09 f0       	breq	.+2      	; 0x3512 <__ftoa_engine+0x36>
    3510:	3c 5f       	subi	r19, 0xFC	; 252
    3512:	3c 5f       	subi	r19, 0xFC	; 252
    3514:	3d 93       	st	X+, r19
    3516:	91 30       	cpi	r25, 0x01	; 1
    3518:	08 f0       	brcs	.+2      	; 0x351c <__ftoa_engine+0x40>
    351a:	80 68       	ori	r24, 0x80	; 128
    351c:	91 1d       	adc	r25, r1
    351e:	df 93       	push	r29
    3520:	cf 93       	push	r28
    3522:	1f 93       	push	r17
    3524:	0f 93       	push	r16
    3526:	ff 92       	push	r15
    3528:	ef 92       	push	r14
    352a:	19 2f       	mov	r17, r25
    352c:	98 7f       	andi	r25, 0xF8	; 248
    352e:	96 95       	lsr	r25
    3530:	e9 2f       	mov	r30, r25
    3532:	96 95       	lsr	r25
    3534:	96 95       	lsr	r25
    3536:	e9 0f       	add	r30, r25
    3538:	ff 27       	eor	r31, r31
    353a:	e9 5e       	subi	r30, 0xE9	; 233
    353c:	fe 4f       	sbci	r31, 0xFE	; 254
    353e:	99 27       	eor	r25, r25
    3540:	33 27       	eor	r19, r19
    3542:	ee 24       	eor	r14, r14
    3544:	ff 24       	eor	r15, r15
    3546:	a7 01       	movw	r20, r14
    3548:	e7 01       	movw	r28, r14
    354a:	05 90       	lpm	r0, Z+
    354c:	08 94       	sec
    354e:	07 94       	ror	r0
    3550:	28 f4       	brcc	.+10     	; 0x355c <__ftoa_engine+0x80>
    3552:	36 0f       	add	r19, r22
    3554:	e7 1e       	adc	r14, r23
    3556:	f8 1e       	adc	r15, r24
    3558:	49 1f       	adc	r20, r25
    355a:	51 1d       	adc	r21, r1
    355c:	66 0f       	add	r22, r22
    355e:	77 1f       	adc	r23, r23
    3560:	88 1f       	adc	r24, r24
    3562:	99 1f       	adc	r25, r25
    3564:	06 94       	lsr	r0
    3566:	a1 f7       	brne	.-24     	; 0x3550 <__ftoa_engine+0x74>
    3568:	05 90       	lpm	r0, Z+
    356a:	07 94       	ror	r0
    356c:	28 f4       	brcc	.+10     	; 0x3578 <__ftoa_engine+0x9c>
    356e:	e7 0e       	add	r14, r23
    3570:	f8 1e       	adc	r15, r24
    3572:	49 1f       	adc	r20, r25
    3574:	56 1f       	adc	r21, r22
    3576:	c1 1d       	adc	r28, r1
    3578:	77 0f       	add	r23, r23
    357a:	88 1f       	adc	r24, r24
    357c:	99 1f       	adc	r25, r25
    357e:	66 1f       	adc	r22, r22
    3580:	06 94       	lsr	r0
    3582:	a1 f7       	brne	.-24     	; 0x356c <__ftoa_engine+0x90>
    3584:	05 90       	lpm	r0, Z+
    3586:	07 94       	ror	r0
    3588:	28 f4       	brcc	.+10     	; 0x3594 <__ftoa_engine+0xb8>
    358a:	f8 0e       	add	r15, r24
    358c:	49 1f       	adc	r20, r25
    358e:	56 1f       	adc	r21, r22
    3590:	c7 1f       	adc	r28, r23
    3592:	d1 1d       	adc	r29, r1
    3594:	88 0f       	add	r24, r24
    3596:	99 1f       	adc	r25, r25
    3598:	66 1f       	adc	r22, r22
    359a:	77 1f       	adc	r23, r23
    359c:	06 94       	lsr	r0
    359e:	a1 f7       	brne	.-24     	; 0x3588 <__ftoa_engine+0xac>
    35a0:	05 90       	lpm	r0, Z+
    35a2:	07 94       	ror	r0
    35a4:	20 f4       	brcc	.+8      	; 0x35ae <__ftoa_engine+0xd2>
    35a6:	49 0f       	add	r20, r25
    35a8:	56 1f       	adc	r21, r22
    35aa:	c7 1f       	adc	r28, r23
    35ac:	d8 1f       	adc	r29, r24
    35ae:	99 0f       	add	r25, r25
    35b0:	66 1f       	adc	r22, r22
    35b2:	77 1f       	adc	r23, r23
    35b4:	88 1f       	adc	r24, r24
    35b6:	06 94       	lsr	r0
    35b8:	a9 f7       	brne	.-22     	; 0x35a4 <__ftoa_engine+0xc8>
    35ba:	84 91       	lpm	r24, Z
    35bc:	10 95       	com	r17
    35be:	17 70       	andi	r17, 0x07	; 7
    35c0:	41 f0       	breq	.+16     	; 0x35d2 <__ftoa_engine+0xf6>
    35c2:	d6 95       	lsr	r29
    35c4:	c7 95       	ror	r28
    35c6:	57 95       	ror	r21
    35c8:	47 95       	ror	r20
    35ca:	f7 94       	ror	r15
    35cc:	e7 94       	ror	r14
    35ce:	1a 95       	dec	r17
    35d0:	c1 f7       	brne	.-16     	; 0x35c2 <__ftoa_engine+0xe6>
    35d2:	ed eb       	ldi	r30, 0xBD	; 189
    35d4:	f0 e0       	ldi	r31, 0x00	; 0
    35d6:	68 94       	set
    35d8:	15 90       	lpm	r1, Z+
    35da:	15 91       	lpm	r17, Z+
    35dc:	35 91       	lpm	r19, Z+
    35de:	65 91       	lpm	r22, Z+
    35e0:	95 91       	lpm	r25, Z+
    35e2:	05 90       	lpm	r0, Z+
    35e4:	7f e2       	ldi	r23, 0x2F	; 47
    35e6:	73 95       	inc	r23
    35e8:	e1 18       	sub	r14, r1
    35ea:	f1 0a       	sbc	r15, r17
    35ec:	43 0b       	sbc	r20, r19
    35ee:	56 0b       	sbc	r21, r22
    35f0:	c9 0b       	sbc	r28, r25
    35f2:	d0 09       	sbc	r29, r0
    35f4:	c0 f7       	brcc	.-16     	; 0x35e6 <__ftoa_engine+0x10a>
    35f6:	e1 0c       	add	r14, r1
    35f8:	f1 1e       	adc	r15, r17
    35fa:	43 1f       	adc	r20, r19
    35fc:	56 1f       	adc	r21, r22
    35fe:	c9 1f       	adc	r28, r25
    3600:	d0 1d       	adc	r29, r0
    3602:	7e f4       	brtc	.+30     	; 0x3622 <__ftoa_engine+0x146>
    3604:	70 33       	cpi	r23, 0x30	; 48
    3606:	11 f4       	brne	.+4      	; 0x360c <__ftoa_engine+0x130>
    3608:	8a 95       	dec	r24
    360a:	e6 cf       	rjmp	.-52     	; 0x35d8 <__ftoa_engine+0xfc>
    360c:	e8 94       	clt
    360e:	01 50       	subi	r16, 0x01	; 1
    3610:	30 f0       	brcs	.+12     	; 0x361e <__ftoa_engine+0x142>
    3612:	08 0f       	add	r16, r24
    3614:	0a f4       	brpl	.+2      	; 0x3618 <__ftoa_engine+0x13c>
    3616:	00 27       	eor	r16, r16
    3618:	02 17       	cp	r16, r18
    361a:	08 f4       	brcc	.+2      	; 0x361e <__ftoa_engine+0x142>
    361c:	20 2f       	mov	r18, r16
    361e:	23 95       	inc	r18
    3620:	02 2f       	mov	r16, r18
    3622:	7a 33       	cpi	r23, 0x3A	; 58
    3624:	28 f0       	brcs	.+10     	; 0x3630 <__ftoa_engine+0x154>
    3626:	79 e3       	ldi	r23, 0x39	; 57
    3628:	7d 93       	st	X+, r23
    362a:	2a 95       	dec	r18
    362c:	e9 f7       	brne	.-6      	; 0x3628 <__ftoa_engine+0x14c>
    362e:	10 c0       	rjmp	.+32     	; 0x3650 <__ftoa_engine+0x174>
    3630:	7d 93       	st	X+, r23
    3632:	2a 95       	dec	r18
    3634:	89 f6       	brne	.-94     	; 0x35d8 <__ftoa_engine+0xfc>
    3636:	06 94       	lsr	r0
    3638:	97 95       	ror	r25
    363a:	67 95       	ror	r22
    363c:	37 95       	ror	r19
    363e:	17 95       	ror	r17
    3640:	17 94       	ror	r1
    3642:	e1 18       	sub	r14, r1
    3644:	f1 0a       	sbc	r15, r17
    3646:	43 0b       	sbc	r20, r19
    3648:	56 0b       	sbc	r21, r22
    364a:	c9 0b       	sbc	r28, r25
    364c:	d0 09       	sbc	r29, r0
    364e:	98 f0       	brcs	.+38     	; 0x3676 <__ftoa_engine+0x19a>
    3650:	23 95       	inc	r18
    3652:	7e 91       	ld	r23, -X
    3654:	73 95       	inc	r23
    3656:	7a 33       	cpi	r23, 0x3A	; 58
    3658:	08 f0       	brcs	.+2      	; 0x365c <__ftoa_engine+0x180>
    365a:	70 e3       	ldi	r23, 0x30	; 48
    365c:	7c 93       	st	X, r23
    365e:	20 13       	cpse	r18, r16
    3660:	b8 f7       	brcc	.-18     	; 0x3650 <__ftoa_engine+0x174>
    3662:	7e 91       	ld	r23, -X
    3664:	70 61       	ori	r23, 0x10	; 16
    3666:	7d 93       	st	X+, r23
    3668:	30 f0       	brcs	.+12     	; 0x3676 <__ftoa_engine+0x19a>
    366a:	83 95       	inc	r24
    366c:	71 e3       	ldi	r23, 0x31	; 49
    366e:	7d 93       	st	X+, r23
    3670:	70 e3       	ldi	r23, 0x30	; 48
    3672:	2a 95       	dec	r18
    3674:	e1 f7       	brne	.-8      	; 0x366e <__ftoa_engine+0x192>
    3676:	11 24       	eor	r1, r1
    3678:	ef 90       	pop	r14
    367a:	ff 90       	pop	r15
    367c:	0f 91       	pop	r16
    367e:	1f 91       	pop	r17
    3680:	cf 91       	pop	r28
    3682:	df 91       	pop	r29
    3684:	99 27       	eor	r25, r25
    3686:	87 fd       	sbrc	r24, 7
    3688:	90 95       	com	r25
    368a:	08 95       	ret

0000368c <strnlen_P>:
    368c:	fc 01       	movw	r30, r24
    368e:	05 90       	lpm	r0, Z+
    3690:	61 50       	subi	r22, 0x01	; 1
    3692:	70 40       	sbci	r23, 0x00	; 0
    3694:	01 10       	cpse	r0, r1
    3696:	d8 f7       	brcc	.-10     	; 0x368e <strnlen_P+0x2>
    3698:	80 95       	com	r24
    369a:	90 95       	com	r25
    369c:	8e 0f       	add	r24, r30
    369e:	9f 1f       	adc	r25, r31
    36a0:	08 95       	ret

000036a2 <strcpy>:
    36a2:	fb 01       	movw	r30, r22
    36a4:	dc 01       	movw	r26, r24
    36a6:	01 90       	ld	r0, Z+
    36a8:	0d 92       	st	X+, r0
    36aa:	00 20       	and	r0, r0
    36ac:	e1 f7       	brne	.-8      	; 0x36a6 <strcpy+0x4>
    36ae:	08 95       	ret

000036b0 <strnlen>:
    36b0:	fc 01       	movw	r30, r24
    36b2:	61 50       	subi	r22, 0x01	; 1
    36b4:	70 40       	sbci	r23, 0x00	; 0
    36b6:	01 90       	ld	r0, Z+
    36b8:	01 10       	cpse	r0, r1
    36ba:	d8 f7       	brcc	.-10     	; 0x36b2 <strnlen+0x2>
    36bc:	80 95       	com	r24
    36be:	90 95       	com	r25
    36c0:	8e 0f       	add	r24, r30
    36c2:	9f 1f       	adc	r25, r31
    36c4:	08 95       	ret

000036c6 <fputc>:
    36c6:	0f 93       	push	r16
    36c8:	1f 93       	push	r17
    36ca:	cf 93       	push	r28
    36cc:	df 93       	push	r29
    36ce:	18 2f       	mov	r17, r24
    36d0:	09 2f       	mov	r16, r25
    36d2:	eb 01       	movw	r28, r22
    36d4:	8b 81       	ldd	r24, Y+3	; 0x03
    36d6:	81 fd       	sbrc	r24, 1
    36d8:	03 c0       	rjmp	.+6      	; 0x36e0 <fputc+0x1a>
    36da:	8f ef       	ldi	r24, 0xFF	; 255
    36dc:	9f ef       	ldi	r25, 0xFF	; 255
    36de:	20 c0       	rjmp	.+64     	; 0x3720 <fputc+0x5a>
    36e0:	82 ff       	sbrs	r24, 2
    36e2:	10 c0       	rjmp	.+32     	; 0x3704 <fputc+0x3e>
    36e4:	4e 81       	ldd	r20, Y+6	; 0x06
    36e6:	5f 81       	ldd	r21, Y+7	; 0x07
    36e8:	2c 81       	ldd	r18, Y+4	; 0x04
    36ea:	3d 81       	ldd	r19, Y+5	; 0x05
    36ec:	42 17       	cp	r20, r18
    36ee:	53 07       	cpc	r21, r19
    36f0:	7c f4       	brge	.+30     	; 0x3710 <fputc+0x4a>
    36f2:	e8 81       	ld	r30, Y
    36f4:	f9 81       	ldd	r31, Y+1	; 0x01
    36f6:	9f 01       	movw	r18, r30
    36f8:	2f 5f       	subi	r18, 0xFF	; 255
    36fa:	3f 4f       	sbci	r19, 0xFF	; 255
    36fc:	39 83       	std	Y+1, r19	; 0x01
    36fe:	28 83       	st	Y, r18
    3700:	10 83       	st	Z, r17
    3702:	06 c0       	rjmp	.+12     	; 0x3710 <fputc+0x4a>
    3704:	e8 85       	ldd	r30, Y+8	; 0x08
    3706:	f9 85       	ldd	r31, Y+9	; 0x09
    3708:	81 2f       	mov	r24, r17
    370a:	09 95       	icall
    370c:	89 2b       	or	r24, r25
    370e:	29 f7       	brne	.-54     	; 0x36da <fputc+0x14>
    3710:	2e 81       	ldd	r18, Y+6	; 0x06
    3712:	3f 81       	ldd	r19, Y+7	; 0x07
    3714:	2f 5f       	subi	r18, 0xFF	; 255
    3716:	3f 4f       	sbci	r19, 0xFF	; 255
    3718:	3f 83       	std	Y+7, r19	; 0x07
    371a:	2e 83       	std	Y+6, r18	; 0x06
    371c:	81 2f       	mov	r24, r17
    371e:	90 2f       	mov	r25, r16
    3720:	df 91       	pop	r29
    3722:	cf 91       	pop	r28
    3724:	1f 91       	pop	r17
    3726:	0f 91       	pop	r16
    3728:	08 95       	ret

0000372a <__ultoa_invert>:
    372a:	fa 01       	movw	r30, r20
    372c:	aa 27       	eor	r26, r26
    372e:	28 30       	cpi	r18, 0x08	; 8
    3730:	51 f1       	breq	.+84     	; 0x3786 <__ultoa_invert+0x5c>
    3732:	20 31       	cpi	r18, 0x10	; 16
    3734:	81 f1       	breq	.+96     	; 0x3796 <__ultoa_invert+0x6c>
    3736:	e8 94       	clt
    3738:	6f 93       	push	r22
    373a:	6e 7f       	andi	r22, 0xFE	; 254
    373c:	6e 5f       	subi	r22, 0xFE	; 254
    373e:	7f 4f       	sbci	r23, 0xFF	; 255
    3740:	8f 4f       	sbci	r24, 0xFF	; 255
    3742:	9f 4f       	sbci	r25, 0xFF	; 255
    3744:	af 4f       	sbci	r26, 0xFF	; 255
    3746:	b1 e0       	ldi	r27, 0x01	; 1
    3748:	3e d0       	rcall	.+124    	; 0x37c6 <__ultoa_invert+0x9c>
    374a:	b4 e0       	ldi	r27, 0x04	; 4
    374c:	3c d0       	rcall	.+120    	; 0x37c6 <__ultoa_invert+0x9c>
    374e:	67 0f       	add	r22, r23
    3750:	78 1f       	adc	r23, r24
    3752:	89 1f       	adc	r24, r25
    3754:	9a 1f       	adc	r25, r26
    3756:	a1 1d       	adc	r26, r1
    3758:	68 0f       	add	r22, r24
    375a:	79 1f       	adc	r23, r25
    375c:	8a 1f       	adc	r24, r26
    375e:	91 1d       	adc	r25, r1
    3760:	a1 1d       	adc	r26, r1
    3762:	6a 0f       	add	r22, r26
    3764:	71 1d       	adc	r23, r1
    3766:	81 1d       	adc	r24, r1
    3768:	91 1d       	adc	r25, r1
    376a:	a1 1d       	adc	r26, r1
    376c:	20 d0       	rcall	.+64     	; 0x37ae <__ultoa_invert+0x84>
    376e:	09 f4       	brne	.+2      	; 0x3772 <__ultoa_invert+0x48>
    3770:	68 94       	set
    3772:	3f 91       	pop	r19
    3774:	2a e0       	ldi	r18, 0x0A	; 10
    3776:	26 9f       	mul	r18, r22
    3778:	11 24       	eor	r1, r1
    377a:	30 19       	sub	r19, r0
    377c:	30 5d       	subi	r19, 0xD0	; 208
    377e:	31 93       	st	Z+, r19
    3780:	de f6       	brtc	.-74     	; 0x3738 <__ultoa_invert+0xe>
    3782:	cf 01       	movw	r24, r30
    3784:	08 95       	ret
    3786:	46 2f       	mov	r20, r22
    3788:	47 70       	andi	r20, 0x07	; 7
    378a:	40 5d       	subi	r20, 0xD0	; 208
    378c:	41 93       	st	Z+, r20
    378e:	b3 e0       	ldi	r27, 0x03	; 3
    3790:	0f d0       	rcall	.+30     	; 0x37b0 <__ultoa_invert+0x86>
    3792:	c9 f7       	brne	.-14     	; 0x3786 <__ultoa_invert+0x5c>
    3794:	f6 cf       	rjmp	.-20     	; 0x3782 <__ultoa_invert+0x58>
    3796:	46 2f       	mov	r20, r22
    3798:	4f 70       	andi	r20, 0x0F	; 15
    379a:	40 5d       	subi	r20, 0xD0	; 208
    379c:	4a 33       	cpi	r20, 0x3A	; 58
    379e:	18 f0       	brcs	.+6      	; 0x37a6 <__ultoa_invert+0x7c>
    37a0:	49 5d       	subi	r20, 0xD9	; 217
    37a2:	31 fd       	sbrc	r19, 1
    37a4:	40 52       	subi	r20, 0x20	; 32
    37a6:	41 93       	st	Z+, r20
    37a8:	02 d0       	rcall	.+4      	; 0x37ae <__ultoa_invert+0x84>
    37aa:	a9 f7       	brne	.-22     	; 0x3796 <__ultoa_invert+0x6c>
    37ac:	ea cf       	rjmp	.-44     	; 0x3782 <__ultoa_invert+0x58>
    37ae:	b4 e0       	ldi	r27, 0x04	; 4
    37b0:	a6 95       	lsr	r26
    37b2:	97 95       	ror	r25
    37b4:	87 95       	ror	r24
    37b6:	77 95       	ror	r23
    37b8:	67 95       	ror	r22
    37ba:	ba 95       	dec	r27
    37bc:	c9 f7       	brne	.-14     	; 0x37b0 <__ultoa_invert+0x86>
    37be:	00 97       	sbiw	r24, 0x00	; 0
    37c0:	61 05       	cpc	r22, r1
    37c2:	71 05       	cpc	r23, r1
    37c4:	08 95       	ret
    37c6:	9b 01       	movw	r18, r22
    37c8:	ac 01       	movw	r20, r24
    37ca:	0a 2e       	mov	r0, r26
    37cc:	06 94       	lsr	r0
    37ce:	57 95       	ror	r21
    37d0:	47 95       	ror	r20
    37d2:	37 95       	ror	r19
    37d4:	27 95       	ror	r18
    37d6:	ba 95       	dec	r27
    37d8:	c9 f7       	brne	.-14     	; 0x37cc <__ultoa_invert+0xa2>
    37da:	62 0f       	add	r22, r18
    37dc:	73 1f       	adc	r23, r19
    37de:	84 1f       	adc	r24, r20
    37e0:	95 1f       	adc	r25, r21
    37e2:	a0 1d       	adc	r26, r0
    37e4:	08 95       	ret

000037e6 <__eerd_block_m128>:
    37e6:	dc 01       	movw	r26, r24
    37e8:	cb 01       	movw	r24, r22

000037ea <__eerd_blraw_m128>:
    37ea:	fc 01       	movw	r30, r24
    37ec:	e1 99       	sbic	0x1c, 1	; 28
    37ee:	fe cf       	rjmp	.-4      	; 0x37ec <__eerd_blraw_m128+0x2>
    37f0:	06 c0       	rjmp	.+12     	; 0x37fe <__eerd_blraw_m128+0x14>
    37f2:	ff bb       	out	0x1f, r31	; 31
    37f4:	ee bb       	out	0x1e, r30	; 30
    37f6:	e0 9a       	sbi	0x1c, 0	; 28
    37f8:	31 96       	adiw	r30, 0x01	; 1
    37fa:	0d b2       	in	r0, 0x1d	; 29
    37fc:	0d 92       	st	X+, r0
    37fe:	41 50       	subi	r20, 0x01	; 1
    3800:	50 40       	sbci	r21, 0x00	; 0
    3802:	b8 f7       	brcc	.-18     	; 0x37f2 <__eerd_blraw_m128+0x8>
    3804:	08 95       	ret

00003806 <__eewr_block_m128>:
    3806:	dc 01       	movw	r26, r24
    3808:	cb 01       	movw	r24, r22
    380a:	03 c0       	rjmp	.+6      	; 0x3812 <__eewr_block_m128+0xc>
    380c:	2d 91       	ld	r18, X+
    380e:	0e 94 0e 1c 	call	0x381c	; 0x381c <__eewr_r18_m128>
    3812:	41 50       	subi	r20, 0x01	; 1
    3814:	50 40       	sbci	r21, 0x00	; 0
    3816:	d0 f7       	brcc	.-12     	; 0x380c <__eewr_block_m128+0x6>
    3818:	08 95       	ret

0000381a <__eewr_byte_m128>:
    381a:	26 2f       	mov	r18, r22

0000381c <__eewr_r18_m128>:
    381c:	e1 99       	sbic	0x1c, 1	; 28
    381e:	fe cf       	rjmp	.-4      	; 0x381c <__eewr_r18_m128>
    3820:	9f bb       	out	0x1f, r25	; 31
    3822:	8e bb       	out	0x1e, r24	; 30
    3824:	2d bb       	out	0x1d, r18	; 29
    3826:	0f b6       	in	r0, 0x3f	; 63
    3828:	f8 94       	cli
    382a:	e2 9a       	sbi	0x1c, 2	; 28
    382c:	e1 9a       	sbi	0x1c, 1	; 28
    382e:	0f be       	out	0x3f, r0	; 63
    3830:	01 96       	adiw	r24, 0x01	; 1
    3832:	08 95       	ret

00003834 <_exit>:
    3834:	f8 94       	cli

00003836 <__stop_program>:
    3836:	ff cf       	rjmp	.-2      	; 0x3836 <__stop_program>
